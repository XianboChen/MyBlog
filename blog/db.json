{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Android6-0-source-code-first-anlysis.md","hash":"e09a30cf804b3af4122691640795493b24a97646","modified":1472627123000},{"_id":"source/_posts/Android6-0-source-code-first-anlysis.md~","hash":"c9d70dfd7c4a724d1d5ad48d1241e5fbc3dc3272","modified":1472627123000},{"_id":"source/_posts/Java反射浅谈（一）.md","hash":"323c34c34ad5a6a88e2e0a77f5a2c30735fffd42","modified":1472627123000},{"_id":"source/_posts/Java反射浅谈（一）.md~","hash":"05f8d03940fefdb1687c14cd7ea39c7f4f079e07","modified":1472627123000},{"_id":"source/_posts/Java多线程浅谈（一）.md","hash":"f4937e384e3d3548e37f2174e8751491f76a7f04","modified":1472627123000},{"_id":"source/_posts/Java多线程浅谈（一）.md~","hash":"896a54769345d7258f60d126dddb56fea81b0c0a","modified":1472627123000},{"_id":"source/_posts/Shell简单学习.md","hash":"42ac36d2ea7641eefe56bdddbf2208ef22d3591f","modified":1472627123000},{"_id":"source/_posts/Shell简单学习.md~","hash":"d0c807cf827925cf88113f0a6f4e3f83ca1c26d7","modified":1472627123000},{"_id":"source/_posts/hello-world.md","hash":"5c6c2e58d3ef9d2459d32a9f824090c9bcad771e","modified":1472627123000},{"_id":"source/_posts/hello-world.md~","hash":"258427fe8b07627da577db84cedc3e0c04b5b88c","modified":1472627123000},{"_id":"source/_posts/教你快刀斩乱麻般的抓住进程和线程的区别.md","hash":"0ea05dda38d542791707031d03db3010b9286b15","modified":1472627123000},{"_id":"source/_posts/教你快刀斩乱麻般的抓住进程和线程的区别.md~","hash":"d11c6e85895638043ff5b7370a5c18596c075a52","modified":1472627123000},{"_id":"source/_posts/来电翻转静音与免提自动切换听筒功能的实现.md","hash":"1d36ac53f4664a6a71d58eb5760af96192a2bc25","modified":1472627123000},{"_id":"source/_posts/来电翻转静音与免提自动切换听筒功能的实现.md~","hash":"6c59a2d6f27e2fe86e7568d3d8d4b2d711d41d23","modified":1472627123000},{"_id":"source/_posts/转-Android编译系统的理解.md","hash":"c385c2b8a2dd2d29631372ebe3064d1bf77f2de6","modified":1472627123000},{"_id":"source/_posts/转-Android编译系统的理解.md~","hash":"5ea072d0e9e10cdd4f973c1f4ec68ccabc8e2f07","modified":1472627123000},{"_id":"source/about/index.md","hash":"d00244e4660333516228d6e137fff47c7c8d39a3","modified":1472627123000},{"_id":"source/about/index.md~","hash":"c8d3546674d87954399db3fd98f35c352ada8aef","modified":1472627123000},{"_id":"source/tags/index.md","hash":"be477e112d7c1359e3b4e32c36789bb751b1a282","modified":1472627123000},{"_id":"source/tags/index.md~","hash":"be477e112d7c1359e3b4e32c36789bb751b1a282","modified":1472627123000},{"_id":"source/images/avatar.png","hash":"826ec3aaff17cf3f416bab69c6dd3e7027977947","modified":1472627123000},{"_id":"source/images/avatar.jpg","hash":"3b2e358c10368e29b8e5a5ca8dd258feb8fd7cc0","modified":1472627123000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1472635291000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1472635291000},{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1472635291000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1472635291000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1472635291000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1472635291000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1472635291000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1472635291000},{"_id":"themes/next/_config.yml","hash":"ff078be3cdeccc0b1e93f82fd8dd7b6e38c88276","modified":1472635461000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1472635291000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1472635291000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1472635291000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1472635291000},{"_id":"themes/next/.git/config","hash":"6c9579905995d9bffe43e0019f68b12b1f8849ed","modified":1472635291000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1472635201000},{"_id":"themes/next/.git/index","hash":"f4fa751f4774f47cc393fd61e722b1fbbe5f6018","modified":1472635291000},{"_id":"themes/next/.git/packed-refs","hash":"993a0e27d24ef86da3f55b01265dd89c0cb08573","modified":1472635291000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1472635291000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1472635291000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1472635291000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1472635291000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1472635291000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1472635291000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1472635291000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1472635291000},{"_id":"themes/next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1472635291000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1472635291000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1472635291000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1472635291000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1472635291000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1472635291000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1472635291000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1472635291000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1472635291000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1472635291000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1472635291000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1472635291000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1472635291000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1472635291000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1472635291000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1472635291000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1472635291000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1472635291000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472635291000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1472635201000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1472635201000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1472635201000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1472635201000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1472635201000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1472635201000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1472635201000},{"_id":"themes/next/.git/hooks/update.sample","hash":"285293d900ea3cb448a33ebe3e6fc617ef78a45f","modified":1472635201000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1472635201000},{"_id":"themes/next/.git/logs/HEAD","hash":"eee116fda2e2ce89808a25f1c4e676e0e87d8246","modified":1472635291000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1472635291000},{"_id":"themes/next/layout/_macro/post.swig","hash":"f3895bf44a9fb7c462f2e57b9a914703c2f152ba","modified":1472635291000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1472635291000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1472635291000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1472635291000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1472635291000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1472635291000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1472635291000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1472635291000},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1472635291000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1472635291000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1472635291000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1472635291000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1472635291000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1472635291000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1472635291000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1472635291000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1472635291000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1472635291000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1472635291000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1472635291000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1472635291000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1472635291000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1472635291000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1472635291000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1472635291000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1472635291000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1472635291000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1472635291000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1472635291000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1472635291000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1472635291000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1472635291000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472635291000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472635291000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472635291000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472635291000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472635291000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472635291000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472635291000},{"_id":"themes/next/.git/refs/heads/master","hash":"a000ff7ceba1704584e39c908e83fe3db5859335","modified":1472635291000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1472635291000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1472635291000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1472635291000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1472635291000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1472635291000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1472635291000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1472635291000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1472635291000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1472635291000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1472635291000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1472635291000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1472635291000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1472635291000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1472635291000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1472635291000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1472635291000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1472635291000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1472635291000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1472635291000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1472635291000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1472635291000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1472635291000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1472635291000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1472635291000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1472635291000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1472635291000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1472635291000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1472635291000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1472635291000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1472635291000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1472635291000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1472635291000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1472635291000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1472635291000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1472635291000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1472635291000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1472635291000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1472635291000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1472635291000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1472635291000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1472635291000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1472635291000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1472635291000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1472635291000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1472635291000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1472635291000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1472635291000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1472635291000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1472635291000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1472635291000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1472635291000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1472635291000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1472635291000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"eee116fda2e2ce89808a25f1c4e676e0e87d8246","modified":1472635291000},{"_id":"themes/next/.git/objects/pack/pack-2c0e1415b26fbcc97a941993dfa1faa4d1ac6d3a.idx","hash":"df3e80c427ffb662152d057bc39d5e53ad3f3ffe","modified":1472635291000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1472635291000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1472635291000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1472635291000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"1e3e1c6231408e18e8485a8e0e59e8880349b210","modified":1472635291000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1472635291000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1472635291000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1472635291000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1472635291000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1472635291000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1472635291000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1472635291000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1472635291000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1472635291000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1472635291000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1472635291000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1472635291000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1472635291000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1472635291000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1472635291000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1472635291000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1472635291000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1472635291000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1472635291000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1472635291000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1472635291000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1472635291000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1472635291000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1472635291000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1472635291000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1472635291000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1472635291000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1472635291000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1472635291000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1472635291000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1472635291000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1472635291000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1472635291000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1472635291000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1472635291000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1472635291000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1472635291000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1472635291000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1472635291000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1472635291000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1472635291000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1472635291000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1472635291000},{"_id":"themes/next/.git/objects/pack/pack-2c0e1415b26fbcc97a941993dfa1faa4d1ac6d3a.pack","hash":"8b28a22776ffc0e6313769e8f2cc855633f4de03","modified":1472635291000},{"_id":"public/about/index.html","hash":"e1f290f105e81a3767da80aa6c5790dc17416195","modified":1472635479153},{"_id":"public/tags/index.html","hash":"f55a0699bc084803c53994e7262f0f3757902a54","modified":1472635479173},{"_id":"public/2016/08/20/转-Android编译系统的理解/index.html","hash":"7c1f45182e830637965df0d4182c5eea56b43a4f","modified":1472635479213},{"_id":"public/2016/08/20/来电翻转静音与免提自动切换听筒功能的实现/index.html","hash":"a25f28d18e4dffe774511233ae9a8476623d548f","modified":1472635479246},{"_id":"public/2016/08/14/教你快刀斩乱麻般的抓住进程和线程的区别/index.html","hash":"8ad9c192003938ce0c42730c62f506a3f9fe51da","modified":1472635479273},{"_id":"public/2016/07/29/Shell简单学习/index.html","hash":"592e3285a6e71e703a233d86e6b7dc76ea77a366","modified":1472635479302},{"_id":"public/2016/07/26/Java多线程浅谈（一）/index.html","hash":"ddab2382b88292a47eceab77badff73cddb55301","modified":1472635479334},{"_id":"public/2016/07/25/Java反射浅谈（一）/index.html","hash":"1a5c629efd6a679164032e775eff7877e4fdedfc","modified":1472635479362},{"_id":"public/2016/07/22/Android6-0-source-code-first-anlysis/index.html","hash":"c699a263fafbd7aeb877c3c23bab820ec1b22557","modified":1472635479407},{"_id":"public/2016/07/10/hello-world/index.html","hash":"963ee322d34aa3f84c7f9326cea335cc90809ae6","modified":1472635479443},{"_id":"public/archives/index.html","hash":"9c72572c659f6ee59484b24f61e74459661176cc","modified":1472635479498},{"_id":"public/archives/2016/index.html","hash":"5308c03f2230395d60abee3781491f66b8bcfd3d","modified":1472635479560},{"_id":"public/archives/2016/07/index.html","hash":"8cb54a56bed10f4455284db00d9aa1667c3e07e0","modified":1472635479588},{"_id":"public/archives/2016/08/index.html","hash":"269b37872e5af7ab9fa2d7e019678f8dbb8dd920","modified":1472635479614},{"_id":"public/index.html","hash":"60a391ba5b7b1d4d00bbffad87aa5e89e1e26f5f","modified":1472635479661},{"_id":"public/tags/java/index.html","hash":"5bb12d807ab0ca9454972432c98064113ce5ed58","modified":1472635479685},{"_id":"public/tags/Android/index.html","hash":"7d6b58d4027166edb69c530c5502d78af81854a0","modified":1472635479711},{"_id":"public/tags/Shell/index.html","hash":"633be16365a4df31f0923974bc592fc103aad4a0","modified":1472635479730},{"_id":"public/tags/Tool/index.html","hash":"ab8720d8e9f5530c2286543c650a4345d5d5e7ad","modified":1472635479747},{"_id":"public/tags/hexo/index.html","hash":"30951a9a0b60bebe177754881371f4cd0b428e35","modified":1472635479770},{"_id":"public/tags/操作系统/index.html","hash":"3c913e5c26c827d1a38df5da016ea2122cff8eed","modified":1472635479787},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1472635479793},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1472635479793},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1472635479793},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1472635479793},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1472635479793},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1472635479793},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1472635479794},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1472635479794},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1472635479794},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1472635479794},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1472635479794},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1472635479794},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1472635479794},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1472635479794},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1472635479795},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1472635479795},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1472635479795},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1472635479795},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1472635479795},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1472635479795},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1472635479795},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1472635479796},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1472635479796},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1472635479796},{"_id":"public/css/main.css","hash":"2f6664b78c2a2c7da2a59d0dbd47a80e8b15bea3","modified":1472635480270},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1472635480271},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1472635480271},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1472635480271},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1472635480271},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1472635480271},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1472635480272},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1472635480272},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1472635480288},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1472635480288},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1472635480289},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1472635480292},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1472635480295},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1472635480295},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1472635480295},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1472635480295},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1472635480295},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1472635480296},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1472635480296},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1472635480296},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1472635480297},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1472635480297},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1472635480298},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1472635480298},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1472635480298},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1472635480299},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1472635480299},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1472635480299},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1472635480299},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1472635480299},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1472635480300},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1472635480300},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1472635480300},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1472635480301},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1472635480301},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1472635480301},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1472635480301},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1472635480301},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1472635480301},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1472635480301},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1472635480305},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1472635480310}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2016-08-20T08:58:59.000Z","_content":"### 欢迎来到陈贤波的个人博客！\n\n</br>\n## 搭建介绍\n\n本博客系统是利用hexo与github搭建而成，网上有很多总结的很少的搭建教程，就不在此赘述，感兴趣的话可以自行百度相关关键字即可，这里只介绍几个搭建时候我说遇到的问题，希望可以给大家一点帮助。\n\n\n### SSH\n本地生成SSH并将id_rsa.pub添加到github后，连接服务器却报：\n\nAgent admitted failure to sign using the key\n\n错误。出现这种情况可能所由于本地未刷新，执行命令：\n\n``` bash\n$ ssh-add\n```\n即可。\n\n\n### 安装node.js\n由于网络的原因，网上给出的很对node.js资源连接不上，这里给出一个下载相对比较快的资源，依次执行命令：\n``` bash\n$ sudo add-apt-repository ppa:chris-lea/node.js\n$ sudo apt-get update\n$ sudo apt-get install nodejs\n```\n\n### 安装hexo\n安装hexo以官方介绍为准，部分博客给出的命令可能是因为hexo版本不同的问题产生异常的错误\n\n#### Installation\n```\n$ npm install hexo-cli -g\n```\n#### Quick Start\n\n##### Setup your blog\n```\n$ hexo init blog\n$ cd blog\n```\n##### Start the server\n```\n$ hexo server\n```\n##### Create a new post\n```\n$ hexo new \"Hello Hexo\"\n```\n##### Generate static files\n```\n$ hexo generate\n```\n[More info](https://github.com/hexojs/hexo)\n### hexo deply报错\nhexo 更新到3.0之后，deploy的type 的github需要改成git，并在deploy前执行命令：\n```\n$ npm install hexo-deployer-git --save\n```\n### hexo server 端口被占用\n执行更换端口的命令：\n```\nhexo s -p 5000 (-p 后接端口）\n```\n## 结束语\n如果是初次搭建，一路上会有很多坑，希望你能坚持下来，完成你的个人博客搭建，开启你的博客之旅！\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-08-20 16:58:59\n---\n### 欢迎来到陈贤波的个人博客！\n\n</br>\n## 搭建介绍\n\n本博客系统是利用hexo与github搭建而成，网上有很多总结的很少的搭建教程，就不在此赘述，感兴趣的话可以自行百度相关关键字即可，这里只介绍几个搭建时候我说遇到的问题，希望可以给大家一点帮助。\n\n\n### SSH\n本地生成SSH并将id_rsa.pub添加到github后，连接服务器却报：\n\nAgent admitted failure to sign using the key\n\n错误。出现这种情况可能所由于本地未刷新，执行命令：\n\n``` bash\n$ ssh-add\n```\n即可。\n\n\n### 安装node.js\n由于网络的原因，网上给出的很对node.js资源连接不上，这里给出一个下载相对比较快的资源，依次执行命令：\n``` bash\n$ sudo add-apt-repository ppa:chris-lea/node.js\n$ sudo apt-get update\n$ sudo apt-get install nodejs\n```\n\n### 安装hexo\n安装hexo以官方介绍为准，部分博客给出的命令可能是因为hexo版本不同的问题产生异常的错误\n\n#### Installation\n```\n$ npm install hexo-cli -g\n```\n#### Quick Start\n\n##### Setup your blog\n```\n$ hexo init blog\n$ cd blog\n```\n##### Start the server\n```\n$ hexo server\n```\n##### Create a new post\n```\n$ hexo new \"Hello Hexo\"\n```\n##### Generate static files\n```\n$ hexo generate\n```\n[More info](https://github.com/hexojs/hexo)\n### hexo deply报错\nhexo 更新到3.0之后，deploy的type 的github需要改成git，并在deploy前执行命令：\n```\n$ npm install hexo-deployer-git --save\n```\n### hexo server 端口被占用\n执行更换端口的命令：\n```\nhexo s -p 5000 (-p 后接端口）\n```\n## 结束语\n如果是初次搭建，一路上会有很多坑，希望你能坚持下来，完成你的个人博客搭建，开启你的博客之旅！\n\n","updated":"2016-08-31T07:05:23.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cisimytyi000naojxb6zvchxc","content":"<h3 id=\"欢迎来到陈贤波的个人博客！\"><a href=\"#欢迎来到陈贤波的个人博客！\" class=\"headerlink\" title=\"欢迎来到陈贤波的个人博客！\"></a>欢迎来到陈贤波的个人博客！</h3><p><br></p>\n<h2 id=\"搭建介绍\"><a href=\"#搭建介绍\" class=\"headerlink\" title=\"搭建介绍\"></a>搭建介绍</h2><p>本博客系统是利用hexo与github搭建而成，网上有很多总结的很少的搭建教程，就不在此赘述，感兴趣的话可以自行百度相关关键字即可，这里只介绍几个搭建时候我说遇到的问题，希望可以给大家一点帮助。</p>\n<h3 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h3><p>本地生成SSH并将id_rsa.pub添加到github后，连接服务器却报：</p>\n<p>Agent admitted failure to sign using the key</p>\n<p>错误。出现这种情况可能所由于本地未刷新，执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-add</div></pre></td></tr></table></figure>\n<p>即可。</p>\n<h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><p>由于网络的原因，网上给出的很对node.js资源连接不上，这里给出一个下载相对比较快的资源，依次执行命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo add-apt-repository ppa:chris-lea/node.js</div><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install nodejs</div></pre></td></tr></table></figure></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>安装hexo以官方介绍为准，部分博客给出的命令可能是因为hexo版本不同的问题产生异常的错误</p>\n<h4 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<h4 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h4><h5 id=\"Setup-your-blog\"><a href=\"#Setup-your-blog\" class=\"headerlink\" title=\"Setup your blog\"></a>Setup your blog</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init blog</div><div class=\"line\">$ cd blog</div></pre></td></tr></table></figure>\n<h5 id=\"Start-the-server\"><a href=\"#Start-the-server\" class=\"headerlink\" title=\"Start the server\"></a>Start the server</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<h5 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new &quot;Hello Hexo&quot;</div></pre></td></tr></table></figure>\n<h5 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"external\">More info</a></p>\n<h3 id=\"hexo-deply报错\"><a href=\"#hexo-deply报错\" class=\"headerlink\" title=\"hexo deply报错\"></a>hexo deply报错</h3><p>hexo 更新到3.0之后，deploy的type 的github需要改成git，并在deploy前执行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<h3 id=\"hexo-server-端口被占用\"><a href=\"#hexo-server-端口被占用\" class=\"headerlink\" title=\"hexo server 端口被占用\"></a>hexo server 端口被占用</h3><p>执行更换端口的命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s -p 5000 (-p 后接端口）</div></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>如果是初次搭建，一路上会有很多坑，希望你能坚持下来，完成你的个人博客搭建，开启你的博客之旅！</p>\n","excerpt":"","more":"<h3 id=\"欢迎来到陈贤波的个人博客！\"><a href=\"#欢迎来到陈贤波的个人博客！\" class=\"headerlink\" title=\"欢迎来到陈贤波的个人博客！\"></a>欢迎来到陈贤波的个人博客！</h3><p></br></p>\n<h2 id=\"搭建介绍\"><a href=\"#搭建介绍\" class=\"headerlink\" title=\"搭建介绍\"></a>搭建介绍</h2><p>本博客系统是利用hexo与github搭建而成，网上有很多总结的很少的搭建教程，就不在此赘述，感兴趣的话可以自行百度相关关键字即可，这里只介绍几个搭建时候我说遇到的问题，希望可以给大家一点帮助。</p>\n<h3 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h3><p>本地生成SSH并将id_rsa.pub添加到github后，连接服务器却报：</p>\n<p>Agent admitted failure to sign using the key</p>\n<p>错误。出现这种情况可能所由于本地未刷新，执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-add</div></pre></td></tr></table></figure>\n<p>即可。</p>\n<h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><p>由于网络的原因，网上给出的很对node.js资源连接不上，这里给出一个下载相对比较快的资源，依次执行命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo add-apt-repository ppa:chris-lea/node.js</div><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install nodejs</div></pre></td></tr></table></figure></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>安装hexo以官方介绍为准，部分博客给出的命令可能是因为hexo版本不同的问题产生异常的错误</p>\n<h4 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<h4 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h4><h5 id=\"Setup-your-blog\"><a href=\"#Setup-your-blog\" class=\"headerlink\" title=\"Setup your blog\"></a>Setup your blog</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init blog</div><div class=\"line\">$ cd blog</div></pre></td></tr></table></figure>\n<h5 id=\"Start-the-server\"><a href=\"#Start-the-server\" class=\"headerlink\" title=\"Start the server\"></a>Start the server</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<h5 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new &quot;Hello Hexo&quot;</div></pre></td></tr></table></figure>\n<h5 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/hexojs/hexo\">More info</a></p>\n<h3 id=\"hexo-deply报错\"><a href=\"#hexo-deply报错\" class=\"headerlink\" title=\"hexo deply报错\"></a>hexo deply报错</h3><p>hexo 更新到3.0之后，deploy的type 的github需要改成git，并在deploy前执行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<h3 id=\"hexo-server-端口被占用\"><a href=\"#hexo-server-端口被占用\" class=\"headerlink\" title=\"hexo server 端口被占用\"></a>hexo server 端口被占用</h3><p>执行更换端口的命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s -p 5000 (-p 后接端口）</div></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>如果是初次搭建，一路上会有很多坑，希望你能坚持下来，完成你的个人博客搭建，开启你的博客之旅！</p>\n"},{"title":"tags","date":"2016-08-20T08:50:36.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-08-20 16:50:36\ntype: \"tags\"\n---\n","updated":"2016-08-31T07:05:23.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cisimytyj000oaojx2uvirs4z","content":"","excerpt":"","more":""}],"Post":[{"title":"Java反射浅谈（一）","date":"2016-07-25T14:12:10.000Z","_content":"反射常用于各种框架中如:spring中的bean就是利用反射实现以及反编译中。\njava.lang.Class是反射的源头。\n创建一个类，通过编译（java.exe)，生成对应的.class文件，之后使用java.exe加载（JVM类加载器）此.class文件，此.calss文件加载到内存后，就是一个运行时类，存在缓冲区。这个运行类本身就是一个Class实例，一个运行时类只加载一次。有了Class实例后，我们才可以进行如下操作： \n1、创建对应的运行时类的对象；\n2、获取对象运行时类的完整结构（属性、方法、构造器、内部类、父类、所在包、异常、注解...)\n3、调用对应运行时类的指定结构（属性、方法、构造器）\n4、反射的应用：动态代理\n### Java获取Class对象的四种方式\n1、若已知具体的类，则首选通过类的class属性获取，该方法最为安全可靠，程序性能最高。\ndemo：\n``` Java\nimport java.lang.reflect;\nimport example.Person;\n\npublic class  ReflectionTest {\n\tpublic static void  main(String args[]) throws Exception  {\t\n\t\tClass clazz = Person.class; \n\t\t//1.创建clazz对应的运行时类Person类的对象\n\t\tPerson p = (Person) clazz.newInstance();   \n\t\t//2.通过反射调用运行时类的指定属性\n\t\tField f1 = clazz.getField(\"name\");\n        f1.set(p, \"xianbo\");\n        //3.通过反射调用运行时类的指定方法\n       // p.say();\n        Method m1 = clazz.getMethod(\"say\");\n        m1.invoke(p);\n\t   }\n\t}\n```\n``` Java\npackage example;\n\npublic class Person {\n\tpublic String name = \"tom\";\n\tpublic Person () {\n\t\tSystem.out.println(\"调用了Person()构造方法\");\n\t}\n\tpublic void say () {\n\t\tSystem.out.println(\"my name is \" + name);\n\t}\n}\n```\n运行结果：\n\n> 调用了Person()构造方法\n> my name is xianbo\n\n2、通过运行时类的对象获取\ndemo:\n``` java\nimport java.lang.reflect;\nimport example.Person;\n\npublic class  ReflectionTest {\n\tpublic static void  main(String args[]) throws Exception   {\t\n\t\tPerson p = new Person();\n\t\tClass clazz = p.getClass();\n\t\tSystem.out.println(clazz.getName());\n\t   }\n\t}\n```\n运行结果：\n> 调用了Person()构造方法\n> example.Person\n\n3、已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出ClassNotFoundException异常。（反射的动态性）\ndemo\n``` java\nimport java.lang.reflect;\nimport example.Person;\n\npublic class  ReflectionTest {\n\tpublic static void  main(String args[]) throws ClassNotFoundException {\t\n\t\tString classname = \"example.Person\";\n\t\tClass clazz = Class.forName(classname);\n\t\tSystem.out.println(clazz.getName());\n\t\t}\n\t}\n```\n运行结果：\n> example.Person\n\n4、通过类的加载器\n``` java\nimport java.lang.reflect;\nimport example.Person;\n\npublic class  ReflectionTest {\n\tpublic static void  main(String args[]) throws ClassNotFoundException  {\t\n\t\tReflectionTest re = new ReflectionTest();\n\t\tre.test();\n\t   }\n\tpublic void test() throws ClassNotFoundException {\n    String classname = \"example.Person\";\n\tClassLoader classLoader = this.getClass().getClassLoader(); \n\t//Cannot use this in a static context\n\tClass clazz = classLoader.loadClass(classname);\n\tSystem.out.println(clazz.getName());\n \t}\n}\n```\n运行结果：\n> example.Person\n\n### 创建运行时类的对象\n在得到Class运行时类后，我们就可以通过newInstance()方法创建运行时类所对应的对象\ndomo\n``` java\nimport example.Person;\n\npublic class TestConstructor {\n\tpublic void test1() throws Exception {\n\t\tString className = \"example.Person\";\n\t\tClass clazz = Class.forName(className);\n\t\t//创建运行时类的对象\n\t\tObject obj = clazz.newInstance();\n\t\tPerson p = (Person)obj;\n\t\tSystem.out.println(p);\n\t}\n}\n```\n运行结果：\n> 调用了Person()构造方法\n> example.Person@4d871a69\n\n这里调用newInstance()实际上就是调用了运行时类的空参构造器，所以要想创建对象成功要满足两点：\n1、对应的类要有空参的构造器；(没有空参的构造器也能通过其他的方法得到对象）\n2、构造器的权限修饰符权限要足够。\n\n### 获取类的属性和方法\n在得到类后，可以通过getField（）方法获取public的属性，还可以通过getDecllareFields()方法获取该类的所有属性。\ndemo\n``` java\npublic static void test1() {\n\t\tClass clazz = Person.class;\n\t\tField[] fields = clazz.getDeclaredFields();\n\t\tfor(Field f : fields) {\n\t\t\t//1.获取每个属性的权限修饰符\n\t\t\tint i = f.getModifiers();//在java源码中，修饰符是一个个static final的数字\n\t\t\tString str1 = Modifier.toString(i);\n\t\t\tSystem.out.print(i + \" \"  + str1 + \" \" );\n\t\t\t//2.获取属性的类型\n\t\t\tClass type = f.getType();\n\t\t\tSystem.out.print(type + \" \" + type.getName() + \" \");\n\t\t\t//3.获取属性名\n\t\t\tSystem.out.println(f.getName());\n\t\t\tSystem.out.println();\n\t\t}\n\t\t\n\t}\n\n}\n```\n``` java\npackage example;\n\npublic class Person {\n    String name = \"xianbo\";\n    public int age = 20;\n    private float height = 180;\n\tpublic Person () {\n\t\tSystem.out.println(\"调用了Person()构造方法\");\n\t}\n\tpublic void say () {\n\t\tSystem.out.println(\"my name is \" + name);\n\t}\n}\n```\n运行结果：\n> 0  class java.lang.String java.lang.String name\n\n> 1 public int int age\n\n> 2 private float float height\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Java反射浅谈（一）.md","raw":"---\ntitle: Java反射浅谈（一）\ndate: 2016-07-25 22:12:10\ntags:\n  - java\n---\n反射常用于各种框架中如:spring中的bean就是利用反射实现以及反编译中。\njava.lang.Class是反射的源头。\n创建一个类，通过编译（java.exe)，生成对应的.class文件，之后使用java.exe加载（JVM类加载器）此.class文件，此.calss文件加载到内存后，就是一个运行时类，存在缓冲区。这个运行类本身就是一个Class实例，一个运行时类只加载一次。有了Class实例后，我们才可以进行如下操作： \n1、创建对应的运行时类的对象；\n2、获取对象运行时类的完整结构（属性、方法、构造器、内部类、父类、所在包、异常、注解...)\n3、调用对应运行时类的指定结构（属性、方法、构造器）\n4、反射的应用：动态代理\n### Java获取Class对象的四种方式\n1、若已知具体的类，则首选通过类的class属性获取，该方法最为安全可靠，程序性能最高。\ndemo：\n``` Java\nimport java.lang.reflect;\nimport example.Person;\n\npublic class  ReflectionTest {\n\tpublic static void  main(String args[]) throws Exception  {\t\n\t\tClass clazz = Person.class; \n\t\t//1.创建clazz对应的运行时类Person类的对象\n\t\tPerson p = (Person) clazz.newInstance();   \n\t\t//2.通过反射调用运行时类的指定属性\n\t\tField f1 = clazz.getField(\"name\");\n        f1.set(p, \"xianbo\");\n        //3.通过反射调用运行时类的指定方法\n       // p.say();\n        Method m1 = clazz.getMethod(\"say\");\n        m1.invoke(p);\n\t   }\n\t}\n```\n``` Java\npackage example;\n\npublic class Person {\n\tpublic String name = \"tom\";\n\tpublic Person () {\n\t\tSystem.out.println(\"调用了Person()构造方法\");\n\t}\n\tpublic void say () {\n\t\tSystem.out.println(\"my name is \" + name);\n\t}\n}\n```\n运行结果：\n\n> 调用了Person()构造方法\n> my name is xianbo\n\n2、通过运行时类的对象获取\ndemo:\n``` java\nimport java.lang.reflect;\nimport example.Person;\n\npublic class  ReflectionTest {\n\tpublic static void  main(String args[]) throws Exception   {\t\n\t\tPerson p = new Person();\n\t\tClass clazz = p.getClass();\n\t\tSystem.out.println(clazz.getName());\n\t   }\n\t}\n```\n运行结果：\n> 调用了Person()构造方法\n> example.Person\n\n3、已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出ClassNotFoundException异常。（反射的动态性）\ndemo\n``` java\nimport java.lang.reflect;\nimport example.Person;\n\npublic class  ReflectionTest {\n\tpublic static void  main(String args[]) throws ClassNotFoundException {\t\n\t\tString classname = \"example.Person\";\n\t\tClass clazz = Class.forName(classname);\n\t\tSystem.out.println(clazz.getName());\n\t\t}\n\t}\n```\n运行结果：\n> example.Person\n\n4、通过类的加载器\n``` java\nimport java.lang.reflect;\nimport example.Person;\n\npublic class  ReflectionTest {\n\tpublic static void  main(String args[]) throws ClassNotFoundException  {\t\n\t\tReflectionTest re = new ReflectionTest();\n\t\tre.test();\n\t   }\n\tpublic void test() throws ClassNotFoundException {\n    String classname = \"example.Person\";\n\tClassLoader classLoader = this.getClass().getClassLoader(); \n\t//Cannot use this in a static context\n\tClass clazz = classLoader.loadClass(classname);\n\tSystem.out.println(clazz.getName());\n \t}\n}\n```\n运行结果：\n> example.Person\n\n### 创建运行时类的对象\n在得到Class运行时类后，我们就可以通过newInstance()方法创建运行时类所对应的对象\ndomo\n``` java\nimport example.Person;\n\npublic class TestConstructor {\n\tpublic void test1() throws Exception {\n\t\tString className = \"example.Person\";\n\t\tClass clazz = Class.forName(className);\n\t\t//创建运行时类的对象\n\t\tObject obj = clazz.newInstance();\n\t\tPerson p = (Person)obj;\n\t\tSystem.out.println(p);\n\t}\n}\n```\n运行结果：\n> 调用了Person()构造方法\n> example.Person@4d871a69\n\n这里调用newInstance()实际上就是调用了运行时类的空参构造器，所以要想创建对象成功要满足两点：\n1、对应的类要有空参的构造器；(没有空参的构造器也能通过其他的方法得到对象）\n2、构造器的权限修饰符权限要足够。\n\n### 获取类的属性和方法\n在得到类后，可以通过getField（）方法获取public的属性，还可以通过getDecllareFields()方法获取该类的所有属性。\ndemo\n``` java\npublic static void test1() {\n\t\tClass clazz = Person.class;\n\t\tField[] fields = clazz.getDeclaredFields();\n\t\tfor(Field f : fields) {\n\t\t\t//1.获取每个属性的权限修饰符\n\t\t\tint i = f.getModifiers();//在java源码中，修饰符是一个个static final的数字\n\t\t\tString str1 = Modifier.toString(i);\n\t\t\tSystem.out.print(i + \" \"  + str1 + \" \" );\n\t\t\t//2.获取属性的类型\n\t\t\tClass type = f.getType();\n\t\t\tSystem.out.print(type + \" \" + type.getName() + \" \");\n\t\t\t//3.获取属性名\n\t\t\tSystem.out.println(f.getName());\n\t\t\tSystem.out.println();\n\t\t}\n\t\t\n\t}\n\n}\n```\n``` java\npackage example;\n\npublic class Person {\n    String name = \"xianbo\";\n    public int age = 20;\n    private float height = 180;\n\tpublic Person () {\n\t\tSystem.out.println(\"调用了Person()构造方法\");\n\t}\n\tpublic void say () {\n\t\tSystem.out.println(\"my name is \" + name);\n\t}\n}\n```\n运行结果：\n> 0  class java.lang.String java.lang.String name\n\n> 1 public int int age\n\n> 2 private float float height\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Java反射浅谈（一）","published":1,"updated":"2016-08-31T07:05:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisimytxz0000aojx64r75puc","content":"<p>反射常用于各种框架中如:spring中的bean就是利用反射实现以及反编译中。<br>java.lang.Class是反射的源头。<br>创建一个类，通过编译（java.exe)，生成对应的.class文件，之后使用java.exe加载（JVM类加载器）此.class文件，此.calss文件加载到内存后，就是一个运行时类，存在缓冲区。这个运行类本身就是一个Class实例，一个运行时类只加载一次。有了Class实例后，我们才可以进行如下操作：<br>1、创建对应的运行时类的对象；<br>2、获取对象运行时类的完整结构（属性、方法、构造器、内部类、父类、所在包、异常、注解…)<br>3、调用对应运行时类的指定结构（属性、方法、构造器）<br>4、反射的应用：动态代理</p>\n<h3 id=\"Java获取Class对象的四种方式\"><a href=\"#Java获取Class对象的四种方式\" class=\"headerlink\" title=\"Java获取Class对象的四种方式\"></a>Java获取Class对象的四种方式</h3><p>1、若已知具体的类，则首选通过类的class属性获取，该方法最为安全可靠，程序性能最高。<br>demo：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect;</div><div class=\"line\"><span class=\"keyword\">import</span> example.Person;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">ReflectionTest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span>  <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> Exception  </span>&#123;\t</div><div class=\"line\">\t\tClass clazz = Person.class; </div><div class=\"line\">\t\t<span class=\"comment\">//1.创建clazz对应的运行时类Person类的对象</span></div><div class=\"line\">\t\tPerson p = (Person) clazz.newInstance();   </div><div class=\"line\">\t\t<span class=\"comment\">//2.通过反射调用运行时类的指定属性</span></div><div class=\"line\">\t\tField f1 = clazz.getField(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">        f1.set(p, <span class=\"string\">\"xianbo\"</span>);</div><div class=\"line\">        <span class=\"comment\">//3.通过反射调用运行时类的指定方法</span></div><div class=\"line\">       <span class=\"comment\">// p.say();</span></div><div class=\"line\">        Method m1 = clazz.getMethod(<span class=\"string\">\"say\"</span>);</div><div class=\"line\">        m1.invoke(p);</div><div class=\"line\">\t   &#125;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> String name = <span class=\"string\">\"tom\"</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"调用了Person()构造方法\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"my name is \"</span> + name);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<blockquote>\n<p>调用了Person()构造方法<br>my name is xianbo</p>\n</blockquote>\n<p>2、通过运行时类的对象获取<br>demo:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect;</div><div class=\"line\"><span class=\"keyword\">import</span> example.Person;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">ReflectionTest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span>  <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> Exception   </span>&#123;\t</div><div class=\"line\">\t\tPerson p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">\t\tClass clazz = p.getClass();</div><div class=\"line\">\t\tSystem.out.println(clazz.getName());</div><div class=\"line\">\t   &#125;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>调用了Person()构造方法<br>example.Person</p>\n</blockquote>\n<p>3、已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出ClassNotFoundException异常。（反射的动态性）<br>demo<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect;</div><div class=\"line\"><span class=\"keyword\">import</span> example.Person;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">ReflectionTest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span>  <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;\t</div><div class=\"line\">\t\tString classname = <span class=\"string\">\"example.Person\"</span>;</div><div class=\"line\">\t\tClass clazz = Class.forName(classname);</div><div class=\"line\">\t\tSystem.out.println(clazz.getName());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>example.Person</p>\n</blockquote>\n<p>4、通过类的加载器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect;</div><div class=\"line\"><span class=\"keyword\">import</span> example.Person;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">ReflectionTest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span>  <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> ClassNotFoundException  </span>&#123;\t</div><div class=\"line\">\t\tReflectionTest re = <span class=\"keyword\">new</span> ReflectionTest();</div><div class=\"line\">\t\tre.test();</div><div class=\"line\">\t   &#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</div><div class=\"line\">    String classname = <span class=\"string\">\"example.Person\"</span>;</div><div class=\"line\">\tClassLoader classLoader = <span class=\"keyword\">this</span>.getClass().getClassLoader(); </div><div class=\"line\">\t<span class=\"comment\">//Cannot use this in a static context</span></div><div class=\"line\">\tClass clazz = classLoader.loadClass(classname);</div><div class=\"line\">\tSystem.out.println(clazz.getName());</div><div class=\"line\"> \t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>example.Person</p>\n</blockquote>\n<h3 id=\"创建运行时类的对象\"><a href=\"#创建运行时类的对象\" class=\"headerlink\" title=\"创建运行时类的对象\"></a>创建运行时类的对象</h3><p>在得到Class运行时类后，我们就可以通过newInstance()方法创建运行时类所对应的对象<br>domo<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> example.Person;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestConstructor</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tString className = <span class=\"string\">\"example.Person\"</span>;</div><div class=\"line\">\t\tClass clazz = Class.forName(className);</div><div class=\"line\">\t\t<span class=\"comment\">//创建运行时类的对象</span></div><div class=\"line\">\t\tObject obj = clazz.newInstance();</div><div class=\"line\">\t\tPerson p = (Person)obj;</div><div class=\"line\">\t\tSystem.out.println(p);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>调用了Person()构造方法<br>example.Person@4d871a69</p>\n</blockquote>\n<p>这里调用newInstance()实际上就是调用了运行时类的空参构造器，所以要想创建对象成功要满足两点：<br>1、对应的类要有空参的构造器；(没有空参的构造器也能通过其他的方法得到对象）<br>2、构造器的权限修饰符权限要足够。</p>\n<h3 id=\"获取类的属性和方法\"><a href=\"#获取类的属性和方法\" class=\"headerlink\" title=\"获取类的属性和方法\"></a>获取类的属性和方法</h3><p>在得到类后，可以通过getField（）方法获取public的属性，还可以通过getDecllareFields()方法获取该类的所有属性。<br>demo<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tClass clazz = Person.class;</div><div class=\"line\">\t\tField[] fields = clazz.getDeclaredFields();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(Field f : fields) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//1.获取每个属性的权限修饰符</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> i = f.getModifiers();<span class=\"comment\">//在java源码中，修饰符是一个个static final的数字</span></div><div class=\"line\">\t\t\tString str1 = Modifier.toString(i);</div><div class=\"line\">\t\t\tSystem.out.print(i + <span class=\"string\">\" \"</span>  + str1 + <span class=\"string\">\" \"</span> );</div><div class=\"line\">\t\t\t<span class=\"comment\">//2.获取属性的类型</span></div><div class=\"line\">\t\t\tClass type = f.getType();</div><div class=\"line\">\t\t\tSystem.out.print(type + <span class=\"string\">\" \"</span> + type.getName() + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">//3.获取属性名</span></div><div class=\"line\">\t\t\tSystem.out.println(f.getName());</div><div class=\"line\">\t\t\tSystem.out.println();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    String name = <span class=\"string\">\"xianbo\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age = <span class=\"number\">20</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> height = <span class=\"number\">180</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"调用了Person()构造方法\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"my name is \"</span> + name);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<blockquote>\n<p>0  class java.lang.String java.lang.String name</p>\n<p>1 public int int age</p>\n<p>2 private float float height</p>\n</blockquote>\n","excerpt":"","more":"<p>反射常用于各种框架中如:spring中的bean就是利用反射实现以及反编译中。<br>java.lang.Class是反射的源头。<br>创建一个类，通过编译（java.exe)，生成对应的.class文件，之后使用java.exe加载（JVM类加载器）此.class文件，此.calss文件加载到内存后，就是一个运行时类，存在缓冲区。这个运行类本身就是一个Class实例，一个运行时类只加载一次。有了Class实例后，我们才可以进行如下操作：<br>1、创建对应的运行时类的对象；<br>2、获取对象运行时类的完整结构（属性、方法、构造器、内部类、父类、所在包、异常、注解…)<br>3、调用对应运行时类的指定结构（属性、方法、构造器）<br>4、反射的应用：动态代理</p>\n<h3 id=\"Java获取Class对象的四种方式\"><a href=\"#Java获取Class对象的四种方式\" class=\"headerlink\" title=\"Java获取Class对象的四种方式\"></a>Java获取Class对象的四种方式</h3><p>1、若已知具体的类，则首选通过类的class属性获取，该方法最为安全可靠，程序性能最高。<br>demo：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect;</div><div class=\"line\"><span class=\"keyword\">import</span> example.Person;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">ReflectionTest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span>  <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> Exception  </span>&#123;\t</div><div class=\"line\">\t\tClass clazz = Person.class; </div><div class=\"line\">\t\t<span class=\"comment\">//1.创建clazz对应的运行时类Person类的对象</span></div><div class=\"line\">\t\tPerson p = (Person) clazz.newInstance();   </div><div class=\"line\">\t\t<span class=\"comment\">//2.通过反射调用运行时类的指定属性</span></div><div class=\"line\">\t\tField f1 = clazz.getField(<span class=\"string\">\"name\"</span>);</div><div class=\"line\">        f1.set(p, <span class=\"string\">\"xianbo\"</span>);</div><div class=\"line\">        <span class=\"comment\">//3.通过反射调用运行时类的指定方法</span></div><div class=\"line\">       <span class=\"comment\">// p.say();</span></div><div class=\"line\">        Method m1 = clazz.getMethod(<span class=\"string\">\"say\"</span>);</div><div class=\"line\">        m1.invoke(p);</div><div class=\"line\">\t   &#125;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> String name = <span class=\"string\">\"tom\"</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"调用了Person()构造方法\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"my name is \"</span> + name);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<blockquote>\n<p>调用了Person()构造方法<br>my name is xianbo</p>\n</blockquote>\n<p>2、通过运行时类的对象获取<br>demo:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect;</div><div class=\"line\"><span class=\"keyword\">import</span> example.Person;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">ReflectionTest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span>  <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> Exception   </span>&#123;\t</div><div class=\"line\">\t\tPerson p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">\t\tClass clazz = p.getClass();</div><div class=\"line\">\t\tSystem.out.println(clazz.getName());</div><div class=\"line\">\t   &#125;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>调用了Person()构造方法<br>example.Person</p>\n</blockquote>\n<p>3、已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出ClassNotFoundException异常。（反射的动态性）<br>demo<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect;</div><div class=\"line\"><span class=\"keyword\">import</span> example.Person;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">ReflectionTest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span>  <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;\t</div><div class=\"line\">\t\tString classname = <span class=\"string\">\"example.Person\"</span>;</div><div class=\"line\">\t\tClass clazz = Class.forName(classname);</div><div class=\"line\">\t\tSystem.out.println(clazz.getName());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>example.Person</p>\n</blockquote>\n<p>4、通过类的加载器<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect;</div><div class=\"line\"><span class=\"keyword\">import</span> example.Person;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">ReflectionTest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span>  <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> ClassNotFoundException  </span>&#123;\t</div><div class=\"line\">\t\tReflectionTest re = <span class=\"keyword\">new</span> ReflectionTest();</div><div class=\"line\">\t\tre.test();</div><div class=\"line\">\t   &#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</div><div class=\"line\">    String classname = <span class=\"string\">\"example.Person\"</span>;</div><div class=\"line\">\tClassLoader classLoader = <span class=\"keyword\">this</span>.getClass().getClassLoader(); </div><div class=\"line\">\t<span class=\"comment\">//Cannot use this in a static context</span></div><div class=\"line\">\tClass clazz = classLoader.loadClass(classname);</div><div class=\"line\">\tSystem.out.println(clazz.getName());</div><div class=\"line\"> \t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>example.Person</p>\n</blockquote>\n<h3 id=\"创建运行时类的对象\"><a href=\"#创建运行时类的对象\" class=\"headerlink\" title=\"创建运行时类的对象\"></a>创建运行时类的对象</h3><p>在得到Class运行时类后，我们就可以通过newInstance()方法创建运行时类所对应的对象<br>domo<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> example.Person;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestConstructor</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tString className = <span class=\"string\">\"example.Person\"</span>;</div><div class=\"line\">\t\tClass clazz = Class.forName(className);</div><div class=\"line\">\t\t<span class=\"comment\">//创建运行时类的对象</span></div><div class=\"line\">\t\tObject obj = clazz.newInstance();</div><div class=\"line\">\t\tPerson p = (Person)obj;</div><div class=\"line\">\t\tSystem.out.println(p);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>调用了Person()构造方法<br>example.Person@4d871a69</p>\n</blockquote>\n<p>这里调用newInstance()实际上就是调用了运行时类的空参构造器，所以要想创建对象成功要满足两点：<br>1、对应的类要有空参的构造器；(没有空参的构造器也能通过其他的方法得到对象）<br>2、构造器的权限修饰符权限要足够。</p>\n<h3 id=\"获取类的属性和方法\"><a href=\"#获取类的属性和方法\" class=\"headerlink\" title=\"获取类的属性和方法\"></a>获取类的属性和方法</h3><p>在得到类后，可以通过getField（）方法获取public的属性，还可以通过getDecllareFields()方法获取该类的所有属性。<br>demo<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tClass clazz = Person.class;</div><div class=\"line\">\t\tField[] fields = clazz.getDeclaredFields();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(Field f : fields) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//1.获取每个属性的权限修饰符</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> i = f.getModifiers();<span class=\"comment\">//在java源码中，修饰符是一个个static final的数字</span></div><div class=\"line\">\t\t\tString str1 = Modifier.toString(i);</div><div class=\"line\">\t\t\tSystem.out.print(i + <span class=\"string\">\" \"</span>  + str1 + <span class=\"string\">\" \"</span> );</div><div class=\"line\">\t\t\t<span class=\"comment\">//2.获取属性的类型</span></div><div class=\"line\">\t\t\tClass type = f.getType();</div><div class=\"line\">\t\t\tSystem.out.print(type + <span class=\"string\">\" \"</span> + type.getName() + <span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">//3.获取属性名</span></div><div class=\"line\">\t\t\tSystem.out.println(f.getName());</div><div class=\"line\">\t\t\tSystem.out.println();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    String name = <span class=\"string\">\"xianbo\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age = <span class=\"number\">20</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> height = <span class=\"number\">180</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"调用了Person()构造方法\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"my name is \"</span> + name);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<blockquote>\n<p>0  class java.lang.String java.lang.String name</p>\n<p>1 public int int age</p>\n<p>2 private float float height</p>\n</blockquote>\n"},{"title":"Android6.0 Telephone 源码分析（一）","date":"2016-07-22T15:32:04.000Z","_content":"### DialtactsActivity\n1、点击telephone APP ，通过抓log可以清楚的看到程序入口是DialtactsActivity.onClick()方法:\n![2](https://raw.githubusercontent.com/XianboChen/MyBlog/master/picture/2.png)\n``` java\npublic void onClick(View view) {\n\n        switch (view.getId()) {//对触发的buttonID进行判断\n            case R.id.floating_action_button://点击的是“拨号”按钮\n                 if(mListsFragment.getCurrentTabIndex()==ListsFragment.TAB_INDEX_ALL_CONTACTS&&!mInRegularSearch) {       //通过电话簿拨号\n                  DialerUtils.startActivityWithErrorToast(this,IntentUtil.getNewContactIntent(), R.string.add_contact_not_available);\n                }else if (!mIsDialpadShown) {//拨号界面未显示，显示拨号界面\n                    mInCallDialpadUp = false;\n                    showDialpadFragment(true);//在该方法中newl了DialpadFragment，实际上也就是交给了DialPadFragment去处理\n                }\n        break;\n\n            case R.id.voice_search_button://点击的是“声控搜索”按钮\n\n                try {\n\n                    ...  //略\n                }\n\n                break;\n\n            case R.id.dialtacts_options_menu_button://设置按钮\n\n              ....//略\n\n                break;\n\n            default: {\n\n              ....//略\n\n                break;\n            }\n       }\n    }\n\n```\n### DialPadFragment\n2、调用showDialpadFragment()方法，在该方法中new出了DialPadFragment,此时进入类DialPadFragment中的onClick()方法（这里有两个DialPadFragment.java文件，一个在./dialpad文件夹中，还有一个在./incall文件夹中，这是在来电时调用的。\n```   java\n @Override\n\n    public boolean onKey(View view, int keyCode, KeyEvent event) {\n        switch (view.getId()) {\n           case R.id.digits:\n                if (keyCode == KeyEvent.KEYCODE_ENTER) {//如果是KEYCODE_ENTER，开始拨打\n                    handleDialButtonPressed();\n                    return true;//自己处理了\n                }\n            break;\n        }\n        return false;//返回false由系统进行处理\n    }\n\n```\n\n\n如果点击的是enter建，将会用handleDialButtonPressed()方法:\n>  /*\n>In most cases, when the dial button is pressed, there is a\n>number in digits area. Pack it in the intent, start the\n>outgoing call broadcast as a separate task and finish this activity.\n>  When there is no digit and the phone is CDMA and off hook,\n > resending a blank flash for CDMA. CDMA networks use Flash\n   > messages when special processing needs to be done, mainly for\n  >  3-way or call waiting scenarios. Presumably, here we&#39;re in a\n> special 3-way scenario where the network needs a blank flash\n > before being able to add the new participant.  (This is not the\n> case with all 3-way calls, just certain CDMA infrastructures.)\n>\n> Otherwise, there is no digit, display the last dialed number. Don&#39;t finish since the user may want to edit it. The\n>user needs to press the dial button again, to dial it (general\n>  case described above).\n\n> */\n\n\n\n\n\n\n\n*在大多数情况下，当拨号按钮被按下时都会有一串数字存在。从它的intent对象中得到它，开始\n\n*呼叫广播作为一个单独的任务，并结束这个任务活动。\n\n*如果没有数字并且CDMA网络处于占线状态时，\n\n*我们发送一个空白的Flash CDMA。CDMA网络使用Flash\n\n*来处理特殊处理的消息时，这里主要有三种方式\n\n*以及呼叫等待的情景。这里我们应该属于\n\n*前者，在能够添加新参与者之前,网络需要一个空白的Flash。\n\n*若不是上面的情景，也不要结束这个Activity，应该显示上一次的电话号码\n\n*并等待用户可能要编辑它。\n\n*用户需要再次按拨号键，重新拨通（重复上面描述的案例）。\n\n */\n\n\n-----------  部分翻译可能不够准确  ------------\n\n``` java\n\nprivate void handleDialButtonPressed() {\n\n        if (isDigitsEmpty()) { //如果没有数字输入\n\n            handleDialButtonClickWithEmptyDigits();\n\n        } else {\n\n           final String number = mDigits.getText().toString();                        //获取输入的电话号码\n\n            if (number != null\n                    && !TextUtils.isEmpty(mProhibitedPhoneNumberRegexp)\n                    && number.matches(mProhibitedPhoneNumberRegexp)) {                         //对number过滤\n                Log.i(TAG, \"The phone number is prohibited explicitly by a rule.\");\n               if (getActivity() != null) {\n                    DialogFragment dialogFragment = ErrorDialogFragment.newInstance(\n                            R.string.dialog_phone_call_prohibited_message);\n                    dialogFragment.show(getFragmentManager(), \"phone_prohibited_dialog\");\n\n                }\n\n                clearDialpad();                                            //清除数字\n\n            } else {                                              //如果number通过了检查\n\n                final Intent intent = CallUtil.getCallIntent(number,                  //取得一个Callintent\n\n\n                        (getActivity() instanceof DialtactsActivity ?\n                               ((DialtactsActivity) getActivity()).getCallOrigin() : null));\n\n                              DialerUtils.startActivityWithErrorToast(getActivity(), intent);   //交给DialerUtils去处理\n                hideAndClearDialpad(false)\n            }\n        }\n    }\n\n```\n\n* ~~如果用户点击的不是enter键，onKey方法将会返回false,交给onPressed处理~~（*这里暂存疑 *）。\n\n```  java\n\npublic void onPressed(View view, boolean pressed) {\n\n        if (DEBUG) Log.d(TAG, \"onPressed(). view: \" + view + \", pressed: \" + pressed);\n\n        if (pressed) {                        //这里继续对各个按键判断\n            switch (view.getId()) {\n                case R.id.one: {\n                    keyPressed(KeyEvent.KEYCODE_1);  //在keyPressed()方法中调用playTone（）方法，从而产生不同的按键声音效果\n                    break;\n                }\n\n               ... 略\n\n                case R.id.zero: {\n                    keyPressed(KeyEvent.KEYCODE_0);\n                    break;\n                }\n\n                case R.id.pound: {\n                    keyPressed(KeyEvent.KEYCODE_POUND);\n                    break;\n                }\n\n                case R.id.star: {\n                    keyPressed(KeyEvent.KEYCODE_STAR);\n                    break;\n                }\n\n                default: {\n                    Log.wtf(TAG, \"Unexpected onTouch(ACTION_DOWN) event from: \" + view);\n                    break;\n                }\n            }\n            mPressedDialpadKeys.add(view);\n        } else {\n            mPressedDialpadKeys.remove(view);\n           if (mPressedDialpadKeys.isEmpty()) {\n                stopTone();\n            }\n        }\n    }\n\n```\n\n随后继续触发onClick方法：\n\n``` java\n\n    public void onClick(View view) {\n        switch (view.getId()) {\n            case R.id.dialpad_floating_action_button:                                  //拨打按钮\n                mHaptic.vibrate();\n              handleDialButtonPressed();                                    //再次交给了handleDialButton()方法\n                break;\n\n            case R.id.deleteButton: {                                                  //del按钮\n                keyPressed(KeyEvent.KEYCODE_DEL);\n                break;\n            }\n\n           case R.id.digits: {                                             //数字显示框，聚焦\n\n                if (!isDigitsEmpty()) {\n                   mDigits.setCursorVisible(true);\n                }\n                break;\n\n            }\n\n            case R.id.dialpad_overflow: {\n                mOverflowPopupMenu.show();\n                break;\n            }\n\n            default: {\n               Log.wtf(TAG, \"Unexpected onClick() event from: \" + view);\n               return;\n            }\n        }\n    }\n\n```\n**总之，在类DialPadFragment中完成了拨号，并将带着拨号数字的intent交给了类DialerUtils。 **\n> DialerUtils.startActivityWithErrorToast(getActivity(), intent);\n\n\n### DialerUtils\n3、进入类DialerUtils.startActivityWithErrorToast()方法，这里有多个重载：\n\n```  java\n\npublic static void startActivityWithErrorToast(Context context, Intent intent, int msgId) {\n        try {                                         //判断Intent是否是ACTION_CALL\n            if (Intent.ACTION_CALL.equals(intent.getAction())) {\n                // All dialer-initiated calls should pass the touch point to the InCallUI\n                Point touchPoint = TouchPointManager.getInstance().getPoint();\n               if (touchPoint.x != 0 || touchPoint.y != 0) {\n                    Bundle extras = new Bundle();\n                    extras.putParcelable(TouchPointManager.TOUCH_POINT, touchPoint);\n                    intent.putExtra(TelecomManager.EXTRA_OUTGOING_CALL_EXTRAS, extras);\n               }\n\n                  final TelecomManager tm = (TelecomManager)            //获取TelecomManager服务\n                   context.getSystemService(Context.TELECOM_SERVICE);\n                  tm.placeCall(intent.getData(), intent.getExtras());\n            } else {\n                context.startActivity(intent);\n            }\n        } catch (ActivityNotFoundException e) {\n            Toast.makeText(context, msgId, Toast.LENGTH_SHORT).show();\n        }\n    }\n```\n### TelecomManager\n4、进入类TelecomManager.placeCall()方法,此时已经在framework包下，进入了framework层：\n``` java\npublic void placeCall(Uri address, Bundle extras) {\n        ITelecomService service = getTelecomService();//获取TelecomService服务\n        if (service != null) {\n            if (address == null) {\n                Log.w(TAG, \"Cannot place call to empty address.\");\n            }\n            try {\n                service.placeCall(address, extras == null ? new Bundle() : extras,\n                        mContext.getOpPackageName());//交给Service去处理，进入Server端\n            } catch (RemoteException e) {\n                Log.e(TAG, \"Error calling ITelecomService#placeCall\", e);\n            }\n        }\n    }\n```\n----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Android6-0-source-code-first-anlysis.md","raw":"title: Android6.0 Telephone 源码分析（一）\ndate: 2016-07-22 23:32:04\ntags:\n  - Android\n---\n### DialtactsActivity\n1、点击telephone APP ，通过抓log可以清楚的看到程序入口是DialtactsActivity.onClick()方法:\n![2](https://raw.githubusercontent.com/XianboChen/MyBlog/master/picture/2.png)\n``` java\npublic void onClick(View view) {\n\n        switch (view.getId()) {//对触发的buttonID进行判断\n            case R.id.floating_action_button://点击的是“拨号”按钮\n                 if(mListsFragment.getCurrentTabIndex()==ListsFragment.TAB_INDEX_ALL_CONTACTS&&!mInRegularSearch) {       //通过电话簿拨号\n                  DialerUtils.startActivityWithErrorToast(this,IntentUtil.getNewContactIntent(), R.string.add_contact_not_available);\n                }else if (!mIsDialpadShown) {//拨号界面未显示，显示拨号界面\n                    mInCallDialpadUp = false;\n                    showDialpadFragment(true);//在该方法中newl了DialpadFragment，实际上也就是交给了DialPadFragment去处理\n                }\n        break;\n\n            case R.id.voice_search_button://点击的是“声控搜索”按钮\n\n                try {\n\n                    ...  //略\n                }\n\n                break;\n\n            case R.id.dialtacts_options_menu_button://设置按钮\n\n              ....//略\n\n                break;\n\n            default: {\n\n              ....//略\n\n                break;\n            }\n       }\n    }\n\n```\n### DialPadFragment\n2、调用showDialpadFragment()方法，在该方法中new出了DialPadFragment,此时进入类DialPadFragment中的onClick()方法（这里有两个DialPadFragment.java文件，一个在./dialpad文件夹中，还有一个在./incall文件夹中，这是在来电时调用的。\n```   java\n @Override\n\n    public boolean onKey(View view, int keyCode, KeyEvent event) {\n        switch (view.getId()) {\n           case R.id.digits:\n                if (keyCode == KeyEvent.KEYCODE_ENTER) {//如果是KEYCODE_ENTER，开始拨打\n                    handleDialButtonPressed();\n                    return true;//自己处理了\n                }\n            break;\n        }\n        return false;//返回false由系统进行处理\n    }\n\n```\n\n\n如果点击的是enter建，将会用handleDialButtonPressed()方法:\n>  /*\n>In most cases, when the dial button is pressed, there is a\n>number in digits area. Pack it in the intent, start the\n>outgoing call broadcast as a separate task and finish this activity.\n>  When there is no digit and the phone is CDMA and off hook,\n > resending a blank flash for CDMA. CDMA networks use Flash\n   > messages when special processing needs to be done, mainly for\n  >  3-way or call waiting scenarios. Presumably, here we&#39;re in a\n> special 3-way scenario where the network needs a blank flash\n > before being able to add the new participant.  (This is not the\n> case with all 3-way calls, just certain CDMA infrastructures.)\n>\n> Otherwise, there is no digit, display the last dialed number. Don&#39;t finish since the user may want to edit it. The\n>user needs to press the dial button again, to dial it (general\n>  case described above).\n\n> */\n\n\n\n\n\n\n\n*在大多数情况下，当拨号按钮被按下时都会有一串数字存在。从它的intent对象中得到它，开始\n\n*呼叫广播作为一个单独的任务，并结束这个任务活动。\n\n*如果没有数字并且CDMA网络处于占线状态时，\n\n*我们发送一个空白的Flash CDMA。CDMA网络使用Flash\n\n*来处理特殊处理的消息时，这里主要有三种方式\n\n*以及呼叫等待的情景。这里我们应该属于\n\n*前者，在能够添加新参与者之前,网络需要一个空白的Flash。\n\n*若不是上面的情景，也不要结束这个Activity，应该显示上一次的电话号码\n\n*并等待用户可能要编辑它。\n\n*用户需要再次按拨号键，重新拨通（重复上面描述的案例）。\n\n */\n\n\n-----------  部分翻译可能不够准确  ------------\n\n``` java\n\nprivate void handleDialButtonPressed() {\n\n        if (isDigitsEmpty()) { //如果没有数字输入\n\n            handleDialButtonClickWithEmptyDigits();\n\n        } else {\n\n           final String number = mDigits.getText().toString();                        //获取输入的电话号码\n\n            if (number != null\n                    && !TextUtils.isEmpty(mProhibitedPhoneNumberRegexp)\n                    && number.matches(mProhibitedPhoneNumberRegexp)) {                         //对number过滤\n                Log.i(TAG, \"The phone number is prohibited explicitly by a rule.\");\n               if (getActivity() != null) {\n                    DialogFragment dialogFragment = ErrorDialogFragment.newInstance(\n                            R.string.dialog_phone_call_prohibited_message);\n                    dialogFragment.show(getFragmentManager(), \"phone_prohibited_dialog\");\n\n                }\n\n                clearDialpad();                                            //清除数字\n\n            } else {                                              //如果number通过了检查\n\n                final Intent intent = CallUtil.getCallIntent(number,                  //取得一个Callintent\n\n\n                        (getActivity() instanceof DialtactsActivity ?\n                               ((DialtactsActivity) getActivity()).getCallOrigin() : null));\n\n                              DialerUtils.startActivityWithErrorToast(getActivity(), intent);   //交给DialerUtils去处理\n                hideAndClearDialpad(false)\n            }\n        }\n    }\n\n```\n\n* ~~如果用户点击的不是enter键，onKey方法将会返回false,交给onPressed处理~~（*这里暂存疑 *）。\n\n```  java\n\npublic void onPressed(View view, boolean pressed) {\n\n        if (DEBUG) Log.d(TAG, \"onPressed(). view: \" + view + \", pressed: \" + pressed);\n\n        if (pressed) {                        //这里继续对各个按键判断\n            switch (view.getId()) {\n                case R.id.one: {\n                    keyPressed(KeyEvent.KEYCODE_1);  //在keyPressed()方法中调用playTone（）方法，从而产生不同的按键声音效果\n                    break;\n                }\n\n               ... 略\n\n                case R.id.zero: {\n                    keyPressed(KeyEvent.KEYCODE_0);\n                    break;\n                }\n\n                case R.id.pound: {\n                    keyPressed(KeyEvent.KEYCODE_POUND);\n                    break;\n                }\n\n                case R.id.star: {\n                    keyPressed(KeyEvent.KEYCODE_STAR);\n                    break;\n                }\n\n                default: {\n                    Log.wtf(TAG, \"Unexpected onTouch(ACTION_DOWN) event from: \" + view);\n                    break;\n                }\n            }\n            mPressedDialpadKeys.add(view);\n        } else {\n            mPressedDialpadKeys.remove(view);\n           if (mPressedDialpadKeys.isEmpty()) {\n                stopTone();\n            }\n        }\n    }\n\n```\n\n随后继续触发onClick方法：\n\n``` java\n\n    public void onClick(View view) {\n        switch (view.getId()) {\n            case R.id.dialpad_floating_action_button:                                  //拨打按钮\n                mHaptic.vibrate();\n              handleDialButtonPressed();                                    //再次交给了handleDialButton()方法\n                break;\n\n            case R.id.deleteButton: {                                                  //del按钮\n                keyPressed(KeyEvent.KEYCODE_DEL);\n                break;\n            }\n\n           case R.id.digits: {                                             //数字显示框，聚焦\n\n                if (!isDigitsEmpty()) {\n                   mDigits.setCursorVisible(true);\n                }\n                break;\n\n            }\n\n            case R.id.dialpad_overflow: {\n                mOverflowPopupMenu.show();\n                break;\n            }\n\n            default: {\n               Log.wtf(TAG, \"Unexpected onClick() event from: \" + view);\n               return;\n            }\n        }\n    }\n\n```\n**总之，在类DialPadFragment中完成了拨号，并将带着拨号数字的intent交给了类DialerUtils。 **\n> DialerUtils.startActivityWithErrorToast(getActivity(), intent);\n\n\n### DialerUtils\n3、进入类DialerUtils.startActivityWithErrorToast()方法，这里有多个重载：\n\n```  java\n\npublic static void startActivityWithErrorToast(Context context, Intent intent, int msgId) {\n        try {                                         //判断Intent是否是ACTION_CALL\n            if (Intent.ACTION_CALL.equals(intent.getAction())) {\n                // All dialer-initiated calls should pass the touch point to the InCallUI\n                Point touchPoint = TouchPointManager.getInstance().getPoint();\n               if (touchPoint.x != 0 || touchPoint.y != 0) {\n                    Bundle extras = new Bundle();\n                    extras.putParcelable(TouchPointManager.TOUCH_POINT, touchPoint);\n                    intent.putExtra(TelecomManager.EXTRA_OUTGOING_CALL_EXTRAS, extras);\n               }\n\n                  final TelecomManager tm = (TelecomManager)            //获取TelecomManager服务\n                   context.getSystemService(Context.TELECOM_SERVICE);\n                  tm.placeCall(intent.getData(), intent.getExtras());\n            } else {\n                context.startActivity(intent);\n            }\n        } catch (ActivityNotFoundException e) {\n            Toast.makeText(context, msgId, Toast.LENGTH_SHORT).show();\n        }\n    }\n```\n### TelecomManager\n4、进入类TelecomManager.placeCall()方法,此时已经在framework包下，进入了framework层：\n``` java\npublic void placeCall(Uri address, Bundle extras) {\n        ITelecomService service = getTelecomService();//获取TelecomService服务\n        if (service != null) {\n            if (address == null) {\n                Log.w(TAG, \"Cannot place call to empty address.\");\n            }\n            try {\n                service.placeCall(address, extras == null ? new Bundle() : extras,\n                        mContext.getOpPackageName());//交给Service去处理，进入Server端\n            } catch (RemoteException e) {\n                Log.e(TAG, \"Error calling ITelecomService#placeCall\", e);\n            }\n        }\n    }\n```\n----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Android6-0-source-code-first-anlysis","published":1,"updated":"2016-08-31T07:05:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisimyty40003aojx9l8523rk","content":"<h3 id=\"DialtactsActivity\"><a href=\"#DialtactsActivity\" class=\"headerlink\" title=\"DialtactsActivity\"></a>DialtactsActivity</h3><p>1、点击telephone APP ，通过抓log可以清楚的看到程序入口是DialtactsActivity.onClick()方法:<br><img src=\"https://raw.githubusercontent.com/XianboChen/MyBlog/master/picture/2.png\" alt=\"2\"><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">switch</span> (view.getId()) &#123;<span class=\"comment\">//对触发的buttonID进行判断</span></div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.floating_action_button:<span class=\"comment\">//点击的是“拨号”按钮</span></div><div class=\"line\">                 <span class=\"keyword\">if</span>(mListsFragment.getCurrentTabIndex()==ListsFragment.TAB_INDEX_ALL_CONTACTS&amp;&amp;!mInRegularSearch) &#123;       <span class=\"comment\">//通过电话簿拨号</span></div><div class=\"line\">                  DialerUtils.startActivityWithErrorToast(<span class=\"keyword\">this</span>,IntentUtil.getNewContactIntent(), R.string.add_contact_not_available);</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!mIsDialpadShown) &#123;<span class=\"comment\">//拨号界面未显示，显示拨号界面</span></div><div class=\"line\">                    mInCallDialpadUp = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    showDialpadFragment(<span class=\"keyword\">true</span>);<span class=\"comment\">//在该方法中newl了DialpadFragment，实际上也就是交给了DialPadFragment去处理</span></div><div class=\"line\">                &#125;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.voice_search_button:<span class=\"comment\">//点击的是“声控搜索”按钮</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\"></div><div class=\"line\">                    ...  <span class=\"comment\">//略</span></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.dialtacts_options_menu_button:<span class=\"comment\">//设置按钮</span></div><div class=\"line\"></div><div class=\"line\">              ....<span class=\"comment\">//略</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">default</span>: &#123;</div><div class=\"line\"></div><div class=\"line\">              ....<span class=\"comment\">//略</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"DialPadFragment\"><a href=\"#DialPadFragment\" class=\"headerlink\" title=\"DialPadFragment\"></a>DialPadFragment</h3><p>2、调用showDialpadFragment()方法，在该方法中new出了DialPadFragment,此时进入类DialPadFragment中的onClick()方法（这里有两个DialPadFragment.java文件，一个在./dialpad文件夹中，还有一个在./incall文件夹中，这是在来电时调用的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKey</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">switch</span> (view.getId()) &#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> R.id.digits:</div><div class=\"line\">               <span class=\"keyword\">if</span> (keyCode == KeyEvent.KEYCODE_ENTER) &#123;<span class=\"comment\">//如果是KEYCODE_ENTER，开始拨打</span></div><div class=\"line\">                   handleDialButtonPressed();</div><div class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;<span class=\"comment\">//自己处理了</span></div><div class=\"line\">               &#125;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;<span class=\"comment\">//返回false由系统进行处理</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>如果点击的是enter建，将会用handleDialButtonPressed()方法:</p>\n<blockquote>\n<p> /*<br>In most cases, when the dial button is pressed, there is a<br>number in digits area. Pack it in the intent, start the<br>outgoing call broadcast as a separate task and finish this activity.<br> When there is no digit and the phone is CDMA and off hook,<br>resending a blank flash for CDMA. CDMA networks use Flash<br>messages when special processing needs to be done, mainly for<br> 3-way or call waiting scenarios. Presumably, here we&#39;re in a<br>special 3-way scenario where the network needs a blank flash<br>before being able to add the new participant.  (This is not the<br>case with all 3-way calls, just certain CDMA infrastructures.)</p>\n<p>Otherwise, there is no digit, display the last dialed number. Don&#39;t finish since the user may want to edit it. The<br>user needs to press the dial button again, to dial it (general<br> case described above).</p>\n<p>*/</p>\n</blockquote>\n<p>*在大多数情况下，当拨号按钮被按下时都会有一串数字存在。从它的intent对象中得到它，开始</p>\n<p>*呼叫广播作为一个单独的任务，并结束这个任务活动。</p>\n<p>*如果没有数字并且CDMA网络处于占线状态时，</p>\n<p>*我们发送一个空白的Flash CDMA。CDMA网络使用Flash</p>\n<p>*来处理特殊处理的消息时，这里主要有三种方式</p>\n<p>*以及呼叫等待的情景。这里我们应该属于</p>\n<p>*前者，在能够添加新参与者之前,网络需要一个空白的Flash。</p>\n<p>*若不是上面的情景，也不要结束这个Activity，应该显示上一次的电话号码</p>\n<p>*并等待用户可能要编辑它。</p>\n<p>*用户需要再次按拨号键，重新拨通（重复上面描述的案例）。</p>\n<p> */</p>\n<p>———–  部分翻译可能不够准确  ————</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleDialButtonPressed</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (isDigitsEmpty()) &#123; <span class=\"comment\">//如果没有数字输入</span></div><div class=\"line\"></div><div class=\"line\">            handleDialButtonClickWithEmptyDigits();</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">final</span> String number = mDigits.getText().toString();                        <span class=\"comment\">//获取输入的电话号码</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (number != <span class=\"keyword\">null</span></div><div class=\"line\">                    &amp;&amp; !TextUtils.isEmpty(mProhibitedPhoneNumberRegexp)</div><div class=\"line\">                    &amp;&amp; number.matches(mProhibitedPhoneNumberRegexp)) &#123;                         <span class=\"comment\">//对number过滤</span></div><div class=\"line\">                Log.i(TAG, <span class=\"string\">\"The phone number is prohibited explicitly by a rule.\"</span>);</div><div class=\"line\">               <span class=\"keyword\">if</span> (getActivity() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    DialogFragment dialogFragment = ErrorDialogFragment.newInstance(</div><div class=\"line\">                            R.string.dialog_phone_call_prohibited_message);</div><div class=\"line\">                    dialogFragment.show(getFragmentManager(), <span class=\"string\">\"phone_prohibited_dialog\"</span>);</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                clearDialpad();                                            <span class=\"comment\">//清除数字</span></div><div class=\"line\"></div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;                                              <span class=\"comment\">//如果number通过了检查</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">final</span> Intent intent = CallUtil.getCallIntent(number,                  <span class=\"comment\">//取得一个Callintent</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                        (getActivity() <span class=\"keyword\">instanceof</span> DialtactsActivity ?</div><div class=\"line\">                               ((DialtactsActivity) getActivity()).getCallOrigin() : <span class=\"keyword\">null</span>));</div><div class=\"line\"></div><div class=\"line\">                              DialerUtils.startActivityWithErrorToast(getActivity(), intent);   <span class=\"comment\">//交给DialerUtils去处理</span></div><div class=\"line\">                hideAndClearDialpad(<span class=\"keyword\">false</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><del>如果用户点击的不是enter键，onKey方法将会返回false,交给onPressed处理</del>（<em>这里暂存疑 </em>）。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPressed</span><span class=\"params\">(View view, <span class=\"keyword\">boolean</span> pressed)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (DEBUG) Log.d(TAG, <span class=\"string\">\"onPressed(). view: \"</span> + view + <span class=\"string\">\", pressed: \"</span> + pressed);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (pressed) &#123;                        <span class=\"comment\">//这里继续对各个按键判断</span></div><div class=\"line\">            <span class=\"keyword\">switch</span> (view.getId()) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> R.id.one: &#123;</div><div class=\"line\">                    keyPressed(KeyEvent.KEYCODE_1);  <span class=\"comment\">//在keyPressed()方法中调用playTone（）方法，从而产生不同的按键声音效果</span></div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">               ... 略</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">case</span> R.id.zero: &#123;</div><div class=\"line\">                    keyPressed(KeyEvent.KEYCODE_0);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">case</span> R.id.pound: &#123;</div><div class=\"line\">                    keyPressed(KeyEvent.KEYCODE_POUND);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">case</span> R.id.star: &#123;</div><div class=\"line\">                    keyPressed(KeyEvent.KEYCODE_STAR);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">default</span>: &#123;</div><div class=\"line\">                    Log.wtf(TAG, <span class=\"string\">\"Unexpected onTouch(ACTION_DOWN) event from: \"</span> + view);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            mPressedDialpadKeys.add(view);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mPressedDialpadKeys.remove(view);</div><div class=\"line\">           <span class=\"keyword\">if</span> (mPressedDialpadKeys.isEmpty()) &#123;</div><div class=\"line\">                stopTone();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>随后继续触发onClick方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (view.getId()) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> R.id.dialpad_floating_action_button:                                  <span class=\"comment\">//拨打按钮</span></div><div class=\"line\">            mHaptic.vibrate();</div><div class=\"line\">          handleDialButtonPressed();                                    <span class=\"comment\">//再次交给了handleDialButton()方法</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> R.id.deleteButton: &#123;                                                  <span class=\"comment\">//del按钮</span></div><div class=\"line\">            keyPressed(KeyEvent.KEYCODE_DEL);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">case</span> R.id.digits: &#123;                                             <span class=\"comment\">//数字显示框，聚焦</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (!isDigitsEmpty()) &#123;</div><div class=\"line\">               mDigits.setCursorVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> R.id.dialpad_overflow: &#123;</div><div class=\"line\">            mOverflowPopupMenu.show();</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">default</span>: &#123;</div><div class=\"line\">           Log.wtf(TAG, <span class=\"string\">\"Unexpected onClick() event from: \"</span> + view);</div><div class=\"line\">           <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>总之，在类DialPadFragment中完成了拨号，并将带着拨号数字的intent交给了类DialerUtils。 </strong></p>\n<blockquote>\n<p>DialerUtils.startActivityWithErrorToast(getActivity(), intent);</p>\n</blockquote>\n<h3 id=\"DialerUtils\"><a href=\"#DialerUtils\" class=\"headerlink\" title=\"DialerUtils\"></a>DialerUtils</h3><p>3、进入类DialerUtils.startActivityWithErrorToast()方法，这里有多个重载：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivityWithErrorToast</span><span class=\"params\">(Context context, Intent intent, <span class=\"keyword\">int</span> msgId)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;                                         <span class=\"comment\">//判断Intent是否是ACTION_CALL</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (Intent.ACTION_CALL.equals(intent.getAction())) &#123;</div><div class=\"line\">                <span class=\"comment\">// All dialer-initiated calls should pass the touch point to the InCallUI</span></div><div class=\"line\">                Point touchPoint = TouchPointManager.getInstance().getPoint();</div><div class=\"line\">               <span class=\"keyword\">if</span> (touchPoint.x != <span class=\"number\">0</span> || touchPoint.y != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    Bundle extras = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">                    extras.putParcelable(TouchPointManager.TOUCH_POINT, touchPoint);</div><div class=\"line\">                    intent.putExtra(TelecomManager.EXTRA_OUTGOING_CALL_EXTRAS, extras);</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"keyword\">final</span> TelecomManager tm = (TelecomManager)            <span class=\"comment\">//获取TelecomManager服务</span></div><div class=\"line\">                   context.getSystemService(Context.TELECOM_SERVICE);</div><div class=\"line\">                  tm.placeCall(intent.getData(), intent.getExtras());</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                context.startActivity(intent);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ActivityNotFoundException e) &#123;</div><div class=\"line\">            Toast.makeText(context, msgId, Toast.LENGTH_SHORT).show();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"TelecomManager\"><a href=\"#TelecomManager\" class=\"headerlink\" title=\"TelecomManager\"></a>TelecomManager</h3><p>4、进入类TelecomManager.placeCall()方法,此时已经在framework包下，进入了framework层：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">placeCall</span><span class=\"params\">(Uri address, Bundle extras)</span> </span>&#123;</div><div class=\"line\">        ITelecomService service = getTelecomService();<span class=\"comment\">//获取TelecomService服务</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (service != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (address == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                Log.w(TAG, <span class=\"string\">\"Cannot place call to empty address.\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                service.placeCall(address, extras == <span class=\"keyword\">null</span> ? <span class=\"keyword\">new</span> Bundle() : extras,</div><div class=\"line\">                        mContext.getOpPackageName());<span class=\"comment\">//交给Service去处理，进入Server端</span></div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                Log.e(TAG, <span class=\"string\">\"Error calling ITelecomService#placeCall\"</span>, e);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<hr>\n","excerpt":"","more":"<h3 id=\"DialtactsActivity\"><a href=\"#DialtactsActivity\" class=\"headerlink\" title=\"DialtactsActivity\"></a>DialtactsActivity</h3><p>1、点击telephone APP ，通过抓log可以清楚的看到程序入口是DialtactsActivity.onClick()方法:<br><img src=\"https://raw.githubusercontent.com/XianboChen/MyBlog/master/picture/2.png\" alt=\"2\"><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">switch</span> (view.getId()) &#123;<span class=\"comment\">//对触发的buttonID进行判断</span></div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.floating_action_button:<span class=\"comment\">//点击的是“拨号”按钮</span></div><div class=\"line\">                 <span class=\"keyword\">if</span>(mListsFragment.getCurrentTabIndex()==ListsFragment.TAB_INDEX_ALL_CONTACTS&amp;&amp;!mInRegularSearch) &#123;       <span class=\"comment\">//通过电话簿拨号</span></div><div class=\"line\">                  DialerUtils.startActivityWithErrorToast(<span class=\"keyword\">this</span>,IntentUtil.getNewContactIntent(), R.string.add_contact_not_available);</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!mIsDialpadShown) &#123;<span class=\"comment\">//拨号界面未显示，显示拨号界面</span></div><div class=\"line\">                    mInCallDialpadUp = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    showDialpadFragment(<span class=\"keyword\">true</span>);<span class=\"comment\">//在该方法中newl了DialpadFragment，实际上也就是交给了DialPadFragment去处理</span></div><div class=\"line\">                &#125;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.voice_search_button:<span class=\"comment\">//点击的是“声控搜索”按钮</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\"></div><div class=\"line\">                    ...  <span class=\"comment\">//略</span></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> R.id.dialtacts_options_menu_button:<span class=\"comment\">//设置按钮</span></div><div class=\"line\"></div><div class=\"line\">              ....<span class=\"comment\">//略</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">default</span>: &#123;</div><div class=\"line\"></div><div class=\"line\">              ....<span class=\"comment\">//略</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"DialPadFragment\"><a href=\"#DialPadFragment\" class=\"headerlink\" title=\"DialPadFragment\"></a>DialPadFragment</h3><p>2、调用showDialpadFragment()方法，在该方法中new出了DialPadFragment,此时进入类DialPadFragment中的onClick()方法（这里有两个DialPadFragment.java文件，一个在./dialpad文件夹中，还有一个在./incall文件夹中，这是在来电时调用的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKey</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">switch</span> (view.getId()) &#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> R.id.digits:</div><div class=\"line\">               <span class=\"keyword\">if</span> (keyCode == KeyEvent.KEYCODE_ENTER) &#123;<span class=\"comment\">//如果是KEYCODE_ENTER，开始拨打</span></div><div class=\"line\">                   handleDialButtonPressed();</div><div class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;<span class=\"comment\">//自己处理了</span></div><div class=\"line\">               &#125;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;<span class=\"comment\">//返回false由系统进行处理</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>如果点击的是enter建，将会用handleDialButtonPressed()方法:</p>\n<blockquote>\n<p> /*<br>In most cases, when the dial button is pressed, there is a<br>number in digits area. Pack it in the intent, start the<br>outgoing call broadcast as a separate task and finish this activity.<br> When there is no digit and the phone is CDMA and off hook,<br>resending a blank flash for CDMA. CDMA networks use Flash<br>messages when special processing needs to be done, mainly for<br> 3-way or call waiting scenarios. Presumably, here we&#39;re in a<br>special 3-way scenario where the network needs a blank flash<br>before being able to add the new participant.  (This is not the<br>case with all 3-way calls, just certain CDMA infrastructures.)</p>\n<p>Otherwise, there is no digit, display the last dialed number. Don&#39;t finish since the user may want to edit it. The<br>user needs to press the dial button again, to dial it (general<br> case described above).</p>\n<p>*/</p>\n</blockquote>\n<p>*在大多数情况下，当拨号按钮被按下时都会有一串数字存在。从它的intent对象中得到它，开始</p>\n<p>*呼叫广播作为一个单独的任务，并结束这个任务活动。</p>\n<p>*如果没有数字并且CDMA网络处于占线状态时，</p>\n<p>*我们发送一个空白的Flash CDMA。CDMA网络使用Flash</p>\n<p>*来处理特殊处理的消息时，这里主要有三种方式</p>\n<p>*以及呼叫等待的情景。这里我们应该属于</p>\n<p>*前者，在能够添加新参与者之前,网络需要一个空白的Flash。</p>\n<p>*若不是上面的情景，也不要结束这个Activity，应该显示上一次的电话号码</p>\n<p>*并等待用户可能要编辑它。</p>\n<p>*用户需要再次按拨号键，重新拨通（重复上面描述的案例）。</p>\n<p> */</p>\n<p>———–  部分翻译可能不够准确  ————</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleDialButtonPressed</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (isDigitsEmpty()) &#123; <span class=\"comment\">//如果没有数字输入</span></div><div class=\"line\"></div><div class=\"line\">            handleDialButtonClickWithEmptyDigits();</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">final</span> String number = mDigits.getText().toString();                        <span class=\"comment\">//获取输入的电话号码</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (number != <span class=\"keyword\">null</span></div><div class=\"line\">                    &amp;&amp; !TextUtils.isEmpty(mProhibitedPhoneNumberRegexp)</div><div class=\"line\">                    &amp;&amp; number.matches(mProhibitedPhoneNumberRegexp)) &#123;                         <span class=\"comment\">//对number过滤</span></div><div class=\"line\">                Log.i(TAG, <span class=\"string\">\"The phone number is prohibited explicitly by a rule.\"</span>);</div><div class=\"line\">               <span class=\"keyword\">if</span> (getActivity() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    DialogFragment dialogFragment = ErrorDialogFragment.newInstance(</div><div class=\"line\">                            R.string.dialog_phone_call_prohibited_message);</div><div class=\"line\">                    dialogFragment.show(getFragmentManager(), <span class=\"string\">\"phone_prohibited_dialog\"</span>);</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                clearDialpad();                                            <span class=\"comment\">//清除数字</span></div><div class=\"line\"></div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;                                              <span class=\"comment\">//如果number通过了检查</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">final</span> Intent intent = CallUtil.getCallIntent(number,                  <span class=\"comment\">//取得一个Callintent</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                        (getActivity() <span class=\"keyword\">instanceof</span> DialtactsActivity ?</div><div class=\"line\">                               ((DialtactsActivity) getActivity()).getCallOrigin() : <span class=\"keyword\">null</span>));</div><div class=\"line\"></div><div class=\"line\">                              DialerUtils.startActivityWithErrorToast(getActivity(), intent);   <span class=\"comment\">//交给DialerUtils去处理</span></div><div class=\"line\">                hideAndClearDialpad(<span class=\"keyword\">false</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><del>如果用户点击的不是enter键，onKey方法将会返回false,交给onPressed处理</del>（<em>这里暂存疑 </em>）。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPressed</span><span class=\"params\">(View view, <span class=\"keyword\">boolean</span> pressed)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (DEBUG) Log.d(TAG, <span class=\"string\">\"onPressed(). view: \"</span> + view + <span class=\"string\">\", pressed: \"</span> + pressed);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (pressed) &#123;                        <span class=\"comment\">//这里继续对各个按键判断</span></div><div class=\"line\">            <span class=\"keyword\">switch</span> (view.getId()) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> R.id.one: &#123;</div><div class=\"line\">                    keyPressed(KeyEvent.KEYCODE_1);  <span class=\"comment\">//在keyPressed()方法中调用playTone（）方法，从而产生不同的按键声音效果</span></div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">               ... 略</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">case</span> R.id.zero: &#123;</div><div class=\"line\">                    keyPressed(KeyEvent.KEYCODE_0);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">case</span> R.id.pound: &#123;</div><div class=\"line\">                    keyPressed(KeyEvent.KEYCODE_POUND);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">case</span> R.id.star: &#123;</div><div class=\"line\">                    keyPressed(KeyEvent.KEYCODE_STAR);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">default</span>: &#123;</div><div class=\"line\">                    Log.wtf(TAG, <span class=\"string\">\"Unexpected onTouch(ACTION_DOWN) event from: \"</span> + view);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            mPressedDialpadKeys.add(view);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mPressedDialpadKeys.remove(view);</div><div class=\"line\">           <span class=\"keyword\">if</span> (mPressedDialpadKeys.isEmpty()) &#123;</div><div class=\"line\">                stopTone();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>随后继续触发onClick方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (view.getId()) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> R.id.dialpad_floating_action_button:                                  <span class=\"comment\">//拨打按钮</span></div><div class=\"line\">            mHaptic.vibrate();</div><div class=\"line\">          handleDialButtonPressed();                                    <span class=\"comment\">//再次交给了handleDialButton()方法</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> R.id.deleteButton: &#123;                                                  <span class=\"comment\">//del按钮</span></div><div class=\"line\">            keyPressed(KeyEvent.KEYCODE_DEL);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">case</span> R.id.digits: &#123;                                             <span class=\"comment\">//数字显示框，聚焦</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (!isDigitsEmpty()) &#123;</div><div class=\"line\">               mDigits.setCursorVisible(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> R.id.dialpad_overflow: &#123;</div><div class=\"line\">            mOverflowPopupMenu.show();</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">default</span>: &#123;</div><div class=\"line\">           Log.wtf(TAG, <span class=\"string\">\"Unexpected onClick() event from: \"</span> + view);</div><div class=\"line\">           <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>总之，在类DialPadFragment中完成了拨号，并将带着拨号数字的intent交给了类DialerUtils。 </strong></p>\n<blockquote>\n<p>DialerUtils.startActivityWithErrorToast(getActivity(), intent);</p>\n</blockquote>\n<h3 id=\"DialerUtils\"><a href=\"#DialerUtils\" class=\"headerlink\" title=\"DialerUtils\"></a>DialerUtils</h3><p>3、进入类DialerUtils.startActivityWithErrorToast()方法，这里有多个重载：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivityWithErrorToast</span><span class=\"params\">(Context context, Intent intent, <span class=\"keyword\">int</span> msgId)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;                                         <span class=\"comment\">//判断Intent是否是ACTION_CALL</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (Intent.ACTION_CALL.equals(intent.getAction())) &#123;</div><div class=\"line\">                <span class=\"comment\">// All dialer-initiated calls should pass the touch point to the InCallUI</span></div><div class=\"line\">                Point touchPoint = TouchPointManager.getInstance().getPoint();</div><div class=\"line\">               <span class=\"keyword\">if</span> (touchPoint.x != <span class=\"number\">0</span> || touchPoint.y != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    Bundle extras = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">                    extras.putParcelable(TouchPointManager.TOUCH_POINT, touchPoint);</div><div class=\"line\">                    intent.putExtra(TelecomManager.EXTRA_OUTGOING_CALL_EXTRAS, extras);</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"keyword\">final</span> TelecomManager tm = (TelecomManager)            <span class=\"comment\">//获取TelecomManager服务</span></div><div class=\"line\">                   context.getSystemService(Context.TELECOM_SERVICE);</div><div class=\"line\">                  tm.placeCall(intent.getData(), intent.getExtras());</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                context.startActivity(intent);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ActivityNotFoundException e) &#123;</div><div class=\"line\">            Toast.makeText(context, msgId, Toast.LENGTH_SHORT).show();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"TelecomManager\"><a href=\"#TelecomManager\" class=\"headerlink\" title=\"TelecomManager\"></a>TelecomManager</h3><p>4、进入类TelecomManager.placeCall()方法,此时已经在framework包下，进入了framework层：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">placeCall</span><span class=\"params\">(Uri address, Bundle extras)</span> </span>&#123;</div><div class=\"line\">        ITelecomService service = getTelecomService();<span class=\"comment\">//获取TelecomService服务</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (service != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (address == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                Log.w(TAG, <span class=\"string\">\"Cannot place call to empty address.\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                service.placeCall(address, extras == <span class=\"keyword\">null</span> ? <span class=\"keyword\">new</span> Bundle() : extras,</div><div class=\"line\">                        mContext.getOpPackageName());<span class=\"comment\">//交给Service去处理，进入Server端</span></div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                Log.e(TAG, <span class=\"string\">\"Error calling ITelecomService#placeCall\"</span>, e);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<hr>\n"},{"title":"Java多线程浅谈（一）","date":"2016-07-26T14:41:46.000Z","_content":"实现java多线程主要有两种方法：继承Thread类和实现runnable接口。\n## 1、继承java.lang.Thread类\n1.创建一个继承于Thread的子类；\n2.重写Thread类的run（）方法,方法内实现子线程要完成的功能；\n3.创建一个子类的对象；\n4.调用其start（）方法，启动线程，调用run（）方法。\ndemo：\n``` java\npublic class TestThread {\n\tpublic static void main(String[] args) {\n\t\t//3.创建一个子类的对象\n\t\tSubThread st1 = new SubThread();\n\t\tSubThread st2 = new SubThread();\n\t\t//4.调用其start（）方法，启动线程，调用run（）方法\n\t\tst1.start();\n\t\tst2.start();\t\n\t\t//st.start();\n\t\tfor(int i = 1; i <= 100; i++) {\n\t\t\tSystem.out.println(Thread.currentThread().getName() + \":\" + i);\n\t\t}\n\t}\n}\n//1.创建一个继承于Thread的子类\nclass SubThread extends Thread {\n\t//2.重写Thread类的run（）方法,方法内实现子线程要完成的功能\n\tpublic void run() {\n\t\tfor(int i = 1; i <= 100; i++) {\n\t\t\tSystem.out.println(Thread.currentThread().getName() + \":\" + i);\n\t\t}\n\t}\n}\n```\n运行结果：\n> main:1\nmain:2\nThread-1:1\nThread-0:1\nThread-1:2\nmain:3\nThread-1:3\nThread-0:2\nThread-1:4\nmain:4\nThread-1:5\nThread-1:6\nThread-0:3\nThread-1:7\nmain:5\nThread-1:8\nThread-0:4\nThread-1:9\nmain:6\nmain:7\nThread-1:10\nThread-0:5\nThread-1:11\nmain:8\nThread-1:12\nThread-0:6\nThread-1:13\nmain:9\nThread-1:14\nThread-0:7\nThread-1:15\n...（以下省略）\n\n**这里要注意：** \n\n - 一个线程只能执行一次start()方法，在java源码中start()方法被关键字synchronized修饰，同时对threadStatus进行了判断，非0抛IllegalThreadStateException()异常；\n - 不能通过Thread实现类对象的run()方法去启动一个线程。\n  \n### Thread的常用方法：\n- start():启动线程并执行相应的run()方法;\n- run()：子线程要执行的代码放入run()方法中;\n- currentThread():静态的，取到当前的线程；\n- getName():取到线程的名字；\n- setName():设置此线程的名字\n- yield(): 调用此方法的线程释放当前CPU的执行权，重回可执行状态，**但并不意味着CPU接下来不会执行该线程，该线程仍然可能抢到CPU**；\n- join():在A线程中调用B线程的join()方法，表示当执行到此方法时，A线程停止执行，直至B线程执行完毕,A线程再接着jion()之后的代码执行；\n- isAlive():判断当前线程是否还存活；\n- sleep(long l):显式的让当前进程睡眠1毫秒；\n- 线程通信：wait() notify() notifyAll()\n- 设置进程的优先级：\n - getPriority():返回进程优先值 （0-10），static final 的值 , 10最大\n - setPriority(int newPriority):改变进程的优先级\n\ndemo\n``` java\npublic class TestThread {\n\tpublic static void main(String[] args) {\n\t\t//3.创建一个子类的对象\n\t\tSubThread st1 = new SubThread();\n\t\tSubThread st2 = new SubThread();\n\t\t//4.调用其start（）方法，启动线程，调用run（）方法\n\t\tst1.setName(\"子线程\");\n\t\tst1.setPriority(Thread.MAX_PRIORITY);\n\t\tst1.start();\n\t\tThread.currentThread().setName(\"========主线程\");\n\t\t//st.start();\n\t\tfor(int i = 1; i <= 100; i++) {\n\t\t\tSystem.out.println(Thread.currentThread().getName() + \":\" +\n\t\t\t\t\tThread.currentThread().getPriority() + \" \" + i);\n//\t\t\tif(i % 10 == 0) {\n//\t\t\t\tThread.currentThread().yield();\n//\t\t\t}\n//\t\t\tif(i == 20) {\n//\t\t\t\ttry {\n//\t\t\t\t\tst1.join();\n//\t\t\t\t} catch (InterruptedException e) {\n//\t\t\t\t\t// TODO Auto-generated catch block\n//\t\t\t\t\te.printStackTrace();\n//\t\t\t\t}\n//\t\t\t}\n\t\t}\n\t\tSystem.out.println(st1.isAlive());\n\t}\n}\n\n//1.创建一个继承于Thread的子类\nclass SubThread extends Thread {\n\t//2.重写Thread类的run（）方法,方法内实现子线程要完成的功能\n\tpublic void run() {\n\t\tfor(int i = 1; i <= 100; i++) {\n//\t\t\ttry {\n//\t\t\t\tThread.currentThread().sleep(1000);\n//\t\t\t} catch (InterruptedException e) {\n//\t\t\t\t// TODO Auto-generated catch block\n//\t\t\t\te.printStackTrace();\n//\t\t\t}\n\t\t\tSystem.out.println(Thread.currentThread().getName() + \":\" +\n\t\t\t\t\tThread.currentThread().getPriority() + \" \" + i);\n\t\t}\n\t}\n}\n```\n\n## 2、实现runnable接口\n1.创建一个实现了Runnable借口的类；\n2.实现接口的抽象方法；\n3.创建一个Runnable接口的实现类；\n4.将此对象作为行参传递给Thread类的构造器中，创建Thread的对象，此对象即为一个线程；\n5.调用start()方法，启动线程并执行run()。\ndemo\n``` java\npublic class TsetThread1 {\n\tpublic static void main(String[] args) {\n\t\t//3.创建一个Runnable接口的实现类\n\t\tPrintNum1 p = new PrintNum1();\n\t\t//p.run();\n\t\t//p.start();\n\t\t//要想启动一个多线程，必须调用start()\n\t\t//4.将此对象作为行参传递给Thread类的构造器中，创建Thread的对象，此对象即为一个线程\n\t\tThread t1 = new Thread(p);\n\t\t//5.调用start()方法，启动线程并执行run()\n\t\tt1.start();\n\t\tfor (int i = 1; i <= 100; i++) {\n\t\t\tif (i % 2 != 0) {\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \":\" + i);\n\t\t\t}\n\t\t}\n\t}\n}\n//1.创建一个实现了Runnable借口的类\nclass PrintNum1 implements Runnable {\n    //2.实现接口的抽象方法\n\t@Override\n\tpublic void run() {\n\t\t// TODO Auto-generated method stub\n\t\tfor (int i = 1; i <= 100; i++) {\n\t\t\tif (i % 2 ==0) {\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \":\" + i);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n运行结果：\n> main:1\nThread-0:2\nThread-0:4\nThread-0:6\nThread-0:8\nThread-0:10\nmain:3\nmain:5\nmain:7\nThread-0:12\nmain:9\nmain:11\nmain:13\nmain:15\nmain:17\nmain:19\nmain:21\nmain:23\nmain:25\nmain:27\nmain:29\nmain:31\nmain:33\nmain:35\nmain:37\n...(下略）\n**这里要注意：**\n\n- 要想启动一个线程，必须调用start()方法；\n- 在java源码中\t\n         Thread t1 = new Thread(p);\n\t\t  t1.start();\n 实际上是把P给了源码中target,再调用了target的run方法。\n\n## 两种方式的比较\n实现的方式较好：\n\n- 避免了java单继承的局限性\n- 如果多个线程要操作同一份资源，更适合采用实现runnable接口的方式。\n\n\n\n\n\n\n\n\n\n\n \n\n","source":"_posts/Java多线程浅谈（一）.md","raw":"---\ntitle: Java多线程浅谈（一）\ndate: 2016-07-26 22:41:46\ntags:\n  - java\n---\n实现java多线程主要有两种方法：继承Thread类和实现runnable接口。\n## 1、继承java.lang.Thread类\n1.创建一个继承于Thread的子类；\n2.重写Thread类的run（）方法,方法内实现子线程要完成的功能；\n3.创建一个子类的对象；\n4.调用其start（）方法，启动线程，调用run（）方法。\ndemo：\n``` java\npublic class TestThread {\n\tpublic static void main(String[] args) {\n\t\t//3.创建一个子类的对象\n\t\tSubThread st1 = new SubThread();\n\t\tSubThread st2 = new SubThread();\n\t\t//4.调用其start（）方法，启动线程，调用run（）方法\n\t\tst1.start();\n\t\tst2.start();\t\n\t\t//st.start();\n\t\tfor(int i = 1; i <= 100; i++) {\n\t\t\tSystem.out.println(Thread.currentThread().getName() + \":\" + i);\n\t\t}\n\t}\n}\n//1.创建一个继承于Thread的子类\nclass SubThread extends Thread {\n\t//2.重写Thread类的run（）方法,方法内实现子线程要完成的功能\n\tpublic void run() {\n\t\tfor(int i = 1; i <= 100; i++) {\n\t\t\tSystem.out.println(Thread.currentThread().getName() + \":\" + i);\n\t\t}\n\t}\n}\n```\n运行结果：\n> main:1\nmain:2\nThread-1:1\nThread-0:1\nThread-1:2\nmain:3\nThread-1:3\nThread-0:2\nThread-1:4\nmain:4\nThread-1:5\nThread-1:6\nThread-0:3\nThread-1:7\nmain:5\nThread-1:8\nThread-0:4\nThread-1:9\nmain:6\nmain:7\nThread-1:10\nThread-0:5\nThread-1:11\nmain:8\nThread-1:12\nThread-0:6\nThread-1:13\nmain:9\nThread-1:14\nThread-0:7\nThread-1:15\n...（以下省略）\n\n**这里要注意：** \n\n - 一个线程只能执行一次start()方法，在java源码中start()方法被关键字synchronized修饰，同时对threadStatus进行了判断，非0抛IllegalThreadStateException()异常；\n - 不能通过Thread实现类对象的run()方法去启动一个线程。\n  \n### Thread的常用方法：\n- start():启动线程并执行相应的run()方法;\n- run()：子线程要执行的代码放入run()方法中;\n- currentThread():静态的，取到当前的线程；\n- getName():取到线程的名字；\n- setName():设置此线程的名字\n- yield(): 调用此方法的线程释放当前CPU的执行权，重回可执行状态，**但并不意味着CPU接下来不会执行该线程，该线程仍然可能抢到CPU**；\n- join():在A线程中调用B线程的join()方法，表示当执行到此方法时，A线程停止执行，直至B线程执行完毕,A线程再接着jion()之后的代码执行；\n- isAlive():判断当前线程是否还存活；\n- sleep(long l):显式的让当前进程睡眠1毫秒；\n- 线程通信：wait() notify() notifyAll()\n- 设置进程的优先级：\n - getPriority():返回进程优先值 （0-10），static final 的值 , 10最大\n - setPriority(int newPriority):改变进程的优先级\n\ndemo\n``` java\npublic class TestThread {\n\tpublic static void main(String[] args) {\n\t\t//3.创建一个子类的对象\n\t\tSubThread st1 = new SubThread();\n\t\tSubThread st2 = new SubThread();\n\t\t//4.调用其start（）方法，启动线程，调用run（）方法\n\t\tst1.setName(\"子线程\");\n\t\tst1.setPriority(Thread.MAX_PRIORITY);\n\t\tst1.start();\n\t\tThread.currentThread().setName(\"========主线程\");\n\t\t//st.start();\n\t\tfor(int i = 1; i <= 100; i++) {\n\t\t\tSystem.out.println(Thread.currentThread().getName() + \":\" +\n\t\t\t\t\tThread.currentThread().getPriority() + \" \" + i);\n//\t\t\tif(i % 10 == 0) {\n//\t\t\t\tThread.currentThread().yield();\n//\t\t\t}\n//\t\t\tif(i == 20) {\n//\t\t\t\ttry {\n//\t\t\t\t\tst1.join();\n//\t\t\t\t} catch (InterruptedException e) {\n//\t\t\t\t\t// TODO Auto-generated catch block\n//\t\t\t\t\te.printStackTrace();\n//\t\t\t\t}\n//\t\t\t}\n\t\t}\n\t\tSystem.out.println(st1.isAlive());\n\t}\n}\n\n//1.创建一个继承于Thread的子类\nclass SubThread extends Thread {\n\t//2.重写Thread类的run（）方法,方法内实现子线程要完成的功能\n\tpublic void run() {\n\t\tfor(int i = 1; i <= 100; i++) {\n//\t\t\ttry {\n//\t\t\t\tThread.currentThread().sleep(1000);\n//\t\t\t} catch (InterruptedException e) {\n//\t\t\t\t// TODO Auto-generated catch block\n//\t\t\t\te.printStackTrace();\n//\t\t\t}\n\t\t\tSystem.out.println(Thread.currentThread().getName() + \":\" +\n\t\t\t\t\tThread.currentThread().getPriority() + \" \" + i);\n\t\t}\n\t}\n}\n```\n\n## 2、实现runnable接口\n1.创建一个实现了Runnable借口的类；\n2.实现接口的抽象方法；\n3.创建一个Runnable接口的实现类；\n4.将此对象作为行参传递给Thread类的构造器中，创建Thread的对象，此对象即为一个线程；\n5.调用start()方法，启动线程并执行run()。\ndemo\n``` java\npublic class TsetThread1 {\n\tpublic static void main(String[] args) {\n\t\t//3.创建一个Runnable接口的实现类\n\t\tPrintNum1 p = new PrintNum1();\n\t\t//p.run();\n\t\t//p.start();\n\t\t//要想启动一个多线程，必须调用start()\n\t\t//4.将此对象作为行参传递给Thread类的构造器中，创建Thread的对象，此对象即为一个线程\n\t\tThread t1 = new Thread(p);\n\t\t//5.调用start()方法，启动线程并执行run()\n\t\tt1.start();\n\t\tfor (int i = 1; i <= 100; i++) {\n\t\t\tif (i % 2 != 0) {\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \":\" + i);\n\t\t\t}\n\t\t}\n\t}\n}\n//1.创建一个实现了Runnable借口的类\nclass PrintNum1 implements Runnable {\n    //2.实现接口的抽象方法\n\t@Override\n\tpublic void run() {\n\t\t// TODO Auto-generated method stub\n\t\tfor (int i = 1; i <= 100; i++) {\n\t\t\tif (i % 2 ==0) {\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \":\" + i);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n运行结果：\n> main:1\nThread-0:2\nThread-0:4\nThread-0:6\nThread-0:8\nThread-0:10\nmain:3\nmain:5\nmain:7\nThread-0:12\nmain:9\nmain:11\nmain:13\nmain:15\nmain:17\nmain:19\nmain:21\nmain:23\nmain:25\nmain:27\nmain:29\nmain:31\nmain:33\nmain:35\nmain:37\n...(下略）\n**这里要注意：**\n\n- 要想启动一个线程，必须调用start()方法；\n- 在java源码中\t\n         Thread t1 = new Thread(p);\n\t\t  t1.start();\n 实际上是把P给了源码中target,再调用了target的run方法。\n\n## 两种方式的比较\n实现的方式较好：\n\n- 避免了java单继承的局限性\n- 如果多个线程要操作同一份资源，更适合采用实现runnable接口的方式。\n\n\n\n\n\n\n\n\n\n\n \n\n","slug":"Java多线程浅谈（一）","published":1,"updated":"2016-08-31T07:05:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisimyty60006aojxl36b9d8z","content":"<p>实现java多线程主要有两种方法：继承Thread类和实现runnable接口。</p>\n<h2 id=\"1、继承java-lang-Thread类\"><a href=\"#1、继承java-lang-Thread类\" class=\"headerlink\" title=\"1、继承java.lang.Thread类\"></a>1、继承java.lang.Thread类</h2><p>1.创建一个继承于Thread的子类；<br>2.重写Thread类的run（）方法,方法内实现子线程要完成的功能；<br>3.创建一个子类的对象；<br>4.调用其start（）方法，启动线程，调用run（）方法。<br>demo：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//3.创建一个子类的对象</span></div><div class=\"line\">\t\tSubThread st1 = <span class=\"keyword\">new</span> SubThread();</div><div class=\"line\">\t\tSubThread st2 = <span class=\"keyword\">new</span> SubThread();</div><div class=\"line\">\t\t<span class=\"comment\">//4.调用其start（）方法，启动线程，调用run（）方法</span></div><div class=\"line\">\t\tst1.start();</div><div class=\"line\">\t\tst2.start();\t</div><div class=\"line\">\t\t<span class=\"comment\">//st.start();</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + i);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//1.创建一个继承于Thread的子类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//2.重写Thread类的run（）方法,方法内实现子线程要完成的功能</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + i);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>main:1<br>main:2<br>Thread-1:1<br>Thread-0:1<br>Thread-1:2<br>main:3<br>Thread-1:3<br>Thread-0:2<br>Thread-1:4<br>main:4<br>Thread-1:5<br>Thread-1:6<br>Thread-0:3<br>Thread-1:7<br>main:5<br>Thread-1:8<br>Thread-0:4<br>Thread-1:9<br>main:6<br>main:7<br>Thread-1:10<br>Thread-0:5<br>Thread-1:11<br>main:8<br>Thread-1:12<br>Thread-0:6<br>Thread-1:13<br>main:9<br>Thread-1:14<br>Thread-0:7<br>Thread-1:15<br>…（以下省略）</p>\n</blockquote>\n<p><strong>这里要注意：</strong> </p>\n<ul>\n<li>一个线程只能执行一次start()方法，在java源码中start()方法被关键字synchronized修饰，同时对threadStatus进行了判断，非0抛IllegalThreadStateException()异常；</li>\n<li>不能通过Thread实现类对象的run()方法去启动一个线程。</li>\n</ul>\n<h3 id=\"Thread的常用方法：\"><a href=\"#Thread的常用方法：\" class=\"headerlink\" title=\"Thread的常用方法：\"></a>Thread的常用方法：</h3><ul>\n<li>start():启动线程并执行相应的run()方法;</li>\n<li>run()：子线程要执行的代码放入run()方法中;</li>\n<li>currentThread():静态的，取到当前的线程；</li>\n<li>getName():取到线程的名字；</li>\n<li>setName():设置此线程的名字</li>\n<li>yield(): 调用此方法的线程释放当前CPU的执行权，重回可执行状态，<strong>但并不意味着CPU接下来不会执行该线程，该线程仍然可能抢到CPU</strong>；</li>\n<li>join():在A线程中调用B线程的join()方法，表示当执行到此方法时，A线程停止执行，直至B线程执行完毕,A线程再接着jion()之后的代码执行；</li>\n<li>isAlive():判断当前线程是否还存活；</li>\n<li>sleep(long l):显式的让当前进程睡眠1毫秒；</li>\n<li>线程通信：wait() notify() notifyAll()</li>\n<li>设置进程的优先级：<ul>\n<li>getPriority():返回进程优先值 （0-10），static final 的值 , 10最大</li>\n<li>setPriority(int newPriority):改变进程的优先级</li>\n</ul>\n</li>\n</ul>\n<p>demo<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//3.创建一个子类的对象</span></div><div class=\"line\">\t\tSubThread st1 = <span class=\"keyword\">new</span> SubThread();</div><div class=\"line\">\t\tSubThread st2 = <span class=\"keyword\">new</span> SubThread();</div><div class=\"line\">\t\t<span class=\"comment\">//4.调用其start（）方法，启动线程，调用run（）方法</span></div><div class=\"line\">\t\tst1.setName(<span class=\"string\">\"子线程\"</span>);</div><div class=\"line\">\t\tst1.setPriority(Thread.MAX_PRIORITY);</div><div class=\"line\">\t\tst1.start();</div><div class=\"line\">\t\tThread.currentThread().setName(<span class=\"string\">\"========主线程\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//st.start();</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> +</div><div class=\"line\">\t\t\t\t\tThread.currentThread().getPriority() + <span class=\"string\">\" \"</span> + i);</div><div class=\"line\"><span class=\"comment\">//\t\t\tif(i % 10 == 0) &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\tThread.currentThread().yield();</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\tif(i == 20) &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\ttry &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\t\tst1.join();</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\t&#125; catch (InterruptedException e) &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\t\t// TODO Auto-generated catch block</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\t\te.printStackTrace();</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125;</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(st1.isAlive());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//1.创建一个继承于Thread的子类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//2.重写Thread类的run（）方法,方法内实现子线程要完成的功能</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\"><span class=\"comment\">//\t\t\ttry &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\tThread.currentThread().sleep(1000);</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125; catch (InterruptedException e) &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\t// TODO Auto-generated catch block</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\te.printStackTrace();</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125;</span></div><div class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> +</div><div class=\"line\">\t\t\t\t\tThread.currentThread().getPriority() + <span class=\"string\">\" \"</span> + i);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2、实现runnable接口\"><a href=\"#2、实现runnable接口\" class=\"headerlink\" title=\"2、实现runnable接口\"></a>2、实现runnable接口</h2><p>1.创建一个实现了Runnable借口的类；<br>2.实现接口的抽象方法；<br>3.创建一个Runnable接口的实现类；<br>4.将此对象作为行参传递给Thread类的构造器中，创建Thread的对象，此对象即为一个线程；<br>5.调用start()方法，启动线程并执行run()。<br>demo<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TsetThread1</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//3.创建一个Runnable接口的实现类</span></div><div class=\"line\">\t\tPrintNum1 p = <span class=\"keyword\">new</span> PrintNum1();</div><div class=\"line\">\t\t<span class=\"comment\">//p.run();</span></div><div class=\"line\">\t\t<span class=\"comment\">//p.start();</span></div><div class=\"line\">\t\t<span class=\"comment\">//要想启动一个多线程，必须调用start()</span></div><div class=\"line\">\t\t<span class=\"comment\">//4.将此对象作为行参传递给Thread类的构造器中，创建Thread的对象，此对象即为一个线程</span></div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(p);</div><div class=\"line\">\t\t<span class=\"comment\">//5.调用start()方法，启动线程并执行run()</span></div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + i);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//1.创建一个实现了Runnable借口的类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintNum1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//2.实现接口的抽象方法</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> ==<span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + i);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>main:1<br>Thread-0:2<br>Thread-0:4<br>Thread-0:6<br>Thread-0:8<br>Thread-0:10<br>main:3<br>main:5<br>main:7<br>Thread-0:12<br>main:9<br>main:11<br>main:13<br>main:15<br>main:17<br>main:19<br>main:21<br>main:23<br>main:25<br>main:27<br>main:29<br>main:31<br>main:33<br>main:35<br>main:37<br>…(下略）<br><strong>这里要注意：</strong></p>\n</blockquote>\n<ul>\n<li>要想启动一个线程，必须调用start()方法；</li>\n<li>在java源码中    <pre><code>Thread t1 = new Thread(p);\n t1.start();\n</code></pre>实际上是把P给了源码中target,再调用了target的run方法。</li>\n</ul>\n<h2 id=\"两种方式的比较\"><a href=\"#两种方式的比较\" class=\"headerlink\" title=\"两种方式的比较\"></a>两种方式的比较</h2><p>实现的方式较好：</p>\n<ul>\n<li>避免了java单继承的局限性</li>\n<li>如果多个线程要操作同一份资源，更适合采用实现runnable接口的方式。</li>\n</ul>\n","excerpt":"","more":"<p>实现java多线程主要有两种方法：继承Thread类和实现runnable接口。</p>\n<h2 id=\"1、继承java-lang-Thread类\"><a href=\"#1、继承java-lang-Thread类\" class=\"headerlink\" title=\"1、继承java.lang.Thread类\"></a>1、继承java.lang.Thread类</h2><p>1.创建一个继承于Thread的子类；<br>2.重写Thread类的run（）方法,方法内实现子线程要完成的功能；<br>3.创建一个子类的对象；<br>4.调用其start（）方法，启动线程，调用run（）方法。<br>demo：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//3.创建一个子类的对象</span></div><div class=\"line\">\t\tSubThread st1 = <span class=\"keyword\">new</span> SubThread();</div><div class=\"line\">\t\tSubThread st2 = <span class=\"keyword\">new</span> SubThread();</div><div class=\"line\">\t\t<span class=\"comment\">//4.调用其start（）方法，启动线程，调用run（）方法</span></div><div class=\"line\">\t\tst1.start();</div><div class=\"line\">\t\tst2.start();\t</div><div class=\"line\">\t\t<span class=\"comment\">//st.start();</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + i);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//1.创建一个继承于Thread的子类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//2.重写Thread类的run（）方法,方法内实现子线程要完成的功能</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + i);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>main:1<br>main:2<br>Thread-1:1<br>Thread-0:1<br>Thread-1:2<br>main:3<br>Thread-1:3<br>Thread-0:2<br>Thread-1:4<br>main:4<br>Thread-1:5<br>Thread-1:6<br>Thread-0:3<br>Thread-1:7<br>main:5<br>Thread-1:8<br>Thread-0:4<br>Thread-1:9<br>main:6<br>main:7<br>Thread-1:10<br>Thread-0:5<br>Thread-1:11<br>main:8<br>Thread-1:12<br>Thread-0:6<br>Thread-1:13<br>main:9<br>Thread-1:14<br>Thread-0:7<br>Thread-1:15<br>…（以下省略）</p>\n</blockquote>\n<p><strong>这里要注意：</strong> </p>\n<ul>\n<li>一个线程只能执行一次start()方法，在java源码中start()方法被关键字synchronized修饰，同时对threadStatus进行了判断，非0抛IllegalThreadStateException()异常；</li>\n<li>不能通过Thread实现类对象的run()方法去启动一个线程。</li>\n</ul>\n<h3 id=\"Thread的常用方法：\"><a href=\"#Thread的常用方法：\" class=\"headerlink\" title=\"Thread的常用方法：\"></a>Thread的常用方法：</h3><ul>\n<li>start():启动线程并执行相应的run()方法;</li>\n<li>run()：子线程要执行的代码放入run()方法中;</li>\n<li>currentThread():静态的，取到当前的线程；</li>\n<li>getName():取到线程的名字；</li>\n<li>setName():设置此线程的名字</li>\n<li>yield(): 调用此方法的线程释放当前CPU的执行权，重回可执行状态，<strong>但并不意味着CPU接下来不会执行该线程，该线程仍然可能抢到CPU</strong>；</li>\n<li>join():在A线程中调用B线程的join()方法，表示当执行到此方法时，A线程停止执行，直至B线程执行完毕,A线程再接着jion()之后的代码执行；</li>\n<li>isAlive():判断当前线程是否还存活；</li>\n<li>sleep(long l):显式的让当前进程睡眠1毫秒；</li>\n<li>线程通信：wait() notify() notifyAll()</li>\n<li>设置进程的优先级：<ul>\n<li>getPriority():返回进程优先值 （0-10），static final 的值 , 10最大</li>\n<li>setPriority(int newPriority):改变进程的优先级</li>\n</ul>\n</li>\n</ul>\n<p>demo<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//3.创建一个子类的对象</span></div><div class=\"line\">\t\tSubThread st1 = <span class=\"keyword\">new</span> SubThread();</div><div class=\"line\">\t\tSubThread st2 = <span class=\"keyword\">new</span> SubThread();</div><div class=\"line\">\t\t<span class=\"comment\">//4.调用其start（）方法，启动线程，调用run（）方法</span></div><div class=\"line\">\t\tst1.setName(<span class=\"string\">\"子线程\"</span>);</div><div class=\"line\">\t\tst1.setPriority(Thread.MAX_PRIORITY);</div><div class=\"line\">\t\tst1.start();</div><div class=\"line\">\t\tThread.currentThread().setName(<span class=\"string\">\"========主线程\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//st.start();</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> +</div><div class=\"line\">\t\t\t\t\tThread.currentThread().getPriority() + <span class=\"string\">\" \"</span> + i);</div><div class=\"line\"><span class=\"comment\">//\t\t\tif(i % 10 == 0) &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\tThread.currentThread().yield();</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\tif(i == 20) &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\ttry &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\t\tst1.join();</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\t&#125; catch (InterruptedException e) &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\t\t// TODO Auto-generated catch block</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\t\te.printStackTrace();</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125;</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(st1.isAlive());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//1.创建一个继承于Thread的子类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//2.重写Thread类的run（）方法,方法内实现子线程要完成的功能</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\"><span class=\"comment\">//\t\t\ttry &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\tThread.currentThread().sleep(1000);</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125; catch (InterruptedException e) &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\t// TODO Auto-generated catch block</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t\te.printStackTrace();</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125;</span></div><div class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> +</div><div class=\"line\">\t\t\t\t\tThread.currentThread().getPriority() + <span class=\"string\">\" \"</span> + i);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2、实现runnable接口\"><a href=\"#2、实现runnable接口\" class=\"headerlink\" title=\"2、实现runnable接口\"></a>2、实现runnable接口</h2><p>1.创建一个实现了Runnable借口的类；<br>2.实现接口的抽象方法；<br>3.创建一个Runnable接口的实现类；<br>4.将此对象作为行参传递给Thread类的构造器中，创建Thread的对象，此对象即为一个线程；<br>5.调用start()方法，启动线程并执行run()。<br>demo<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TsetThread1</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//3.创建一个Runnable接口的实现类</span></div><div class=\"line\">\t\tPrintNum1 p = <span class=\"keyword\">new</span> PrintNum1();</div><div class=\"line\">\t\t<span class=\"comment\">//p.run();</span></div><div class=\"line\">\t\t<span class=\"comment\">//p.start();</span></div><div class=\"line\">\t\t<span class=\"comment\">//要想启动一个多线程，必须调用start()</span></div><div class=\"line\">\t\t<span class=\"comment\">//4.将此对象作为行参传递给Thread类的构造器中，创建Thread的对象，此对象即为一个线程</span></div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(p);</div><div class=\"line\">\t\t<span class=\"comment\">//5.调用start()方法，启动线程并执行run()</span></div><div class=\"line\">\t\tt1.start();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + i);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//1.创建一个实现了Runnable借口的类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintNum1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//2.实现接口的抽象方法</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> ==<span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\":\"</span> + i);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>main:1<br>Thread-0:2<br>Thread-0:4<br>Thread-0:6<br>Thread-0:8<br>Thread-0:10<br>main:3<br>main:5<br>main:7<br>Thread-0:12<br>main:9<br>main:11<br>main:13<br>main:15<br>main:17<br>main:19<br>main:21<br>main:23<br>main:25<br>main:27<br>main:29<br>main:31<br>main:33<br>main:35<br>main:37<br>…(下略）<br><strong>这里要注意：</strong></p>\n</blockquote>\n<ul>\n<li>要想启动一个线程，必须调用start()方法；</li>\n<li>在java源码中    <pre><code>Thread t1 = new Thread(p);\n t1.start();\n</code></pre>实际上是把P给了源码中target,再调用了target的run方法。</li>\n</ul>\n<h2 id=\"两种方式的比较\"><a href=\"#两种方式的比较\" class=\"headerlink\" title=\"两种方式的比较\"></a>两种方式的比较</h2><p>实现的方式较好：</p>\n<ul>\n<li>避免了java单继承的局限性</li>\n<li>如果多个线程要操作同一份资源，更适合采用实现runnable接口的方式。</li>\n</ul>\n"},{"title":"Shell简单学习","date":"2016-07-29T10:58:57.000Z","_content":"最近学习简单看了点shell脚本的语法，在此来记下与C、java语言不同的语法点，方便以后查看。\n首先要明确两个概念：Shell脚本与Shell\n[**Shell script（shell 脚本）**][1]，是一种电脑程序与文本文件，内容由一连串的shell命令组成，经由Unix Shell直译其内容后运作。被当成是一种脚本语言来设计，其运作方式与直译语言相当，由Unix shell扮演命令行解释器的角色，在读取shell script之后，依序运行其中的shell命令，之后输出结果。\n[**Shell**][2],“为用户提供用户界面”的软件，通常指的是命令行界面的解析器。一般来说，这个词是指操作系统中，提供访问内核所提供之服务的程序。Shell也用于泛指所有为用户提供操作界面的程序，也就是程序和用户交互的层面。因此与之相对的是程序内核（Core），内核不提供和用户的交互功能。\n我们一般称shell编程是指shell脚本的编程，不是指开发shell，这点概念要分清。\n### 使用变量\n使用一个定义过的变量，只要在变量名前面加美元符号($)即可:\n```Bash\nyour_name=\"xianbo\"\necho $your_name\n```\n执行的时候记得加上可执行权限\n``` Bash\nchmod +x ./test.sh  #使脚本具有执行权限\n./test.sh  #执行脚本\n```\n运行结果：\n> xianbo\n### 获取字符串长度\n```\nstring=\"abcd\"\necho ${#string} #输出 4\n```\n### 数组\n```\nmy_array=(A B \"C\" D)\necho \"第一个元素为: ${my_array[0]}\"\necho \"第二个元素为: ${my_array[1]}\"\necho \"第三个元素为: ${my_array[2]}\"\necho \"第四个元素为: ${my_array[3]}\"\n```\n运行结果：\n> \n第一个元素为: A\n第二个元素为: B\n第三个元素为: C\n第四个元素为: D\n\n### 基本运算符\n1.原生bash不支持简单的数学运算，但是可以通过其他命令来实现\n```\nval=`expr 2 + 2`\necho \"两数之和为 : $val\"\nval=`expr $a \\* $b`\necho \"a * b : $val\"\n```\n运行结果:\n> 两数之和为 : 4\na * b : 200\n这里要注意乘号*需要使用转移符\n\n2.使用方括号与美元符的方式\n```\na=$[2+2]\nb=$[2 - 1]\nc=$[2 / 2]\nd=$[2 * 2]\necho $a $b $c $d\n```\n运行结果：\n> 4 1 1 4\nwhile语句\n```\nint=1\nwhile(($int<=5 ))\ndo\n        echo $int\n        let \"int++\"\ndone\n```\n运行结果：\n> 1\n2\n3\n4\n5\n\n### Shell函数\n```\nfunWithReturn(){\n    echo \"这个函数会对输入的两个数字进行相加运算...\"\n    echo \"输入第一个数字: \"\n    read aNum\n    echo \"输入第二个数字: \"\n    read anotherNum\n    echo \"两个数字分别为 $aNum 和 $anotherNum !\"\n    return $(($aNum+$anotherNum))\n}\nfunWithReturn\necho \"输入的两个数字之和为 $? !\"\n```\n运行结果:\n> 这个函数会对输入的两个数字进行相加运算...\n输入第一个数字: \n1\n输入第二个数字: \n3\n两个数字分别为 1 和 3 !\n输入的两个数字之和为 4 !\n\n**说明：**\n\n-  可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。\n-  参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。\n-  函数返回值在调用该函数后通过 $? 来获得。\n- 所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。\n\n### 参数函数\n在Shell中，调用函数时可以向其传递参数。在函数体内部，通过$n的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...以此类推\n```\nfunWithParam(){\n    echo \"第一个参数为 $1 !\"\n    echo \"第二个参数为 $2 !\"\n    echo \"第十个参数为 $10 !\"\n    echo \"第十个参数为 ${10} !\"\n    echo \"第十一个参数为 ${11} !\"\n    echo \"参数总数有 $# 个!\"\n    echo \"作为一个字符串输出所有参数 $* !\"\n}\nfunWithParam 1 2 3 4 5 6 7 8 9 34 73\n```\n运行结果：\n> 第一个参数为 1 !\n第二个参数为 2 !\n第十个参数为 10 !\n第十个参数为 34 !\n第十一个参数为 73 !\n参数总数有 11 个!\n作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !\n\n### IO重定向\n\\>为输出流\n\\>>为不覆盖的输出流\n< 、<<为输出\n```\necho \"IO test\" > test0728\n```\n执行后，生成test0728文件，文件内容为：\n> IO test\n\n需要注意的是文件描述符:\n0通常是标准输入（STDIN）,1是标准输出（STDOUT）,2是标准错误输出（STDERR）。\n像在Android中常用的编译命令：\n```\nmake -j8 2>&1 | tee build.log \n```\n2是标准错误，&1是标准输出，2>&1意思就是将标准错误输出到标准输出中。\n如果没有2>&1,只会有标准输出，没有错误；\ntee的作用同时输出到控制台和文件\nmake > build.log  是将所有标准输出到这个文件中，并没有定义标准错误应该是定义到了标准输出，也就是说如果make执行出现错误，那么就不会写到 build.log中，而是输出到屏幕上，\n2>&1是错误和结果都重定向到build.log中！\n最后可以到根目录看到 build.log\n\n\n\n\n\n  [1]: https://zh.wikipedia.org/wiki/Shell%E8%84%9A%E6%9C%AC\n  [2]: https://zh.wikipedia.org/wiki/Shell%E8%84%9A%E6%9C%AC\n\n","source":"_posts/Shell简单学习.md","raw":"---\ntitle: Shell简单学习\ndate: 2016-07-29 18:58:57\ntags:\n  - Shell\n  - Tool\n---\n最近学习简单看了点shell脚本的语法，在此来记下与C、java语言不同的语法点，方便以后查看。\n首先要明确两个概念：Shell脚本与Shell\n[**Shell script（shell 脚本）**][1]，是一种电脑程序与文本文件，内容由一连串的shell命令组成，经由Unix Shell直译其内容后运作。被当成是一种脚本语言来设计，其运作方式与直译语言相当，由Unix shell扮演命令行解释器的角色，在读取shell script之后，依序运行其中的shell命令，之后输出结果。\n[**Shell**][2],“为用户提供用户界面”的软件，通常指的是命令行界面的解析器。一般来说，这个词是指操作系统中，提供访问内核所提供之服务的程序。Shell也用于泛指所有为用户提供操作界面的程序，也就是程序和用户交互的层面。因此与之相对的是程序内核（Core），内核不提供和用户的交互功能。\n我们一般称shell编程是指shell脚本的编程，不是指开发shell，这点概念要分清。\n### 使用变量\n使用一个定义过的变量，只要在变量名前面加美元符号($)即可:\n```Bash\nyour_name=\"xianbo\"\necho $your_name\n```\n执行的时候记得加上可执行权限\n``` Bash\nchmod +x ./test.sh  #使脚本具有执行权限\n./test.sh  #执行脚本\n```\n运行结果：\n> xianbo\n### 获取字符串长度\n```\nstring=\"abcd\"\necho ${#string} #输出 4\n```\n### 数组\n```\nmy_array=(A B \"C\" D)\necho \"第一个元素为: ${my_array[0]}\"\necho \"第二个元素为: ${my_array[1]}\"\necho \"第三个元素为: ${my_array[2]}\"\necho \"第四个元素为: ${my_array[3]}\"\n```\n运行结果：\n> \n第一个元素为: A\n第二个元素为: B\n第三个元素为: C\n第四个元素为: D\n\n### 基本运算符\n1.原生bash不支持简单的数学运算，但是可以通过其他命令来实现\n```\nval=`expr 2 + 2`\necho \"两数之和为 : $val\"\nval=`expr $a \\* $b`\necho \"a * b : $val\"\n```\n运行结果:\n> 两数之和为 : 4\na * b : 200\n这里要注意乘号*需要使用转移符\n\n2.使用方括号与美元符的方式\n```\na=$[2+2]\nb=$[2 - 1]\nc=$[2 / 2]\nd=$[2 * 2]\necho $a $b $c $d\n```\n运行结果：\n> 4 1 1 4\nwhile语句\n```\nint=1\nwhile(($int<=5 ))\ndo\n        echo $int\n        let \"int++\"\ndone\n```\n运行结果：\n> 1\n2\n3\n4\n5\n\n### Shell函数\n```\nfunWithReturn(){\n    echo \"这个函数会对输入的两个数字进行相加运算...\"\n    echo \"输入第一个数字: \"\n    read aNum\n    echo \"输入第二个数字: \"\n    read anotherNum\n    echo \"两个数字分别为 $aNum 和 $anotherNum !\"\n    return $(($aNum+$anotherNum))\n}\nfunWithReturn\necho \"输入的两个数字之和为 $? !\"\n```\n运行结果:\n> 这个函数会对输入的两个数字进行相加运算...\n输入第一个数字: \n1\n输入第二个数字: \n3\n两个数字分别为 1 和 3 !\n输入的两个数字之和为 4 !\n\n**说明：**\n\n-  可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。\n-  参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。\n-  函数返回值在调用该函数后通过 $? 来获得。\n- 所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。\n\n### 参数函数\n在Shell中，调用函数时可以向其传递参数。在函数体内部，通过$n的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...以此类推\n```\nfunWithParam(){\n    echo \"第一个参数为 $1 !\"\n    echo \"第二个参数为 $2 !\"\n    echo \"第十个参数为 $10 !\"\n    echo \"第十个参数为 ${10} !\"\n    echo \"第十一个参数为 ${11} !\"\n    echo \"参数总数有 $# 个!\"\n    echo \"作为一个字符串输出所有参数 $* !\"\n}\nfunWithParam 1 2 3 4 5 6 7 8 9 34 73\n```\n运行结果：\n> 第一个参数为 1 !\n第二个参数为 2 !\n第十个参数为 10 !\n第十个参数为 34 !\n第十一个参数为 73 !\n参数总数有 11 个!\n作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !\n\n### IO重定向\n\\>为输出流\n\\>>为不覆盖的输出流\n< 、<<为输出\n```\necho \"IO test\" > test0728\n```\n执行后，生成test0728文件，文件内容为：\n> IO test\n\n需要注意的是文件描述符:\n0通常是标准输入（STDIN）,1是标准输出（STDOUT）,2是标准错误输出（STDERR）。\n像在Android中常用的编译命令：\n```\nmake -j8 2>&1 | tee build.log \n```\n2是标准错误，&1是标准输出，2>&1意思就是将标准错误输出到标准输出中。\n如果没有2>&1,只会有标准输出，没有错误；\ntee的作用同时输出到控制台和文件\nmake > build.log  是将所有标准输出到这个文件中，并没有定义标准错误应该是定义到了标准输出，也就是说如果make执行出现错误，那么就不会写到 build.log中，而是输出到屏幕上，\n2>&1是错误和结果都重定向到build.log中！\n最后可以到根目录看到 build.log\n\n\n\n\n\n  [1]: https://zh.wikipedia.org/wiki/Shell%E8%84%9A%E6%9C%AC\n  [2]: https://zh.wikipedia.org/wiki/Shell%E8%84%9A%E6%9C%AC\n\n","slug":"Shell简单学习","published":1,"updated":"2016-08-31T07:05:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisimyty70008aojxylbl9krm","content":"<p>最近学习简单看了点shell脚本的语法，在此来记下与C、java语言不同的语法点，方便以后查看。<br>首先要明确两个概念：Shell脚本与Shell<br><a href=\"https://zh.wikipedia.org/wiki/Shell%E8%84%9A%E6%9C%AC\" target=\"_blank\" rel=\"external\"><strong>Shell script（shell 脚本）</strong></a>，是一种电脑程序与文本文件，内容由一连串的shell命令组成，经由Unix Shell直译其内容后运作。被当成是一种脚本语言来设计，其运作方式与直译语言相当，由Unix shell扮演命令行解释器的角色，在读取shell script之后，依序运行其中的shell命令，之后输出结果。<br><a href=\"https://zh.wikipedia.org/wiki/Shell%E8%84%9A%E6%9C%AC\" target=\"_blank\" rel=\"external\"><strong>Shell</strong></a>,“为用户提供用户界面”的软件，通常指的是命令行界面的解析器。一般来说，这个词是指操作系统中，提供访问内核所提供之服务的程序。Shell也用于泛指所有为用户提供操作界面的程序，也就是程序和用户交互的层面。因此与之相对的是程序内核（Core），内核不提供和用户的交互功能。<br>我们一般称shell编程是指shell脚本的编程，不是指开发shell，这点概念要分清。</p>\n<h3 id=\"使用变量\"><a href=\"#使用变量\" class=\"headerlink\" title=\"使用变量\"></a>使用变量</h3><p>使用一个定义过的变量，只要在变量名前面加美元符号($)即可:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">your_name=<span class=\"string\">\"xianbo\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$your_name</span></div></pre></td></tr></table></figure></p>\n<p>执行的时候记得加上可执行权限<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod +x ./test.sh  <span class=\"comment\">#使脚本具有执行权限</span></div><div class=\"line\">./test.sh  <span class=\"comment\">#执行脚本</span></div></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>xianbo</p>\n<h3 id=\"获取字符串长度\"><a href=\"#获取字符串长度\" class=\"headerlink\" title=\"获取字符串长度\"></a>获取字符串长度</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">string=&quot;abcd&quot;</div><div class=\"line\">echo $&#123;#string&#125; #输出 4</div></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">my_array=(A B &quot;C&quot; D)</div><div class=\"line\">echo &quot;第一个元素为: $&#123;my_array[0]&#125;&quot;</div><div class=\"line\">echo &quot;第二个元素为: $&#123;my_array[1]&#125;&quot;</div><div class=\"line\">echo &quot;第三个元素为: $&#123;my_array[2]&#125;&quot;</div><div class=\"line\">echo &quot;第四个元素为: $&#123;my_array[3]&#125;&quot;</div></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<blockquote>\n<p>第一个元素为: A<br>第二个元素为: B<br>第三个元素为: C<br>第四个元素为: D</p>\n</blockquote>\n<h3 id=\"基本运算符\"><a href=\"#基本运算符\" class=\"headerlink\" title=\"基本运算符\"></a>基本运算符</h3><p>1.原生bash不支持简单的数学运算，但是可以通过其他命令来实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">val=`expr 2 + 2`</div><div class=\"line\">echo &quot;两数之和为 : $val&quot;</div><div class=\"line\">val=`expr $a \\* $b`</div><div class=\"line\">echo &quot;a * b : $val&quot;</div></pre></td></tr></table></figure></p>\n<p>运行结果:</p>\n<blockquote>\n<p>两数之和为 : 4<br>a <em> b : 200<br>这里要注意乘号</em>需要使用转移符</p>\n</blockquote>\n<p>2.使用方括号与美元符的方式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">a=$[2+2]</div><div class=\"line\">b=$[2 - 1]</div><div class=\"line\">c=$[2 / 2]</div><div class=\"line\">d=$[2 * 2]</div><div class=\"line\">echo $a $b $c $d</div></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>4 1 1 4<br>while语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">int=1</div><div class=\"line\">while(($int&lt;=5 ))</div><div class=\"line\">do</div><div class=\"line\">        echo $int</div><div class=\"line\">        let &quot;int++&quot;</div><div class=\"line\">done</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>运行结果：</p>\n<blockquote>\n<p>1<br>2<br>3<br>4<br>5</p>\n</blockquote>\n<h3 id=\"Shell函数\"><a href=\"#Shell函数\" class=\"headerlink\" title=\"Shell函数\"></a>Shell函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">funWithReturn()&#123;</div><div class=\"line\">    echo &quot;这个函数会对输入的两个数字进行相加运算...&quot;</div><div class=\"line\">    echo &quot;输入第一个数字: &quot;</div><div class=\"line\">    read aNum</div><div class=\"line\">    echo &quot;输入第二个数字: &quot;</div><div class=\"line\">    read anotherNum</div><div class=\"line\">    echo &quot;两个数字分别为 $aNum 和 $anotherNum !&quot;</div><div class=\"line\">    return $(($aNum+$anotherNum))</div><div class=\"line\">&#125;</div><div class=\"line\">funWithReturn</div><div class=\"line\">echo &quot;输入的两个数字之和为 $? !&quot;</div></pre></td></tr></table></figure>\n<p>运行结果:</p>\n<blockquote>\n<p>这个函数会对输入的两个数字进行相加运算…<br>输入第一个数字:<br>1<br>输入第二个数字:<br>3<br>两个数字分别为 1 和 3 !<br>输入的两个数字之和为 4 !</p>\n</blockquote>\n<p><strong>说明：</strong></p>\n<ul>\n<li>可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</li>\n<li>参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。</li>\n<li>函数返回值在调用该函数后通过 $? 来获得。</li>\n<li>所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</li>\n</ul>\n<h3 id=\"参数函数\"><a href=\"#参数函数\" class=\"headerlink\" title=\"参数函数\"></a>参数函数</h3><p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过$n的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…以此类推<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">funWithParam()&#123;</div><div class=\"line\">    echo &quot;第一个参数为 $1 !&quot;</div><div class=\"line\">    echo &quot;第二个参数为 $2 !&quot;</div><div class=\"line\">    echo &quot;第十个参数为 $10 !&quot;</div><div class=\"line\">    echo &quot;第十个参数为 $&#123;10&#125; !&quot;</div><div class=\"line\">    echo &quot;第十一个参数为 $&#123;11&#125; !&quot;</div><div class=\"line\">    echo &quot;参数总数有 $# 个!&quot;</div><div class=\"line\">    echo &quot;作为一个字符串输出所有参数 $* !&quot;</div><div class=\"line\">&#125;</div><div class=\"line\">funWithParam 1 2 3 4 5 6 7 8 9 34 73</div></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>第一个参数为 1 !<br>第二个参数为 2 !<br>第十个参数为 10 !<br>第十个参数为 34 !<br>第十一个参数为 73 !<br>参数总数有 11 个!<br>作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !</p>\n</blockquote>\n<h3 id=\"IO重定向\"><a href=\"#IO重定向\" class=\"headerlink\" title=\"IO重定向\"></a>IO重定向</h3><p>>为输出流<br>>&gt;为不覆盖的输出流<br>&lt; 、&lt;&lt;为输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;IO test&quot; &gt; test0728</div></pre></td></tr></table></figure></p>\n<p>执行后，生成test0728文件，文件内容为：</p>\n<blockquote>\n<p>IO test</p>\n</blockquote>\n<p>需要注意的是文件描述符:<br>0通常是标准输入（STDIN）,1是标准输出（STDOUT）,2是标准错误输出（STDERR）。<br>像在Android中常用的编译命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make -j8 2&gt;&amp;1 | tee build.log</div></pre></td></tr></table></figure></p>\n<p>2是标准错误，&amp;1是标准输出，2&gt;&amp;1意思就是将标准错误输出到标准输出中。<br>如果没有2&gt;&amp;1,只会有标准输出，没有错误；<br>tee的作用同时输出到控制台和文件<br>make &gt; build.log  是将所有标准输出到这个文件中，并没有定义标准错误应该是定义到了标准输出，也就是说如果make执行出现错误，那么就不会写到 build.log中，而是输出到屏幕上，<br>2&gt;&amp;1是错误和结果都重定向到build.log中！<br>最后可以到根目录看到 build.log</p>\n","excerpt":"","more":"<p>最近学习简单看了点shell脚本的语法，在此来记下与C、java语言不同的语法点，方便以后查看。<br>首先要明确两个概念：Shell脚本与Shell<br><a href=\"https://zh.wikipedia.org/wiki/Shell%E8%84%9A%E6%9C%AC\"><strong>Shell script（shell 脚本）</strong></a>，是一种电脑程序与文本文件，内容由一连串的shell命令组成，经由Unix Shell直译其内容后运作。被当成是一种脚本语言来设计，其运作方式与直译语言相当，由Unix shell扮演命令行解释器的角色，在读取shell script之后，依序运行其中的shell命令，之后输出结果。<br><a href=\"https://zh.wikipedia.org/wiki/Shell%E8%84%9A%E6%9C%AC\"><strong>Shell</strong></a>,“为用户提供用户界面”的软件，通常指的是命令行界面的解析器。一般来说，这个词是指操作系统中，提供访问内核所提供之服务的程序。Shell也用于泛指所有为用户提供操作界面的程序，也就是程序和用户交互的层面。因此与之相对的是程序内核（Core），内核不提供和用户的交互功能。<br>我们一般称shell编程是指shell脚本的编程，不是指开发shell，这点概念要分清。</p>\n<h3 id=\"使用变量\"><a href=\"#使用变量\" class=\"headerlink\" title=\"使用变量\"></a>使用变量</h3><p>使用一个定义过的变量，只要在变量名前面加美元符号($)即可:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">your_name=<span class=\"string\">\"xianbo\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$your_name</span></div></pre></td></tr></table></figure></p>\n<p>执行的时候记得加上可执行权限<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod +x ./test.sh  <span class=\"comment\">#使脚本具有执行权限</span></div><div class=\"line\">./test.sh  <span class=\"comment\">#执行脚本</span></div></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>xianbo</p>\n<h3 id=\"获取字符串长度\"><a href=\"#获取字符串长度\" class=\"headerlink\" title=\"获取字符串长度\"></a>获取字符串长度</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">string=&quot;abcd&quot;</div><div class=\"line\">echo $&#123;#string&#125; #输出 4</div></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">my_array=(A B &quot;C&quot; D)</div><div class=\"line\">echo &quot;第一个元素为: $&#123;my_array[0]&#125;&quot;</div><div class=\"line\">echo &quot;第二个元素为: $&#123;my_array[1]&#125;&quot;</div><div class=\"line\">echo &quot;第三个元素为: $&#123;my_array[2]&#125;&quot;</div><div class=\"line\">echo &quot;第四个元素为: $&#123;my_array[3]&#125;&quot;</div></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<blockquote>\n<p>第一个元素为: A<br>第二个元素为: B<br>第三个元素为: C<br>第四个元素为: D</p>\n</blockquote>\n<h3 id=\"基本运算符\"><a href=\"#基本运算符\" class=\"headerlink\" title=\"基本运算符\"></a>基本运算符</h3><p>1.原生bash不支持简单的数学运算，但是可以通过其他命令来实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">val=`expr 2 + 2`</div><div class=\"line\">echo &quot;两数之和为 : $val&quot;</div><div class=\"line\">val=`expr $a \\* $b`</div><div class=\"line\">echo &quot;a * b : $val&quot;</div></pre></td></tr></table></figure></p>\n<p>运行结果:</p>\n<blockquote>\n<p>两数之和为 : 4<br>a <em> b : 200<br>这里要注意乘号</em>需要使用转移符</p>\n</blockquote>\n<p>2.使用方括号与美元符的方式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">a=$[2+2]</div><div class=\"line\">b=$[2 - 1]</div><div class=\"line\">c=$[2 / 2]</div><div class=\"line\">d=$[2 * 2]</div><div class=\"line\">echo $a $b $c $d</div></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>4 1 1 4<br>while语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">int=1</div><div class=\"line\">while(($int&lt;=5 ))</div><div class=\"line\">do</div><div class=\"line\">        echo $int</div><div class=\"line\">        let &quot;int++&quot;</div><div class=\"line\">done</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>运行结果：</p>\n<blockquote>\n<p>1<br>2<br>3<br>4<br>5</p>\n</blockquote>\n<h3 id=\"Shell函数\"><a href=\"#Shell函数\" class=\"headerlink\" title=\"Shell函数\"></a>Shell函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">funWithReturn()&#123;</div><div class=\"line\">    echo &quot;这个函数会对输入的两个数字进行相加运算...&quot;</div><div class=\"line\">    echo &quot;输入第一个数字: &quot;</div><div class=\"line\">    read aNum</div><div class=\"line\">    echo &quot;输入第二个数字: &quot;</div><div class=\"line\">    read anotherNum</div><div class=\"line\">    echo &quot;两个数字分别为 $aNum 和 $anotherNum !&quot;</div><div class=\"line\">    return $(($aNum+$anotherNum))</div><div class=\"line\">&#125;</div><div class=\"line\">funWithReturn</div><div class=\"line\">echo &quot;输入的两个数字之和为 $? !&quot;</div></pre></td></tr></table></figure>\n<p>运行结果:</p>\n<blockquote>\n<p>这个函数会对输入的两个数字进行相加运算…<br>输入第一个数字:<br>1<br>输入第二个数字:<br>3<br>两个数字分别为 1 和 3 !<br>输入的两个数字之和为 4 !</p>\n</blockquote>\n<p><strong>说明：</strong></p>\n<ul>\n<li>可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</li>\n<li>参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。</li>\n<li>函数返回值在调用该函数后通过 $? 来获得。</li>\n<li>所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</li>\n</ul>\n<h3 id=\"参数函数\"><a href=\"#参数函数\" class=\"headerlink\" title=\"参数函数\"></a>参数函数</h3><p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过$n的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…以此类推<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">funWithParam()&#123;</div><div class=\"line\">    echo &quot;第一个参数为 $1 !&quot;</div><div class=\"line\">    echo &quot;第二个参数为 $2 !&quot;</div><div class=\"line\">    echo &quot;第十个参数为 $10 !&quot;</div><div class=\"line\">    echo &quot;第十个参数为 $&#123;10&#125; !&quot;</div><div class=\"line\">    echo &quot;第十一个参数为 $&#123;11&#125; !&quot;</div><div class=\"line\">    echo &quot;参数总数有 $# 个!&quot;</div><div class=\"line\">    echo &quot;作为一个字符串输出所有参数 $* !&quot;</div><div class=\"line\">&#125;</div><div class=\"line\">funWithParam 1 2 3 4 5 6 7 8 9 34 73</div></pre></td></tr></table></figure></p>\n<p>运行结果：</p>\n<blockquote>\n<p>第一个参数为 1 !<br>第二个参数为 2 !<br>第十个参数为 10 !<br>第十个参数为 34 !<br>第十一个参数为 73 !<br>参数总数有 11 个!<br>作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !</p>\n</blockquote>\n<h3 id=\"IO重定向\"><a href=\"#IO重定向\" class=\"headerlink\" title=\"IO重定向\"></a>IO重定向</h3><p>>为输出流<br>>&gt;为不覆盖的输出流<br>&lt; 、&lt;&lt;为输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;IO test&quot; &gt; test0728</div></pre></td></tr></table></figure></p>\n<p>执行后，生成test0728文件，文件内容为：</p>\n<blockquote>\n<p>IO test</p>\n</blockquote>\n<p>需要注意的是文件描述符:<br>0通常是标准输入（STDIN）,1是标准输出（STDOUT）,2是标准错误输出（STDERR）。<br>像在Android中常用的编译命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make -j8 2&gt;&amp;1 | tee build.log</div></pre></td></tr></table></figure></p>\n<p>2是标准错误，&amp;1是标准输出，2&gt;&amp;1意思就是将标准错误输出到标准输出中。<br>如果没有2&gt;&amp;1,只会有标准输出，没有错误；<br>tee的作用同时输出到控制台和文件<br>make &gt; build.log  是将所有标准输出到这个文件中，并没有定义标准错误应该是定义到了标准输出，也就是说如果make执行出现错误，那么就不会写到 build.log中，而是输出到屏幕上，<br>2&gt;&amp;1是错误和结果都重定向到build.log中！<br>最后可以到根目录看到 build.log</p>\n"},{"title":"Hello World(搭建问题解答）","date":"2016-07-10T05:55:57.000Z","_content":"### 欢迎来到陈贤波的个人博客\n\n\n本博客系统是利用hexo与github搭建而成，网上有很多总结的很少的搭建教程，就不在此赘述，感兴趣的话可以自行百度相关关键字即可，这里只介绍几个搭建时候我说遇到的问题，希望可以给大家一点帮助。\n\n\n### SSH\n本地生成SSH并将id_rsa.pub添加到github后，连接服务器却报：\n\nAgent admitted failure to sign using the key\n\n错误。出现这种情况可能所由于本地未刷新，执行命令：\n\n``` bash\n$ ssh-add\n```\n即可。\n\n\n### 安装node.js\n由于网络的原因，网上给出的很对node.js资源连接不上，这里给出一个下载相对比较快的资源，依次执行命令：\n``` bash\n$ sudo add-apt-repository ppa:chris-lea/node.js\n$ sudo apt-get update\n$ sudo apt-get install nodejs\n```\n\n### 安装hexo\n安装hexo以官方介绍为准，部分博客给出的命令可能是因为hexo版本不同的问题产生异常的错误\n\n#### Installation\n```\n$ npm install hexo-cli -g\n```\n#### Quick Start\n\n##### Setup your blog\n```\n$ hexo init blog\n$ cd blog\n```\n##### Start the server\n```\n$ hexo server\n```\n##### Create a new post\n```\n$ hexo new \"Hello Hexo\"\n```\n##### Generate static files\n```\n$ hexo generate\n```\n[More info](https://github.com/hexojs/hexo)\n### hexo deply报错\nhexo 更新到3.0之后，deploy的type 的github需要改成git，并在deploy前执行命令：\n```\n$ npm install hexo-deployer-git --save\n```\n### hexo server 端口被占用\n执行更换端口的命令：\n```\nhexo s -p 5000 (-p 后接端口）\n```\n### 结束语\n如果是初次搭建，一路上会有很多坑，希望你能坚持下来，完成你的个人博客搭建，开启你的博客之旅！\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World(搭建问题解答）\ndate: 2016-07-10 13:55:57\ntags:\n  - hexo\n---\n### 欢迎来到陈贤波的个人博客\n\n\n本博客系统是利用hexo与github搭建而成，网上有很多总结的很少的搭建教程，就不在此赘述，感兴趣的话可以自行百度相关关键字即可，这里只介绍几个搭建时候我说遇到的问题，希望可以给大家一点帮助。\n\n\n### SSH\n本地生成SSH并将id_rsa.pub添加到github后，连接服务器却报：\n\nAgent admitted failure to sign using the key\n\n错误。出现这种情况可能所由于本地未刷新，执行命令：\n\n``` bash\n$ ssh-add\n```\n即可。\n\n\n### 安装node.js\n由于网络的原因，网上给出的很对node.js资源连接不上，这里给出一个下载相对比较快的资源，依次执行命令：\n``` bash\n$ sudo add-apt-repository ppa:chris-lea/node.js\n$ sudo apt-get update\n$ sudo apt-get install nodejs\n```\n\n### 安装hexo\n安装hexo以官方介绍为准，部分博客给出的命令可能是因为hexo版本不同的问题产生异常的错误\n\n#### Installation\n```\n$ npm install hexo-cli -g\n```\n#### Quick Start\n\n##### Setup your blog\n```\n$ hexo init blog\n$ cd blog\n```\n##### Start the server\n```\n$ hexo server\n```\n##### Create a new post\n```\n$ hexo new \"Hello Hexo\"\n```\n##### Generate static files\n```\n$ hexo generate\n```\n[More info](https://github.com/hexojs/hexo)\n### hexo deply报错\nhexo 更新到3.0之后，deploy的type 的github需要改成git，并在deploy前执行命令：\n```\n$ npm install hexo-deployer-git --save\n```\n### hexo server 端口被占用\n执行更换端口的命令：\n```\nhexo s -p 5000 (-p 后接端口）\n```\n### 结束语\n如果是初次搭建，一路上会有很多坑，希望你能坚持下来，完成你的个人博客搭建，开启你的博客之旅！\n\n","slug":"hello-world","published":1,"updated":"2016-08-31T07:05:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisimyty9000daojxy0r518vt","content":"<h3 id=\"欢迎来到陈贤波的个人博客\"><a href=\"#欢迎来到陈贤波的个人博客\" class=\"headerlink\" title=\"欢迎来到陈贤波的个人博客\"></a>欢迎来到陈贤波的个人博客</h3><p>本博客系统是利用hexo与github搭建而成，网上有很多总结的很少的搭建教程，就不在此赘述，感兴趣的话可以自行百度相关关键字即可，这里只介绍几个搭建时候我说遇到的问题，希望可以给大家一点帮助。</p>\n<h3 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h3><p>本地生成SSH并将id_rsa.pub添加到github后，连接服务器却报：</p>\n<p>Agent admitted failure to sign using the key</p>\n<p>错误。出现这种情况可能所由于本地未刷新，执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-add</div></pre></td></tr></table></figure>\n<p>即可。</p>\n<h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><p>由于网络的原因，网上给出的很对node.js资源连接不上，这里给出一个下载相对比较快的资源，依次执行命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo add-apt-repository ppa:chris-lea/node.js</div><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install nodejs</div></pre></td></tr></table></figure></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>安装hexo以官方介绍为准，部分博客给出的命令可能是因为hexo版本不同的问题产生异常的错误</p>\n<h4 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<h4 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h4><h5 id=\"Setup-your-blog\"><a href=\"#Setup-your-blog\" class=\"headerlink\" title=\"Setup your blog\"></a>Setup your blog</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init blog</div><div class=\"line\">$ cd blog</div></pre></td></tr></table></figure>\n<h5 id=\"Start-the-server\"><a href=\"#Start-the-server\" class=\"headerlink\" title=\"Start the server\"></a>Start the server</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<h5 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new &quot;Hello Hexo&quot;</div></pre></td></tr></table></figure>\n<h5 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"external\">More info</a></p>\n<h3 id=\"hexo-deply报错\"><a href=\"#hexo-deply报错\" class=\"headerlink\" title=\"hexo deply报错\"></a>hexo deply报错</h3><p>hexo 更新到3.0之后，deploy的type 的github需要改成git，并在deploy前执行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<h3 id=\"hexo-server-端口被占用\"><a href=\"#hexo-server-端口被占用\" class=\"headerlink\" title=\"hexo server 端口被占用\"></a>hexo server 端口被占用</h3><p>执行更换端口的命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s -p 5000 (-p 后接端口）</div></pre></td></tr></table></figure></p>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>如果是初次搭建，一路上会有很多坑，希望你能坚持下来，完成你的个人博客搭建，开启你的博客之旅！</p>\n","excerpt":"","more":"<h3 id=\"欢迎来到陈贤波的个人博客\"><a href=\"#欢迎来到陈贤波的个人博客\" class=\"headerlink\" title=\"欢迎来到陈贤波的个人博客\"></a>欢迎来到陈贤波的个人博客</h3><p>本博客系统是利用hexo与github搭建而成，网上有很多总结的很少的搭建教程，就不在此赘述，感兴趣的话可以自行百度相关关键字即可，这里只介绍几个搭建时候我说遇到的问题，希望可以给大家一点帮助。</p>\n<h3 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h3><p>本地生成SSH并将id_rsa.pub添加到github后，连接服务器却报：</p>\n<p>Agent admitted failure to sign using the key</p>\n<p>错误。出现这种情况可能所由于本地未刷新，执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-add</div></pre></td></tr></table></figure>\n<p>即可。</p>\n<h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><p>由于网络的原因，网上给出的很对node.js资源连接不上，这里给出一个下载相对比较快的资源，依次执行命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo add-apt-repository ppa:chris-lea/node.js</div><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install nodejs</div></pre></td></tr></table></figure></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>安装hexo以官方介绍为准，部分博客给出的命令可能是因为hexo版本不同的问题产生异常的错误</p>\n<h4 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<h4 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h4><h5 id=\"Setup-your-blog\"><a href=\"#Setup-your-blog\" class=\"headerlink\" title=\"Setup your blog\"></a>Setup your blog</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init blog</div><div class=\"line\">$ cd blog</div></pre></td></tr></table></figure>\n<h5 id=\"Start-the-server\"><a href=\"#Start-the-server\" class=\"headerlink\" title=\"Start the server\"></a>Start the server</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<h5 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new &quot;Hello Hexo&quot;</div></pre></td></tr></table></figure>\n<h5 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/hexojs/hexo\">More info</a></p>\n<h3 id=\"hexo-deply报错\"><a href=\"#hexo-deply报错\" class=\"headerlink\" title=\"hexo deply报错\"></a>hexo deply报错</h3><p>hexo 更新到3.0之后，deploy的type 的github需要改成git，并在deploy前执行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<h3 id=\"hexo-server-端口被占用\"><a href=\"#hexo-server-端口被占用\" class=\"headerlink\" title=\"hexo server 端口被占用\"></a>hexo server 端口被占用</h3><p>执行更换端口的命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s -p 5000 (-p 后接端口）</div></pre></td></tr></table></figure></p>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>如果是初次搭建，一路上会有很多坑，希望你能坚持下来，完成你的个人博客搭建，开启你的博客之旅！</p>\n"},{"title":"教你快刀斩乱麻般的抓住进程和线程的区别","date":"2016-08-14T08:55:13.000Z","_content":"\n相信大家学习操作系统时都书上看到了密密麻麻写的几张纸的进程与线程的关系的分析，但是初学者看完之后往往会感觉很乱，抓不住主要矛盾，这里就教你一针见血的指出进程（preocess)与线程(thread)的区别。\n</br>\n首先谷歌一下，看看国外的大牛都是怎么说的：\n\n![](https://raw.githubusercontent.com/XianboChen/MyBlog/master/picture/process_thread.PNG)\n</br>\n哈哈，看来大家都对这个问题很有兴趣啊，有很多的讨论帖子，这里选取两个贴上：\n\n> Both processes and threads are independent sequences of execution. The typical difference is that threads (of the same process) run in a shared memory space, while processes run in separate memory spaces.\n\n> Erlang uses the term \"process\" because it does not expose a shared-memory multiprogramming model. Calling them \"threads\" would imply that they have shared memory.\n\nhttp://stackoverflow.com/questions/200469/what-is-the-difference-between-a-process-and-a-thread\n\n> Processes vs Threads\n\n> A process is an executing instance of an application. What does that mean? Well, for example, when you double-click the Microsoft Word icon, you start a process that runs Word. A thread is a path of execution within a process. Also, a process can contain multiple threads. When you start Word, the operating system creates a process and begins executing the primary thread of that process.\n\n> It’s important to note that a thread can do anything a process can do. But since a process can consist of multiple threads, a thread could be considered a ‘lightweight’ process. Thus, the essential difference between a thread and a process is the work that each one is used to accomplish. Threads are used for small tasks, whereas processes are used for more ‘heavyweight’ tasks – basically the execution of applications.\n\n> Another difference between a thread and a process is that threads within the same process share the same address space, whereas different processes do not. This allows threads to read from and write to the same data structures and variables, and also facilitates communication between threads. Communication between processes – also known as IPC, or inter-process communication – is quite difficult and resource-intensive.\n\nhttp://www.programmerinterview.com/index.php/operating-systems/thread-vs-process/\n\n> Here is the analogy I use in Linux Kernel Development. Processes are the abstraction of running programs: A binary image, virtualized memory, various kernel resources, an associated security context, and so on. Threads are the unit of execution in a process: A virtualized processor, a stack, and program state. Put another way, processes are running binaries and threads are the smallest unit of execution schedulable by an operating system's process scheduler.\n\nhttps://www.quora.com/What-is-the-difference-between-a-process-and-a-thread\n\n好了，看到这里我觉得如果要我一针见血的指出进程与线程的区别，我觉得可以这么说：\n**线程是一种在同一进程中可以共享资源的轻量级（lightweight）进程**\n\n当然这是一种很浅白的说法，关于进程与线程的理解还有很多，大家可以自行google。不过我觉得对于一种模糊的概念应该首先快刀斩乱麻般的找到他们的痛点，那么接下来的研究就简单多了。\n\n这篇博客也对进程与线程做了形象的描述，大家也可以参考看下：\nhttp://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html\n\n下面这段话很好的说明了线程存在的意义：\n> What's the point? We obviously need processes. But why introduce the separate concept of a thread and allow multithreaded processes? There are four primary benefits to multithreading:\n\n>**Programming  abstraction**. Dividing up work and assigning each division to a unit of execution (a thread) is a natural approach to many problems. Programming patterns that utilize this approach include the reactor, thread-per-connection, and thread pool patterns. Some, however, view threads as an anti-pattern. The inimitable Alan Cox summed this up well with the quote, \"threads are for people who can't program state machines.\"\n**Parallelism**. In machines with multiple processors, threads provide an efficient way to achieve true parallelism. As each thread receives its own virtualized processor and is an independently-schedulable entity, multiple threads may run on multiple processors at the same time, improving a system's throughput. To the extent that threads are used to achieve parallelism—that is, there are no more threads than processors—the \"threads are for people who can't program state machines\" quote does not apply.\n**Blocking I/O**. Without threads, blocking I/O halts the whole process. This can be detrimental to both throughput and latency. In a multithreaded process, individual threads may block, waiting on I/O, while other threads make forward progress. Asynchronous & non-blocking I/O are alternative solutions to threads for this issue.\n**Memory savings**. Threads provide an efficient way to share memory yet utilize multiple units of execution. In this manner they are an alternative to multiple processes.\n\nhttps://www.quora.com/What-is-the-difference-between-a-process-and-a-thread\n\n\n\n\n\n","source":"_posts/教你快刀斩乱麻般的抓住进程和线程的区别.md","raw":"---\ntitle: 教你快刀斩乱麻般的抓住进程和线程的区别\ndate: 2016-08-14 16:55:13\ntags: \n  - 操作系统\n---\n\n相信大家学习操作系统时都书上看到了密密麻麻写的几张纸的进程与线程的关系的分析，但是初学者看完之后往往会感觉很乱，抓不住主要矛盾，这里就教你一针见血的指出进程（preocess)与线程(thread)的区别。\n</br>\n首先谷歌一下，看看国外的大牛都是怎么说的：\n\n![](https://raw.githubusercontent.com/XianboChen/MyBlog/master/picture/process_thread.PNG)\n</br>\n哈哈，看来大家都对这个问题很有兴趣啊，有很多的讨论帖子，这里选取两个贴上：\n\n> Both processes and threads are independent sequences of execution. The typical difference is that threads (of the same process) run in a shared memory space, while processes run in separate memory spaces.\n\n> Erlang uses the term \"process\" because it does not expose a shared-memory multiprogramming model. Calling them \"threads\" would imply that they have shared memory.\n\nhttp://stackoverflow.com/questions/200469/what-is-the-difference-between-a-process-and-a-thread\n\n> Processes vs Threads\n\n> A process is an executing instance of an application. What does that mean? Well, for example, when you double-click the Microsoft Word icon, you start a process that runs Word. A thread is a path of execution within a process. Also, a process can contain multiple threads. When you start Word, the operating system creates a process and begins executing the primary thread of that process.\n\n> It’s important to note that a thread can do anything a process can do. But since a process can consist of multiple threads, a thread could be considered a ‘lightweight’ process. Thus, the essential difference between a thread and a process is the work that each one is used to accomplish. Threads are used for small tasks, whereas processes are used for more ‘heavyweight’ tasks – basically the execution of applications.\n\n> Another difference between a thread and a process is that threads within the same process share the same address space, whereas different processes do not. This allows threads to read from and write to the same data structures and variables, and also facilitates communication between threads. Communication between processes – also known as IPC, or inter-process communication – is quite difficult and resource-intensive.\n\nhttp://www.programmerinterview.com/index.php/operating-systems/thread-vs-process/\n\n> Here is the analogy I use in Linux Kernel Development. Processes are the abstraction of running programs: A binary image, virtualized memory, various kernel resources, an associated security context, and so on. Threads are the unit of execution in a process: A virtualized processor, a stack, and program state. Put another way, processes are running binaries and threads are the smallest unit of execution schedulable by an operating system's process scheduler.\n\nhttps://www.quora.com/What-is-the-difference-between-a-process-and-a-thread\n\n好了，看到这里我觉得如果要我一针见血的指出进程与线程的区别，我觉得可以这么说：\n**线程是一种在同一进程中可以共享资源的轻量级（lightweight）进程**\n\n当然这是一种很浅白的说法，关于进程与线程的理解还有很多，大家可以自行google。不过我觉得对于一种模糊的概念应该首先快刀斩乱麻般的找到他们的痛点，那么接下来的研究就简单多了。\n\n这篇博客也对进程与线程做了形象的描述，大家也可以参考看下：\nhttp://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html\n\n下面这段话很好的说明了线程存在的意义：\n> What's the point? We obviously need processes. But why introduce the separate concept of a thread and allow multithreaded processes? There are four primary benefits to multithreading:\n\n>**Programming  abstraction**. Dividing up work and assigning each division to a unit of execution (a thread) is a natural approach to many problems. Programming patterns that utilize this approach include the reactor, thread-per-connection, and thread pool patterns. Some, however, view threads as an anti-pattern. The inimitable Alan Cox summed this up well with the quote, \"threads are for people who can't program state machines.\"\n**Parallelism**. In machines with multiple processors, threads provide an efficient way to achieve true parallelism. As each thread receives its own virtualized processor and is an independently-schedulable entity, multiple threads may run on multiple processors at the same time, improving a system's throughput. To the extent that threads are used to achieve parallelism—that is, there are no more threads than processors—the \"threads are for people who can't program state machines\" quote does not apply.\n**Blocking I/O**. Without threads, blocking I/O halts the whole process. This can be detrimental to both throughput and latency. In a multithreaded process, individual threads may block, waiting on I/O, while other threads make forward progress. Asynchronous & non-blocking I/O are alternative solutions to threads for this issue.\n**Memory savings**. Threads provide an efficient way to share memory yet utilize multiple units of execution. In this manner they are an alternative to multiple processes.\n\nhttps://www.quora.com/What-is-the-difference-between-a-process-and-a-thread\n\n\n\n\n\n","slug":"教你快刀斩乱麻般的抓住进程和线程的区别","published":1,"updated":"2016-08-31T07:05:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisimytyc000gaojxqlyn8h4d","content":"<p>相信大家学习操作系统时都书上看到了密密麻麻写的几张纸的进程与线程的关系的分析，但是初学者看完之后往往会感觉很乱，抓不住主要矛盾，这里就教你一针见血的指出进程（preocess)与线程(thread)的区别。<br><br><br>首先谷歌一下，看看国外的大牛都是怎么说的：</p>\n<p><img src=\"https://raw.githubusercontent.com/XianboChen/MyBlog/master/picture/process_thread.PNG\" alt=\"\"><br><br><br>哈哈，看来大家都对这个问题很有兴趣啊，有很多的讨论帖子，这里选取两个贴上：</p>\n<blockquote>\n<p>Both processes and threads are independent sequences of execution. The typical difference is that threads (of the same process) run in a shared memory space, while processes run in separate memory spaces.</p>\n<p>Erlang uses the term “process” because it does not expose a shared-memory multiprogramming model. Calling them “threads” would imply that they have shared memory.</p>\n</blockquote>\n<p><a href=\"http://stackoverflow.com/questions/200469/what-is-the-difference-between-a-process-and-a-thread\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/200469/what-is-the-difference-between-a-process-and-a-thread</a></p>\n<blockquote>\n<p>Processes vs Threads</p>\n<p>A process is an executing instance of an application. What does that mean? Well, for example, when you double-click the Microsoft Word icon, you start a process that runs Word. A thread is a path of execution within a process. Also, a process can contain multiple threads. When you start Word, the operating system creates a process and begins executing the primary thread of that process.</p>\n<p>It’s important to note that a thread can do anything a process can do. But since a process can consist of multiple threads, a thread could be considered a ‘lightweight’ process. Thus, the essential difference between a thread and a process is the work that each one is used to accomplish. Threads are used for small tasks, whereas processes are used for more ‘heavyweight’ tasks – basically the execution of applications.</p>\n<p>Another difference between a thread and a process is that threads within the same process share the same address space, whereas different processes do not. This allows threads to read from and write to the same data structures and variables, and also facilitates communication between threads. Communication between processes – also known as IPC, or inter-process communication – is quite difficult and resource-intensive.</p>\n</blockquote>\n<p><a href=\"http://www.programmerinterview.com/index.php/operating-systems/thread-vs-process/\" target=\"_blank\" rel=\"external\">http://www.programmerinterview.com/index.php/operating-systems/thread-vs-process/</a></p>\n<blockquote>\n<p>Here is the analogy I use in Linux Kernel Development. Processes are the abstraction of running programs: A binary image, virtualized memory, various kernel resources, an associated security context, and so on. Threads are the unit of execution in a process: A virtualized processor, a stack, and program state. Put another way, processes are running binaries and threads are the smallest unit of execution schedulable by an operating system’s process scheduler.</p>\n</blockquote>\n<p><a href=\"https://www.quora.com/What-is-the-difference-between-a-process-and-a-thread\" target=\"_blank\" rel=\"external\">https://www.quora.com/What-is-the-difference-between-a-process-and-a-thread</a></p>\n<p>好了，看到这里我觉得如果要我一针见血的指出进程与线程的区别，我觉得可以这么说：<br><strong>线程是一种在同一进程中可以共享资源的轻量级（lightweight）进程</strong></p>\n<p>当然这是一种很浅白的说法，关于进程与线程的理解还有很多，大家可以自行google。不过我觉得对于一种模糊的概念应该首先快刀斩乱麻般的找到他们的痛点，那么接下来的研究就简单多了。</p>\n<p>这篇博客也对进程与线程做了形象的描述，大家也可以参考看下：<br><a href=\"http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html</a></p>\n<p>下面这段话很好的说明了线程存在的意义：</p>\n<blockquote>\n<p>What’s the point? We obviously need processes. But why introduce the separate concept of a thread and allow multithreaded processes? There are four primary benefits to multithreading:</p>\n<p><strong>Programming  abstraction</strong>. Dividing up work and assigning each division to a unit of execution (a thread) is a natural approach to many problems. Programming patterns that utilize this approach include the reactor, thread-per-connection, and thread pool patterns. Some, however, view threads as an anti-pattern. The inimitable Alan Cox summed this up well with the quote, “threads are for people who can’t program state machines.”<br><strong>Parallelism</strong>. In machines with multiple processors, threads provide an efficient way to achieve true parallelism. As each thread receives its own virtualized processor and is an independently-schedulable entity, multiple threads may run on multiple processors at the same time, improving a system’s throughput. To the extent that threads are used to achieve parallelism—that is, there are no more threads than processors—the “threads are for people who can’t program state machines” quote does not apply.<br><strong>Blocking I/O</strong>. Without threads, blocking I/O halts the whole process. This can be detrimental to both throughput and latency. In a multithreaded process, individual threads may block, waiting on I/O, while other threads make forward progress. Asynchronous &amp; non-blocking I/O are alternative solutions to threads for this issue.<br><strong>Memory savings</strong>. Threads provide an efficient way to share memory yet utilize multiple units of execution. In this manner they are an alternative to multiple processes.</p>\n</blockquote>\n<p><a href=\"https://www.quora.com/What-is-the-difference-between-a-process-and-a-thread\" target=\"_blank\" rel=\"external\">https://www.quora.com/What-is-the-difference-between-a-process-and-a-thread</a></p>\n","excerpt":"","more":"<p>相信大家学习操作系统时都书上看到了密密麻麻写的几张纸的进程与线程的关系的分析，但是初学者看完之后往往会感觉很乱，抓不住主要矛盾，这里就教你一针见血的指出进程（preocess)与线程(thread)的区别。<br></br><br>首先谷歌一下，看看国外的大牛都是怎么说的：</p>\n<p><img src=\"https://raw.githubusercontent.com/XianboChen/MyBlog/master/picture/process_thread.PNG\" alt=\"\"><br></br><br>哈哈，看来大家都对这个问题很有兴趣啊，有很多的讨论帖子，这里选取两个贴上：</p>\n<blockquote>\n<p>Both processes and threads are independent sequences of execution. The typical difference is that threads (of the same process) run in a shared memory space, while processes run in separate memory spaces.</p>\n<p>Erlang uses the term “process” because it does not expose a shared-memory multiprogramming model. Calling them “threads” would imply that they have shared memory.</p>\n</blockquote>\n<p><a href=\"http://stackoverflow.com/questions/200469/what-is-the-difference-between-a-process-and-a-thread\">http://stackoverflow.com/questions/200469/what-is-the-difference-between-a-process-and-a-thread</a></p>\n<blockquote>\n<p>Processes vs Threads</p>\n<p>A process is an executing instance of an application. What does that mean? Well, for example, when you double-click the Microsoft Word icon, you start a process that runs Word. A thread is a path of execution within a process. Also, a process can contain multiple threads. When you start Word, the operating system creates a process and begins executing the primary thread of that process.</p>\n<p>It’s important to note that a thread can do anything a process can do. But since a process can consist of multiple threads, a thread could be considered a ‘lightweight’ process. Thus, the essential difference between a thread and a process is the work that each one is used to accomplish. Threads are used for small tasks, whereas processes are used for more ‘heavyweight’ tasks – basically the execution of applications.</p>\n<p>Another difference between a thread and a process is that threads within the same process share the same address space, whereas different processes do not. This allows threads to read from and write to the same data structures and variables, and also facilitates communication between threads. Communication between processes – also known as IPC, or inter-process communication – is quite difficult and resource-intensive.</p>\n</blockquote>\n<p><a href=\"http://www.programmerinterview.com/index.php/operating-systems/thread-vs-process/\">http://www.programmerinterview.com/index.php/operating-systems/thread-vs-process/</a></p>\n<blockquote>\n<p>Here is the analogy I use in Linux Kernel Development. Processes are the abstraction of running programs: A binary image, virtualized memory, various kernel resources, an associated security context, and so on. Threads are the unit of execution in a process: A virtualized processor, a stack, and program state. Put another way, processes are running binaries and threads are the smallest unit of execution schedulable by an operating system’s process scheduler.</p>\n</blockquote>\n<p><a href=\"https://www.quora.com/What-is-the-difference-between-a-process-and-a-thread\">https://www.quora.com/What-is-the-difference-between-a-process-and-a-thread</a></p>\n<p>好了，看到这里我觉得如果要我一针见血的指出进程与线程的区别，我觉得可以这么说：<br><strong>线程是一种在同一进程中可以共享资源的轻量级（lightweight）进程</strong></p>\n<p>当然这是一种很浅白的说法，关于进程与线程的理解还有很多，大家可以自行google。不过我觉得对于一种模糊的概念应该首先快刀斩乱麻般的找到他们的痛点，那么接下来的研究就简单多了。</p>\n<p>这篇博客也对进程与线程做了形象的描述，大家也可以参考看下：<br><a href=\"http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html\">http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html</a></p>\n<p>下面这段话很好的说明了线程存在的意义：</p>\n<blockquote>\n<p>What’s the point? We obviously need processes. But why introduce the separate concept of a thread and allow multithreaded processes? There are four primary benefits to multithreading:</p>\n<p><strong>Programming  abstraction</strong>. Dividing up work and assigning each division to a unit of execution (a thread) is a natural approach to many problems. Programming patterns that utilize this approach include the reactor, thread-per-connection, and thread pool patterns. Some, however, view threads as an anti-pattern. The inimitable Alan Cox summed this up well with the quote, “threads are for people who can’t program state machines.”<br><strong>Parallelism</strong>. In machines with multiple processors, threads provide an efficient way to achieve true parallelism. As each thread receives its own virtualized processor and is an independently-schedulable entity, multiple threads may run on multiple processors at the same time, improving a system’s throughput. To the extent that threads are used to achieve parallelism—that is, there are no more threads than processors—the “threads are for people who can’t program state machines” quote does not apply.<br><strong>Blocking I/O</strong>. Without threads, blocking I/O halts the whole process. This can be detrimental to both throughput and latency. In a multithreaded process, individual threads may block, waiting on I/O, while other threads make forward progress. Asynchronous &amp; non-blocking I/O are alternative solutions to threads for this issue.<br><strong>Memory savings</strong>. Threads provide an efficient way to share memory yet utilize multiple units of execution. In this manner they are an alternative to multiple processes.</p>\n</blockquote>\n<p><a href=\"https://www.quora.com/What-is-the-difference-between-a-process-and-a-thread\">https://www.quora.com/What-is-the-difference-between-a-process-and-a-thread</a></p>\n"},{"title":"来电翻转静音与免提自动切换听筒功能的实现","date":"2016-08-20T05:55:57.000Z","_content":"在来电的过程中，我们往往会通过对sensor（传感器）的监听来实现一些手机状态的自动切换，这些功能的实现往往通过以下几个步骤:\n\n 1. 获得SensorManager并通过SensorManager取得某一具体需要的Sensor对象，并注册监听；\n 2. 重写其onSensorChanged(SensorEvent event)方法，在该方法中需要通过event对象获得sensor的具体数值，并需要对该数值进行判断，来确定是否满足我们预期进行功能或状态切换的条件，而这些条件即**sensor具体数值的确定**是整个功能实现的难点；\n 3. 在使用完后要对sensor进行解绑，因为sensor的开启将会十分耗电。\n \n## 来电翻转静音\n \n这段代码截取自 InCallActivity.java，这段代码实现了来电翻转静音的功能：\n\n``` java\n    private class SensorManagerHelper implements SensorEventListener { // 声明一个实现了SensorEventListener接口内部类\n        private SensorManager sensorManager;//一些变量的声明\n        private Sensor sensor;\n        private Context context;\n        private boolean isUpdate = true;\n        private int sensorStatusFlag = 1;\n        // TYPE_GRAVITY\n        private boolean upturn = false; // turn before\n        private boolean downturn = false; // turn after\n        // TYPE_ACCELEROMETER\n        private boolean screenUp = false;\n\n        public SensorManagerHelper(Context context) {//在构造方法中调用init()方法\n            super();\n            this.context = context;\n            init();\n        }\n\n        private void init() {\n            Log.d(this,\"SensorManagerHelper init\");\n            if (null == sensorManager) {\n                sensorManager = (SensorManager) context.getSystemService(Context.SENSOR_SERVICE);//取得SensorManager对象\n            }\n\n            if (null != sensorManager && null == sensor) {\n                sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);//优先选择ACCELEROMETERSensor（加速度传感器）\n                if (null == sensor) {\n                    sensor = sensorManager.getDefaultSensor(Sensor.TYPE_GRAVITY);//如果没有ACCELEROMETERSensor就尝试去获取GRAVITYSensor（重力传感器）\n                }\n            }\n            if (null != sensor) {//如果获取到了ACCELEROMETERSensor或者GRAVITYSensor 就讲标志位设为true并注册监听\n                isUpdate = true;\n                sensorManager.registerListener(this, sensor, SensorManager.SENSOR_DELAY_NORMAL);\n            }\n        }\n\n        public void onSensorChanged(SensorEvent event) {//重写onSensorChanged(SensorEvent event)方法\n            if (!isUpdate) { //如果在init()方法中没有获取到sensor或已经成功回调了一次change方法就直接跳出\n                return;\n            }\n\n            if (event.sensor.getType() == Sensor.TYPE_GRAVITY) {//change事件为GRAVITYSensor\n                float z = event.values[2];//获得Z轴方向上的重力加速度\n\n                if (z >= 8) {//当Z方向的值大于8时，（g约等于9.8），便认为是正面手机朝上的状态\n                    upturn = true;\n                }\n\n                if (upturn && (z <= -8)) {//反之则为认为手机翻转\n                    downturn = true;\n                }\n\n                if (downturn) {\n                    isUpdate = false;\n                    mute();//翻转则静音，调用mute（）方法\n                }\n                return;\n            }\n\n            if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {//为ACCELEROMETERSensro的情况\n                float x = event.values[0];\n                float y = event.values[1];\n                if (x > -1 && x < 1) {\n                    sensorStatusFlag = 0;\n                }\n                if (sensorStatusFlag == 0 && (x > 8 || x < -8 || y > 8 || y < -8)) {//这里这个判断的意思是，开始时手机为水平状态，X方向无重力加度度，当来电后，若用户翻转手机，在翻转过程中，必然会出现重力加速度全部分到X或Y轴的情况（可以拿手机自己演示一下）\n                    isUpdate = false;\n                    mute();\n                    sensorStatusFlag = 1;\n                }\n                return;\n            }\n        }\n\n        public void onAccuracyChanged(Sensor sensor, int accuracy) {\n        }\n\n        public void stopListen() {\n            if (null != sensorManager && null != sensor) {//先判断sensorManager和sensor是否为空，不空则解绑\n                sensorManager.unregisterListener(this);\n            }\n            upturn = false;\n            downturn = false;\n            screenUp = false;\n            isUpdate = true;\n            sensorStatusFlag = 1;\n        }\n\n        private void mute() {//调用TelecomManager中的silenceRinger()方法，实现静音\n            try {\n                getTelecomManager().silenceRinger();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n```\n\n>  　　　　　　　　　　　　![](http://www.android-doc.com/images/axis_device.png)\nThe X axis is horizontal and points to the right, the Y axis is vertical and points up and the Z axis points towards the outside of the front face of the screen. In this system, coordinates behind the screen have negative Z values.\n\nhttp://www.android-doc.com/reference/android/hardware/SensorEvent.html#values\n\n该内部类在onStart()方法中new出：\n\n``` java\n  protected void onStart() {\n        if (Log.DEBUG) Log.d(TAG, \"enter onStart()...\");\n        super.onStart();\n        if (isRotatingMuteSupport()) {//判断翻转静音功能的开关\n            mSensorManagerHelper = new SensorManagerHelper(getApplicationContext());\n        }\n        ...\n    }\n``` \n在onStop()方法中完成了解绑：\n``` java\nprotected void onStop() {\n        ...\n        if (null != mSensorManagerHelper) {\n            mSensorManagerHelper.stopListen();\n        }\n        ...\n    }\n```\n## 来电拿起接听自动切换话筒\n``` java\n    private class ExtraSensorManagerHelper implements SensorEventListener {\n        private SensorManager sensorManager;\n        private Sensor accelerOmeterSensor;\n        private Sensor proximitySensor;\n        private Context context;\n\n        private boolean isClear = false;\n        private float x = 0;\n        private float y = 0;\n        private float z = 0;\n\n        public void setAudioMode(int mode) {\n            Log.d(\"chenxianboExtra\", \"Sending new Audio Mode: \" + AudioState.audioRouteToString(mode));\n            TelecomAdapter.getInstance().setAudioRoute(mode);\n        }\n\n       ... //初始化等相同部分省略，不再赘述\n\n        public void onSensorChanged(SensorEvent event) {\n            Log.d(\"chenxianboExtra\",\"onSensorChangedEvent\");\n            if (event.sensor.getType() == Sensor.TYPE_PROXIMITY) {//首先判断是否贴近\n                    x = event.values[0];\n                    if (x == 0) {\n                      isClear = true;\n                    } else {\n                      isClear = false;\n                    }\n                }\n\n            if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {\n                    x = event.values[0];\n                    y = event.values[1];\n                    z = event.values[2];\n                    Log.d(\"chenxianboExtra\",\"Sensor.TYPE_ACCELEROMETER value \"  + x + y + z);\n\n            if (!isClear) {//如果未贴近耳朵则跳出该方法\n                    Log .d(\"chenxianboExtra\",\"!isClear\");\n                    return;\n                }\n            Log.d(\"chenxianboExtra\",\"isSpeakerPhone\" + isSpeakerPhone());\n            if (x < 9.0 && y > 4.0 && y < 8.2 && z > -0.8 && isSpeakerPhone()) {//当用户手机贴近了耳朵，并以一定的角度持手机时且当前为免提状态，则认为符合条件，切换为听筒状态\n                    setAudioMode(AudioState.ROUTE_EARPIECE);\n                }\n                    return;\n                }\n            }\n\n   ... //相同部分略\n}\n```\n如上文所述，在整个功能的实现中，难点在于对sensor数值的判断，我在写此功能时，通过不断模仿用户使用场景，并将sensor的值在log中打出，观察X、Y、Z轴的数值变换，以此来确定符合用户场景的特定sensor值。\n> \n08-10 17:54:47.930 D/InCall  ( 2107): chenxianboExtra - !isClear\n08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - onSensorChangedEvent\n08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - onSensorChanged  =============================================\n08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - event.sensor.getType() = 1\n08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - onSensorChanged  0.116 , 4.396 , 8.22\n08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - Sensor.TYPE_ACCELEROMETER value test0.1164.3968.22\n08-10 17:54:47.932 D/InCall  ( 2107): chenxianboExtra - !isClear\n08-10 17:54:47.932 D/InCall  ( 2107): chenxianboExtra - onSensorChangedEvent\n08-10 17:54:47.932 D/InCall  ( 2107): chenxianboExtra - onSensorChanged  =============================================\n08-10 17:54:47.932 D/SurfaceFlinger(  303): postEvent(1312, v/c=1032)\n08-10 17:54:47.932 D/SurfaceFlinger(  303): postEvent(303, v/c=5073)\n08-10 17:54:47.934 V/DisplayEventReceiver( 1312): call nativeScheduleVsync mReceiverPtr = 547378982528\n08-10 17:54:47.934 D/SurfaceFlinger(  303): requestNextVsync(1312)\n08-10 17:54:47.934 D/InCall  ( 2107): chenxianboExtra - event.sensor.getType() = 1\n08-10 17:54:47.935 D/InCall  ( 2107): chenxianboExtra - onSensorChanged  0.078 , 4.469 , 8.449\n>\n\n\n\n","source":"_posts/来电翻转静音与免提自动切换听筒功能的实现.md","raw":"---\ntitle: 来电翻转静音与免提自动切换听筒功能的实现\ndate: 2016-08-20 13:55:57\ntags:\n- Android\n---\n在来电的过程中，我们往往会通过对sensor（传感器）的监听来实现一些手机状态的自动切换，这些功能的实现往往通过以下几个步骤:\n\n 1. 获得SensorManager并通过SensorManager取得某一具体需要的Sensor对象，并注册监听；\n 2. 重写其onSensorChanged(SensorEvent event)方法，在该方法中需要通过event对象获得sensor的具体数值，并需要对该数值进行判断，来确定是否满足我们预期进行功能或状态切换的条件，而这些条件即**sensor具体数值的确定**是整个功能实现的难点；\n 3. 在使用完后要对sensor进行解绑，因为sensor的开启将会十分耗电。\n \n## 来电翻转静音\n \n这段代码截取自 InCallActivity.java，这段代码实现了来电翻转静音的功能：\n\n``` java\n    private class SensorManagerHelper implements SensorEventListener { // 声明一个实现了SensorEventListener接口内部类\n        private SensorManager sensorManager;//一些变量的声明\n        private Sensor sensor;\n        private Context context;\n        private boolean isUpdate = true;\n        private int sensorStatusFlag = 1;\n        // TYPE_GRAVITY\n        private boolean upturn = false; // turn before\n        private boolean downturn = false; // turn after\n        // TYPE_ACCELEROMETER\n        private boolean screenUp = false;\n\n        public SensorManagerHelper(Context context) {//在构造方法中调用init()方法\n            super();\n            this.context = context;\n            init();\n        }\n\n        private void init() {\n            Log.d(this,\"SensorManagerHelper init\");\n            if (null == sensorManager) {\n                sensorManager = (SensorManager) context.getSystemService(Context.SENSOR_SERVICE);//取得SensorManager对象\n            }\n\n            if (null != sensorManager && null == sensor) {\n                sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);//优先选择ACCELEROMETERSensor（加速度传感器）\n                if (null == sensor) {\n                    sensor = sensorManager.getDefaultSensor(Sensor.TYPE_GRAVITY);//如果没有ACCELEROMETERSensor就尝试去获取GRAVITYSensor（重力传感器）\n                }\n            }\n            if (null != sensor) {//如果获取到了ACCELEROMETERSensor或者GRAVITYSensor 就讲标志位设为true并注册监听\n                isUpdate = true;\n                sensorManager.registerListener(this, sensor, SensorManager.SENSOR_DELAY_NORMAL);\n            }\n        }\n\n        public void onSensorChanged(SensorEvent event) {//重写onSensorChanged(SensorEvent event)方法\n            if (!isUpdate) { //如果在init()方法中没有获取到sensor或已经成功回调了一次change方法就直接跳出\n                return;\n            }\n\n            if (event.sensor.getType() == Sensor.TYPE_GRAVITY) {//change事件为GRAVITYSensor\n                float z = event.values[2];//获得Z轴方向上的重力加速度\n\n                if (z >= 8) {//当Z方向的值大于8时，（g约等于9.8），便认为是正面手机朝上的状态\n                    upturn = true;\n                }\n\n                if (upturn && (z <= -8)) {//反之则为认为手机翻转\n                    downturn = true;\n                }\n\n                if (downturn) {\n                    isUpdate = false;\n                    mute();//翻转则静音，调用mute（）方法\n                }\n                return;\n            }\n\n            if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {//为ACCELEROMETERSensro的情况\n                float x = event.values[0];\n                float y = event.values[1];\n                if (x > -1 && x < 1) {\n                    sensorStatusFlag = 0;\n                }\n                if (sensorStatusFlag == 0 && (x > 8 || x < -8 || y > 8 || y < -8)) {//这里这个判断的意思是，开始时手机为水平状态，X方向无重力加度度，当来电后，若用户翻转手机，在翻转过程中，必然会出现重力加速度全部分到X或Y轴的情况（可以拿手机自己演示一下）\n                    isUpdate = false;\n                    mute();\n                    sensorStatusFlag = 1;\n                }\n                return;\n            }\n        }\n\n        public void onAccuracyChanged(Sensor sensor, int accuracy) {\n        }\n\n        public void stopListen() {\n            if (null != sensorManager && null != sensor) {//先判断sensorManager和sensor是否为空，不空则解绑\n                sensorManager.unregisterListener(this);\n            }\n            upturn = false;\n            downturn = false;\n            screenUp = false;\n            isUpdate = true;\n            sensorStatusFlag = 1;\n        }\n\n        private void mute() {//调用TelecomManager中的silenceRinger()方法，实现静音\n            try {\n                getTelecomManager().silenceRinger();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n```\n\n>  　　　　　　　　　　　　![](http://www.android-doc.com/images/axis_device.png)\nThe X axis is horizontal and points to the right, the Y axis is vertical and points up and the Z axis points towards the outside of the front face of the screen. In this system, coordinates behind the screen have negative Z values.\n\nhttp://www.android-doc.com/reference/android/hardware/SensorEvent.html#values\n\n该内部类在onStart()方法中new出：\n\n``` java\n  protected void onStart() {\n        if (Log.DEBUG) Log.d(TAG, \"enter onStart()...\");\n        super.onStart();\n        if (isRotatingMuteSupport()) {//判断翻转静音功能的开关\n            mSensorManagerHelper = new SensorManagerHelper(getApplicationContext());\n        }\n        ...\n    }\n``` \n在onStop()方法中完成了解绑：\n``` java\nprotected void onStop() {\n        ...\n        if (null != mSensorManagerHelper) {\n            mSensorManagerHelper.stopListen();\n        }\n        ...\n    }\n```\n## 来电拿起接听自动切换话筒\n``` java\n    private class ExtraSensorManagerHelper implements SensorEventListener {\n        private SensorManager sensorManager;\n        private Sensor accelerOmeterSensor;\n        private Sensor proximitySensor;\n        private Context context;\n\n        private boolean isClear = false;\n        private float x = 0;\n        private float y = 0;\n        private float z = 0;\n\n        public void setAudioMode(int mode) {\n            Log.d(\"chenxianboExtra\", \"Sending new Audio Mode: \" + AudioState.audioRouteToString(mode));\n            TelecomAdapter.getInstance().setAudioRoute(mode);\n        }\n\n       ... //初始化等相同部分省略，不再赘述\n\n        public void onSensorChanged(SensorEvent event) {\n            Log.d(\"chenxianboExtra\",\"onSensorChangedEvent\");\n            if (event.sensor.getType() == Sensor.TYPE_PROXIMITY) {//首先判断是否贴近\n                    x = event.values[0];\n                    if (x == 0) {\n                      isClear = true;\n                    } else {\n                      isClear = false;\n                    }\n                }\n\n            if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {\n                    x = event.values[0];\n                    y = event.values[1];\n                    z = event.values[2];\n                    Log.d(\"chenxianboExtra\",\"Sensor.TYPE_ACCELEROMETER value \"  + x + y + z);\n\n            if (!isClear) {//如果未贴近耳朵则跳出该方法\n                    Log .d(\"chenxianboExtra\",\"!isClear\");\n                    return;\n                }\n            Log.d(\"chenxianboExtra\",\"isSpeakerPhone\" + isSpeakerPhone());\n            if (x < 9.0 && y > 4.0 && y < 8.2 && z > -0.8 && isSpeakerPhone()) {//当用户手机贴近了耳朵，并以一定的角度持手机时且当前为免提状态，则认为符合条件，切换为听筒状态\n                    setAudioMode(AudioState.ROUTE_EARPIECE);\n                }\n                    return;\n                }\n            }\n\n   ... //相同部分略\n}\n```\n如上文所述，在整个功能的实现中，难点在于对sensor数值的判断，我在写此功能时，通过不断模仿用户使用场景，并将sensor的值在log中打出，观察X、Y、Z轴的数值变换，以此来确定符合用户场景的特定sensor值。\n> \n08-10 17:54:47.930 D/InCall  ( 2107): chenxianboExtra - !isClear\n08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - onSensorChangedEvent\n08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - onSensorChanged  =============================================\n08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - event.sensor.getType() = 1\n08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - onSensorChanged  0.116 , 4.396 , 8.22\n08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - Sensor.TYPE_ACCELEROMETER value test0.1164.3968.22\n08-10 17:54:47.932 D/InCall  ( 2107): chenxianboExtra - !isClear\n08-10 17:54:47.932 D/InCall  ( 2107): chenxianboExtra - onSensorChangedEvent\n08-10 17:54:47.932 D/InCall  ( 2107): chenxianboExtra - onSensorChanged  =============================================\n08-10 17:54:47.932 D/SurfaceFlinger(  303): postEvent(1312, v/c=1032)\n08-10 17:54:47.932 D/SurfaceFlinger(  303): postEvent(303, v/c=5073)\n08-10 17:54:47.934 V/DisplayEventReceiver( 1312): call nativeScheduleVsync mReceiverPtr = 547378982528\n08-10 17:54:47.934 D/SurfaceFlinger(  303): requestNextVsync(1312)\n08-10 17:54:47.934 D/InCall  ( 2107): chenxianboExtra - event.sensor.getType() = 1\n08-10 17:54:47.935 D/InCall  ( 2107): chenxianboExtra - onSensorChanged  0.078 , 4.469 , 8.449\n>\n\n\n\n","slug":"来电翻转静音与免提自动切换听筒功能的实现","published":1,"updated":"2016-08-31T07:05:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisimytye000jaojxjaa7rr5x","content":"<p>在来电的过程中，我们往往会通过对sensor（传感器）的监听来实现一些手机状态的自动切换，这些功能的实现往往通过以下几个步骤:</p>\n<ol>\n<li>获得SensorManager并通过SensorManager取得某一具体需要的Sensor对象，并注册监听；</li>\n<li>重写其onSensorChanged(SensorEvent event)方法，在该方法中需要通过event对象获得sensor的具体数值，并需要对该数值进行判断，来确定是否满足我们预期进行功能或状态切换的条件，而这些条件即<strong>sensor具体数值的确定</strong>是整个功能实现的难点；</li>\n<li>在使用完后要对sensor进行解绑，因为sensor的开启将会十分耗电。</li>\n</ol>\n<h2 id=\"来电翻转静音\"><a href=\"#来电翻转静音\" class=\"headerlink\" title=\"来电翻转静音\"></a>来电翻转静音</h2><p>这段代码截取自 InCallActivity.java，这段代码实现了来电翻转静音的功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SensorManagerHelper</span> <span class=\"keyword\">implements</span> <span class=\"title\">SensorEventListener</span> </span>&#123; <span class=\"comment\">// 声明一个实现了SensorEventListener接口内部类</span></div><div class=\"line\">    <span class=\"keyword\">private</span> SensorManager sensorManager;<span class=\"comment\">//一些变量的声明</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Sensor sensor;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context context;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isUpdate = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> sensorStatusFlag = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"comment\">// TYPE_GRAVITY</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> upturn = <span class=\"keyword\">false</span>; <span class=\"comment\">// turn before</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> downturn = <span class=\"keyword\">false</span>; <span class=\"comment\">// turn after</span></div><div class=\"line\">    <span class=\"comment\">// TYPE_ACCELEROMETER</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> screenUp = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SensorManagerHelper</span><span class=\"params\">(Context context)</span> </span>&#123;<span class=\"comment\">//在构造方法中调用init()方法</span></div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.context = context;</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Log.d(<span class=\"keyword\">this</span>,<span class=\"string\">\"SensorManagerHelper init\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == sensorManager) &#123;</div><div class=\"line\">            sensorManager = (SensorManager) context.getSystemService(Context.SENSOR_SERVICE);<span class=\"comment\">//取得SensorManager对象</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != sensorManager &amp;&amp; <span class=\"keyword\">null</span> == sensor) &#123;</div><div class=\"line\">            sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);<span class=\"comment\">//优先选择ACCELEROMETERSensor（加速度传感器）</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == sensor) &#123;</div><div class=\"line\">                sensor = sensorManager.getDefaultSensor(Sensor.TYPE_GRAVITY);<span class=\"comment\">//如果没有ACCELEROMETERSensor就尝试去获取GRAVITYSensor（重力传感器）</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != sensor) &#123;<span class=\"comment\">//如果获取到了ACCELEROMETERSensor或者GRAVITYSensor 就讲标志位设为true并注册监听</span></div><div class=\"line\">            isUpdate = <span class=\"keyword\">true</span>;</div><div class=\"line\">            sensorManager.registerListener(<span class=\"keyword\">this</span>, sensor, SensorManager.SENSOR_DELAY_NORMAL);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSensorChanged</span><span class=\"params\">(SensorEvent event)</span> </span>&#123;<span class=\"comment\">//重写onSensorChanged(SensorEvent event)方法</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!isUpdate) &#123; <span class=\"comment\">//如果在init()方法中没有获取到sensor或已经成功回调了一次change方法就直接跳出</span></div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (event.sensor.getType() == Sensor.TYPE_GRAVITY) &#123;<span class=\"comment\">//change事件为GRAVITYSensor</span></div><div class=\"line\">            <span class=\"keyword\">float</span> z = event.values[<span class=\"number\">2</span>];<span class=\"comment\">//获得Z轴方向上的重力加速度</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (z &gt;= <span class=\"number\">8</span>) &#123;<span class=\"comment\">//当Z方向的值大于8时，（g约等于9.8），便认为是正面手机朝上的状态</span></div><div class=\"line\">                upturn = <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (upturn &amp;&amp; (z &lt;= -<span class=\"number\">8</span>)) &#123;<span class=\"comment\">//反之则为认为手机翻转</span></div><div class=\"line\">                downturn = <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (downturn) &#123;</div><div class=\"line\">                isUpdate = <span class=\"keyword\">false</span>;</div><div class=\"line\">                mute();<span class=\"comment\">//翻转则静音，调用mute（）方法</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) &#123;<span class=\"comment\">//为ACCELEROMETERSensro的情况</span></div><div class=\"line\">            <span class=\"keyword\">float</span> x = event.values[<span class=\"number\">0</span>];</div><div class=\"line\">            <span class=\"keyword\">float</span> y = event.values[<span class=\"number\">1</span>];</div><div class=\"line\">            <span class=\"keyword\">if</span> (x &gt; -<span class=\"number\">1</span> &amp;&amp; x &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                sensorStatusFlag = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (sensorStatusFlag == <span class=\"number\">0</span> &amp;&amp; (x &gt; <span class=\"number\">8</span> || x &lt; -<span class=\"number\">8</span> || y &gt; <span class=\"number\">8</span> || y &lt; -<span class=\"number\">8</span>)) &#123;<span class=\"comment\">//这里这个判断的意思是，开始时手机为水平状态，X方向无重力加度度，当来电后，若用户翻转手机，在翻转过程中，必然会出现重力加速度全部分到X或Y轴的情况（可以拿手机自己演示一下）</span></div><div class=\"line\">                isUpdate = <span class=\"keyword\">false</span>;</div><div class=\"line\">                mute();</div><div class=\"line\">                sensorStatusFlag = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAccuracyChanged</span><span class=\"params\">(Sensor sensor, <span class=\"keyword\">int</span> accuracy)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stopListen</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != sensorManager &amp;&amp; <span class=\"keyword\">null</span> != sensor) &#123;<span class=\"comment\">//先判断sensorManager和sensor是否为空，不空则解绑</span></div><div class=\"line\">            sensorManager.unregisterListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        upturn = <span class=\"keyword\">false</span>;</div><div class=\"line\">        downturn = <span class=\"keyword\">false</span>;</div><div class=\"line\">        screenUp = <span class=\"keyword\">false</span>;</div><div class=\"line\">        isUpdate = <span class=\"keyword\">true</span>;</div><div class=\"line\">        sensorStatusFlag = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">mute</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//调用TelecomManager中的silenceRinger()方法，实现静音</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            getTelecomManager().silenceRinger();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p> 　　　　　　　　　　　　<img src=\"http://www.android-doc.com/images/axis_device.png\" alt=\"\"><br>The X axis is horizontal and points to the right, the Y axis is vertical and points up and the Z axis points towards the outside of the front face of the screen. In this system, coordinates behind the screen have negative Z values.</p>\n</blockquote>\n<p><a href=\"http://www.android-doc.com/reference/android/hardware/SensorEvent.html#values\" target=\"_blank\" rel=\"external\">http://www.android-doc.com/reference/android/hardware/SensorEvent.html#values</a></p>\n<p>该内部类在onStart()方法中new出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Log.DEBUG) Log.d(TAG, <span class=\"string\">\"enter onStart()...\"</span>);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onStart();</div><div class=\"line\">        <span class=\"keyword\">if</span> (isRotatingMuteSupport()) &#123;<span class=\"comment\">//判断翻转静音功能的开关</span></div><div class=\"line\">            mSensorManagerHelper = <span class=\"keyword\">new</span> SensorManagerHelper(getApplicationContext());</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">``` </div><div class=\"line\">在onStop()方法中完成了解绑：</div><div class=\"line\">``` <span class=\"function\">java</span></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> &#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mSensorManagerHelper) &#123;</div><div class=\"line\">            mSensorManagerHelper.stopListen();</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"来电拿起接听自动切换话筒\"><a href=\"#来电拿起接听自动切换话筒\" class=\"headerlink\" title=\"来电拿起接听自动切换话筒\"></a>来电拿起接听自动切换话筒</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExtraSensorManagerHelper</span> <span class=\"keyword\">implements</span> <span class=\"title\">SensorEventListener</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> SensorManager sensorManager;</div><div class=\"line\">        <span class=\"keyword\">private</span> Sensor accelerOmeterSensor;</div><div class=\"line\">        <span class=\"keyword\">private</span> Sensor proximitySensor;</div><div class=\"line\">        <span class=\"keyword\">private</span> Context context;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isClear = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> x = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> y = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> z = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAudioMode</span><span class=\"params\">(<span class=\"keyword\">int</span> mode)</span> </span>&#123;</div><div class=\"line\">            Log.d(<span class=\"string\">\"chenxianboExtra\"</span>, <span class=\"string\">\"Sending new Audio Mode: \"</span> + AudioState.audioRouteToString(mode));</div><div class=\"line\">            TelecomAdapter.getInstance().setAudioRoute(mode);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">       ... <span class=\"comment\">//初始化等相同部分省略，不再赘述</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSensorChanged</span><span class=\"params\">(SensorEvent event)</span> </span>&#123;</div><div class=\"line\">            Log.d(<span class=\"string\">\"chenxianboExtra\"</span>,<span class=\"string\">\"onSensorChangedEvent\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (event.sensor.getType() == Sensor.TYPE_PROXIMITY) &#123;<span class=\"comment\">//首先判断是否贴近</span></div><div class=\"line\">                    x = event.values[<span class=\"number\">0</span>];</div><div class=\"line\">                    <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                      isClear = <span class=\"keyword\">true</span>;</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                      isClear = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) &#123;</div><div class=\"line\">                    x = event.values[<span class=\"number\">0</span>];</div><div class=\"line\">                    y = event.values[<span class=\"number\">1</span>];</div><div class=\"line\">                    z = event.values[<span class=\"number\">2</span>];</div><div class=\"line\">                    Log.d(<span class=\"string\">\"chenxianboExtra\"</span>,<span class=\"string\">\"Sensor.TYPE_ACCELEROMETER value \"</span>  + x + y + z);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (!isClear) &#123;<span class=\"comment\">//如果未贴近耳朵则跳出该方法</span></div><div class=\"line\">                    Log .d(<span class=\"string\">\"chenxianboExtra\"</span>,<span class=\"string\">\"!isClear\"</span>);</div><div class=\"line\">                    <span class=\"keyword\">return</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            Log.d(<span class=\"string\">\"chenxianboExtra\"</span>,<span class=\"string\">\"isSpeakerPhone\"</span> + isSpeakerPhone());</div><div class=\"line\">            <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">9.0</span> &amp;&amp; y &gt; <span class=\"number\">4.0</span> &amp;&amp; y &lt; <span class=\"number\">8.2</span> &amp;&amp; z &gt; -<span class=\"number\">0.8</span> &amp;&amp; isSpeakerPhone()) &#123;<span class=\"comment\">//当用户手机贴近了耳朵，并以一定的角度持手机时且当前为免提状态，则认为符合条件，切换为听筒状态</span></div><div class=\"line\">                    setAudioMode(AudioState.ROUTE_EARPIECE);</div><div class=\"line\">                &#125;</div><div class=\"line\">                    <span class=\"keyword\">return</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">   ... <span class=\"comment\">//相同部分略</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如上文所述，在整个功能的实现中，难点在于对sensor数值的判断，我在写此功能时，通过不断模仿用户使用场景，并将sensor的值在log中打出，观察X、Y、Z轴的数值变换，以此来确定符合用户场景的特定sensor值。</p>\n<blockquote>\n<p>08-10 17:54:47.930 D/InCall  ( 2107): chenxianboExtra - !isClear<br>08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - onSensorChangedEvent<br>08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - onSensorChanged  =============================================<br>08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - event.sensor.getType() = 1<br>08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - onSensorChanged  0.116 , 4.396 , 8.22<br>08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - Sensor.TYPE_ACCELEROMETER value test0.1164.3968.22<br>08-10 17:54:47.932 D/InCall  ( 2107): chenxianboExtra - !isClear<br>08-10 17:54:47.932 D/InCall  ( 2107): chenxianboExtra - onSensorChangedEvent<br>08-10 17:54:47.932 D/InCall  ( 2107): chenxianboExtra - onSensorChanged  =============================================<br>08-10 17:54:47.932 D/SurfaceFlinger(  303): postEvent(1312, v/c=1032)<br>08-10 17:54:47.932 D/SurfaceFlinger(  303): postEvent(303, v/c=5073)<br>08-10 17:54:47.934 V/DisplayEventReceiver( 1312): call nativeScheduleVsync mReceiverPtr = 547378982528<br>08-10 17:54:47.934 D/SurfaceFlinger(  303): requestNextVsync(1312)<br>08-10 17:54:47.934 D/InCall  ( 2107): chenxianboExtra - event.sensor.getType() = 1<br>08-10 17:54:47.935 D/InCall  ( 2107): chenxianboExtra - onSensorChanged  0.078 , 4.469 , 8.449</p>\n</blockquote>\n","excerpt":"","more":"<p>在来电的过程中，我们往往会通过对sensor（传感器）的监听来实现一些手机状态的自动切换，这些功能的实现往往通过以下几个步骤:</p>\n<ol>\n<li>获得SensorManager并通过SensorManager取得某一具体需要的Sensor对象，并注册监听；</li>\n<li>重写其onSensorChanged(SensorEvent event)方法，在该方法中需要通过event对象获得sensor的具体数值，并需要对该数值进行判断，来确定是否满足我们预期进行功能或状态切换的条件，而这些条件即<strong>sensor具体数值的确定</strong>是整个功能实现的难点；</li>\n<li>在使用完后要对sensor进行解绑，因为sensor的开启将会十分耗电。</li>\n</ol>\n<h2 id=\"来电翻转静音\"><a href=\"#来电翻转静音\" class=\"headerlink\" title=\"来电翻转静音\"></a>来电翻转静音</h2><p>这段代码截取自 InCallActivity.java，这段代码实现了来电翻转静音的功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SensorManagerHelper</span> <span class=\"keyword\">implements</span> <span class=\"title\">SensorEventListener</span> </span>&#123; <span class=\"comment\">// 声明一个实现了SensorEventListener接口内部类</span></div><div class=\"line\">    <span class=\"keyword\">private</span> SensorManager sensorManager;<span class=\"comment\">//一些变量的声明</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Sensor sensor;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context context;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isUpdate = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> sensorStatusFlag = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"comment\">// TYPE_GRAVITY</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> upturn = <span class=\"keyword\">false</span>; <span class=\"comment\">// turn before</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> downturn = <span class=\"keyword\">false</span>; <span class=\"comment\">// turn after</span></div><div class=\"line\">    <span class=\"comment\">// TYPE_ACCELEROMETER</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> screenUp = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SensorManagerHelper</span><span class=\"params\">(Context context)</span> </span>&#123;<span class=\"comment\">//在构造方法中调用init()方法</span></div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.context = context;</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Log.d(<span class=\"keyword\">this</span>,<span class=\"string\">\"SensorManagerHelper init\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == sensorManager) &#123;</div><div class=\"line\">            sensorManager = (SensorManager) context.getSystemService(Context.SENSOR_SERVICE);<span class=\"comment\">//取得SensorManager对象</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != sensorManager &amp;&amp; <span class=\"keyword\">null</span> == sensor) &#123;</div><div class=\"line\">            sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);<span class=\"comment\">//优先选择ACCELEROMETERSensor（加速度传感器）</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == sensor) &#123;</div><div class=\"line\">                sensor = sensorManager.getDefaultSensor(Sensor.TYPE_GRAVITY);<span class=\"comment\">//如果没有ACCELEROMETERSensor就尝试去获取GRAVITYSensor（重力传感器）</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != sensor) &#123;<span class=\"comment\">//如果获取到了ACCELEROMETERSensor或者GRAVITYSensor 就讲标志位设为true并注册监听</span></div><div class=\"line\">            isUpdate = <span class=\"keyword\">true</span>;</div><div class=\"line\">            sensorManager.registerListener(<span class=\"keyword\">this</span>, sensor, SensorManager.SENSOR_DELAY_NORMAL);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSensorChanged</span><span class=\"params\">(SensorEvent event)</span> </span>&#123;<span class=\"comment\">//重写onSensorChanged(SensorEvent event)方法</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!isUpdate) &#123; <span class=\"comment\">//如果在init()方法中没有获取到sensor或已经成功回调了一次change方法就直接跳出</span></div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (event.sensor.getType() == Sensor.TYPE_GRAVITY) &#123;<span class=\"comment\">//change事件为GRAVITYSensor</span></div><div class=\"line\">            <span class=\"keyword\">float</span> z = event.values[<span class=\"number\">2</span>];<span class=\"comment\">//获得Z轴方向上的重力加速度</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (z &gt;= <span class=\"number\">8</span>) &#123;<span class=\"comment\">//当Z方向的值大于8时，（g约等于9.8），便认为是正面手机朝上的状态</span></div><div class=\"line\">                upturn = <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (upturn &amp;&amp; (z &lt;= -<span class=\"number\">8</span>)) &#123;<span class=\"comment\">//反之则为认为手机翻转</span></div><div class=\"line\">                downturn = <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (downturn) &#123;</div><div class=\"line\">                isUpdate = <span class=\"keyword\">false</span>;</div><div class=\"line\">                mute();<span class=\"comment\">//翻转则静音，调用mute（）方法</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) &#123;<span class=\"comment\">//为ACCELEROMETERSensro的情况</span></div><div class=\"line\">            <span class=\"keyword\">float</span> x = event.values[<span class=\"number\">0</span>];</div><div class=\"line\">            <span class=\"keyword\">float</span> y = event.values[<span class=\"number\">1</span>];</div><div class=\"line\">            <span class=\"keyword\">if</span> (x &gt; -<span class=\"number\">1</span> &amp;&amp; x &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                sensorStatusFlag = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (sensorStatusFlag == <span class=\"number\">0</span> &amp;&amp; (x &gt; <span class=\"number\">8</span> || x &lt; -<span class=\"number\">8</span> || y &gt; <span class=\"number\">8</span> || y &lt; -<span class=\"number\">8</span>)) &#123;<span class=\"comment\">//这里这个判断的意思是，开始时手机为水平状态，X方向无重力加度度，当来电后，若用户翻转手机，在翻转过程中，必然会出现重力加速度全部分到X或Y轴的情况（可以拿手机自己演示一下）</span></div><div class=\"line\">                isUpdate = <span class=\"keyword\">false</span>;</div><div class=\"line\">                mute();</div><div class=\"line\">                sensorStatusFlag = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAccuracyChanged</span><span class=\"params\">(Sensor sensor, <span class=\"keyword\">int</span> accuracy)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stopListen</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != sensorManager &amp;&amp; <span class=\"keyword\">null</span> != sensor) &#123;<span class=\"comment\">//先判断sensorManager和sensor是否为空，不空则解绑</span></div><div class=\"line\">            sensorManager.unregisterListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        upturn = <span class=\"keyword\">false</span>;</div><div class=\"line\">        downturn = <span class=\"keyword\">false</span>;</div><div class=\"line\">        screenUp = <span class=\"keyword\">false</span>;</div><div class=\"line\">        isUpdate = <span class=\"keyword\">true</span>;</div><div class=\"line\">        sensorStatusFlag = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">mute</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//调用TelecomManager中的silenceRinger()方法，实现静音</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            getTelecomManager().silenceRinger();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p> 　　　　　　　　　　　　<img src=\"http://www.android-doc.com/images/axis_device.png\" alt=\"\"><br>The X axis is horizontal and points to the right, the Y axis is vertical and points up and the Z axis points towards the outside of the front face of the screen. In this system, coordinates behind the screen have negative Z values.</p>\n</blockquote>\n<p><a href=\"http://www.android-doc.com/reference/android/hardware/SensorEvent.html#values\">http://www.android-doc.com/reference/android/hardware/SensorEvent.html#values</a></p>\n<p>该内部类在onStart()方法中new出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Log.DEBUG) Log.d(TAG, <span class=\"string\">\"enter onStart()...\"</span>);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onStart();</div><div class=\"line\">        <span class=\"keyword\">if</span> (isRotatingMuteSupport()) &#123;<span class=\"comment\">//判断翻转静音功能的开关</span></div><div class=\"line\">            mSensorManagerHelper = <span class=\"keyword\">new</span> SensorManagerHelper(getApplicationContext());</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">``` </div><div class=\"line\">在onStop()方法中完成了解绑：</div><div class=\"line\">``` <span class=\"function\">java</div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mSensorManagerHelper) &#123;</div><div class=\"line\">            mSensorManagerHelper.stopListen();</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"来电拿起接听自动切换话筒\"><a href=\"#来电拿起接听自动切换话筒\" class=\"headerlink\" title=\"来电拿起接听自动切换话筒\"></a>来电拿起接听自动切换话筒</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExtraSensorManagerHelper</span> <span class=\"keyword\">implements</span> <span class=\"title\">SensorEventListener</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> SensorManager sensorManager;</div><div class=\"line\">        <span class=\"keyword\">private</span> Sensor accelerOmeterSensor;</div><div class=\"line\">        <span class=\"keyword\">private</span> Sensor proximitySensor;</div><div class=\"line\">        <span class=\"keyword\">private</span> Context context;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isClear = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> x = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> y = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> z = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAudioMode</span><span class=\"params\">(<span class=\"keyword\">int</span> mode)</span> </span>&#123;</div><div class=\"line\">            Log.d(<span class=\"string\">\"chenxianboExtra\"</span>, <span class=\"string\">\"Sending new Audio Mode: \"</span> + AudioState.audioRouteToString(mode));</div><div class=\"line\">            TelecomAdapter.getInstance().setAudioRoute(mode);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">       ... <span class=\"comment\">//初始化等相同部分省略，不再赘述</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSensorChanged</span><span class=\"params\">(SensorEvent event)</span> </span>&#123;</div><div class=\"line\">            Log.d(<span class=\"string\">\"chenxianboExtra\"</span>,<span class=\"string\">\"onSensorChangedEvent\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (event.sensor.getType() == Sensor.TYPE_PROXIMITY) &#123;<span class=\"comment\">//首先判断是否贴近</span></div><div class=\"line\">                    x = event.values[<span class=\"number\">0</span>];</div><div class=\"line\">                    <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                      isClear = <span class=\"keyword\">true</span>;</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                      isClear = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) &#123;</div><div class=\"line\">                    x = event.values[<span class=\"number\">0</span>];</div><div class=\"line\">                    y = event.values[<span class=\"number\">1</span>];</div><div class=\"line\">                    z = event.values[<span class=\"number\">2</span>];</div><div class=\"line\">                    Log.d(<span class=\"string\">\"chenxianboExtra\"</span>,<span class=\"string\">\"Sensor.TYPE_ACCELEROMETER value \"</span>  + x + y + z);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (!isClear) &#123;<span class=\"comment\">//如果未贴近耳朵则跳出该方法</span></div><div class=\"line\">                    Log .d(<span class=\"string\">\"chenxianboExtra\"</span>,<span class=\"string\">\"!isClear\"</span>);</div><div class=\"line\">                    <span class=\"keyword\">return</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            Log.d(<span class=\"string\">\"chenxianboExtra\"</span>,<span class=\"string\">\"isSpeakerPhone\"</span> + isSpeakerPhone());</div><div class=\"line\">            <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">9.0</span> &amp;&amp; y &gt; <span class=\"number\">4.0</span> &amp;&amp; y &lt; <span class=\"number\">8.2</span> &amp;&amp; z &gt; -<span class=\"number\">0.8</span> &amp;&amp; isSpeakerPhone()) &#123;<span class=\"comment\">//当用户手机贴近了耳朵，并以一定的角度持手机时且当前为免提状态，则认为符合条件，切换为听筒状态</span></div><div class=\"line\">                    setAudioMode(AudioState.ROUTE_EARPIECE);</div><div class=\"line\">                &#125;</div><div class=\"line\">                    <span class=\"keyword\">return</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">   ... <span class=\"comment\">//相同部分略</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如上文所述，在整个功能的实现中，难点在于对sensor数值的判断，我在写此功能时，通过不断模仿用户使用场景，并将sensor的值在log中打出，观察X、Y、Z轴的数值变换，以此来确定符合用户场景的特定sensor值。</p>\n<blockquote>\n<p>08-10 17:54:47.930 D/InCall  ( 2107): chenxianboExtra - !isClear<br>08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - onSensorChangedEvent<br>08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - onSensorChanged  =============================================<br>08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - event.sensor.getType() = 1<br>08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - onSensorChanged  0.116 , 4.396 , 8.22<br>08-10 17:54:47.931 D/InCall  ( 2107): chenxianboExtra - Sensor.TYPE_ACCELEROMETER value test0.1164.3968.22<br>08-10 17:54:47.932 D/InCall  ( 2107): chenxianboExtra - !isClear<br>08-10 17:54:47.932 D/InCall  ( 2107): chenxianboExtra - onSensorChangedEvent<br>08-10 17:54:47.932 D/InCall  ( 2107): chenxianboExtra - onSensorChanged  =============================================<br>08-10 17:54:47.932 D/SurfaceFlinger(  303): postEvent(1312, v/c=1032)<br>08-10 17:54:47.932 D/SurfaceFlinger(  303): postEvent(303, v/c=5073)<br>08-10 17:54:47.934 V/DisplayEventReceiver( 1312): call nativeScheduleVsync mReceiverPtr = 547378982528<br>08-10 17:54:47.934 D/SurfaceFlinger(  303): requestNextVsync(1312)<br>08-10 17:54:47.934 D/InCall  ( 2107): chenxianboExtra - event.sensor.getType() = 1<br>08-10 17:54:47.935 D/InCall  ( 2107): chenxianboExtra - onSensorChanged  0.078 , 4.469 , 8.449</p>\n</blockquote>\n"},{"title":"[转]Android编译系统的理解","date":"2016-08-20T10:45:52.000Z","_content":"Android编译系统庞大，想要理解还是要花点功夫的，今天看到篇不错的帖子，特此转载。\n### 简介\nAndroid Build 系统是用来编译 Android 系统，Android SDK 以及相关文档的一套框架。众所周知，Android 是一个开源的操作系统。Android 的源码中包含了许许多多的模块。 不同产商的不同设备对于 Android 系统的定制都是不一样的。如何将这些模块统一管理起来，如何能够在不同的操作系统上进行编译，如何在编译时能够支持面向不同的硬件设备，不同的编译类型，且还要提供面向各个产商的定制扩展，是非常有难度的。 但 Android Build 系统很好的解决了这些问题，这里面有很多值得我们开发人员学习的地方。对于 Android 平台开发人员来说，本文可以帮助你熟悉你每天接触到的构建环境。对于其他开发人员来说，本文可以作为一个 GNU Make的使用案例，学习这些成功案例，可以提升我们的开发经验。\n### 概述\nBuild 系统中最主要的处理逻辑都在 Make 文件中，而其他的脚本文件只是起到一些辅助作用，由于篇幅所限，本文只探讨 Make 文件中的内容。\n    整个 Build 系统中的 Make 文件可以分为三类：\n    第一类是 Build 系统核心文件\n    此类文件定义了整个 Build 系统的框架，而其他所有 Make 文件都是在这个框架的基础上编写出来的。\n\n图 1 是 Android 源码树的目录结构，Build 系统核心文件全部位于 /build/core（本文所提到的所有路径都是以 Android 源码树作为背景的，“/”指的是源码树的根目录，与文件系统无关）目录下。\n\n![](www.ibm.com/developerworks/cn/opensource/os-cn-android-build/image001.png)\n\n第二类是针对某个产品（一个产品可能是某个型号的手机或者平板电脑）的 Make 文件\n这些文件通常位于 device 目录下，该目录下又以公司名以及产品名分为两级目录，图 2 是 device 目录下子目录的结构。对于一个产品的定义通常需要一组文件，这些文件共同构成了对于这个产品的定义。例如，/device/sony/it26 目录下的文件共同构成了对于 Sony LT26 型号手机的定义\n![](http://www.ibm.com/developerworks/cn/opensource/os-cn-android-build/image002.png)\n第三类是针对某个模块（关于模块后文会详细讨论）的 Make 文件\n 整个系统中，包含了大量的模块，每个模块都有一个专门的 Make 文件，这类文件的名称统一为“Android.mk”，该文件中定义了如何编译当前模块。Build 系统会在整个源码树中扫描名称为“Android.mk”的文件并根据其中的内容执行模块的编译。\n### 编译Android系统\n#### 执行编译\n   Android 系统的编译环境目前只支持 Ubuntu 以及 Mac OS 两种操作系统。关于编译环境的构建方法请参见以下路径：http://source.android.com/source/initializing.html\n在完成编译环境的准备工作以及获取到完整的 Android 源码之后，想要编译出整个 Android 系统非常的容易：\n打开控制台之后转到 Android 源码的根目录，然后执行如清单 1\n\n所示的三条命令即可（\"$\"是命令提示符，不是命令的一部分。）：\n\n完整的编译时间依赖于编译主机的配置，在笔者的 Macbook Pro（OS X 10.8.2, i7 2G CPU，8G RAM, 120G SSD）上使用 8 个 Job 同时编译共需要一个半小时左右的时间。\n清单一：编译Android系统\n```\n $ source build/envsetup.sh \n $ lunch full-eng \n $ make -j8 \n```\n这三行命令的说明如下：\n\n第一行命令“source build/envsetup.sh”引入了 build/envsetup.sh脚本。该脚本的作用是初始化编译环境，并引入一些辅助的 Shell 函数，这其中就包括第二步使用 lunch 函数。\n\n除此之外，该文件中还定义了其他一些常用的函数，它们如表 1 所示：\n表一：build/envsetup.sh中定义的常用函数\n| 名称        | 说明         | \n| ------------- |-------------| \n|croot |\t切换到源码树的根目录|\n|m| \t在源码树的根目录执行 make|\n|mm \t|Build 当前目录下的模块|\n|mmm |\tBuild 指定目录下的模块|\n|cgrep |\t在所有 C/C++ 文件上执行 grep|\n|jgrep |\t在所有 Java 文件上执行 grep|\n|resgrep |\t在所有 res/*.xml 文件上执行 grep|\n|godir \t|转到包含某个文件的目录路径|\n|printconfig| \t显示当前 Build 的配置信息|\n|add_lunch_combo |\t在 lunch 函数的菜单中添加一个条目|\n\n第二行命令“lunch full-eng”是调用 lunch 函数，并指定参数为“full-eng”。lunch 函数的参数用来指定此次编译的目标设备以及编译类型。在这里，这两个值分别是“full”和“eng”。“full”是 Android 源码中已经定义好的一种产品，是为模拟器而设置的。而编译类型会影响最终系统中包含的模块，关于编译类型将在表 7 中详细讲解。\n\n如果调用 lunch 函数的时候没有指定参数，那么该函数将输出列表以供选择，该列表类似图 3 中的内容（列表的内容会根据当前 Build 系统中包含的产品配置而不同，具体参见后文“添加新的产品”），此时可以通过输入编号或者名称进行选择。\n图三，lunch函数的输出\n![](http://www.ibm.com/developerworks/cn/opensource/os-cn-android-build/image003.png)\n图 3. lunch 函数的输出\n    第三行命令“make -j8”才真正开始执行编译。make 的参数“-j”指定了同时编译的 Job 数量，这是个整数，该值通常是编译主机 CPU 支持的并发线程总数的 1 倍或 2 倍（例如：在一个 4 核，每个核支持两个线程的 CPU 上，可以使用 make -j8 或 make -j16）。在调用 make 命令时，如果没有指定任何目标，则将使用默认的名称为“droid”目标，该目标会编译出完整的 Android 系统镜像。\n\n### Build结果的目录结构\n\n所有的编译产物都将位于 /out 目录下，该目录下主要有以下几个子目录：\n    /out/host/：该目录下包含了针对主机的 Android 开发工具的产物。即 SDK 中的各种工具，例如：emulator，adb，aapt 等。\n    /out/target/common/：该目录下包含了针对设备的共通的编译产物，主要是 Java 应用代码和 Java 库。\n    /out/target/product/<product_name>/：包含了针对特定设备的编译结果以及平台相关的 C/C++ 库和二进制文件。其中，<product_name>是具体目标设备的名称。\n    /out/dist/：包含了为多种分发而准备的包，通过“make disttarget”将文件拷贝到该目录，默认的编译目标不会产生该目录。\n\nBuild生成的镜像文件：\n\nBuild 的产物中最重要的是三个镜像文件，它们都位于 /out/target/product/<product_name>/ 目录下。\n\n这三个文件是：\n    system.img：包含了 Android OS 的系统文件，库，可执行文件以及预置的应用程序，将被挂载为根分区。\n    ramdisk.img：在启动时将被 Linux 内核挂载为只读分区，它包含了 /init 文件和一些配置文件。它用来挂载其他系统镜像并启动 init 进程。\n    userdata.img：将被挂载为 /data，包含了应用程序相关的数据以及和用户相关的数据。\n    \n原文较长，这里只转载了一部分。\n原文地址：http://blog.csdn.net/huangyabin001/article/details/36383031\n\n\n\n\n\n","source":"_posts/转-Android编译系统的理解.md","raw":"---\ntitle: '[转]Android编译系统的理解'\ndate: 2016-08-20 18:45:52\ntags: Android\n---\nAndroid编译系统庞大，想要理解还是要花点功夫的，今天看到篇不错的帖子，特此转载。\n### 简介\nAndroid Build 系统是用来编译 Android 系统，Android SDK 以及相关文档的一套框架。众所周知，Android 是一个开源的操作系统。Android 的源码中包含了许许多多的模块。 不同产商的不同设备对于 Android 系统的定制都是不一样的。如何将这些模块统一管理起来，如何能够在不同的操作系统上进行编译，如何在编译时能够支持面向不同的硬件设备，不同的编译类型，且还要提供面向各个产商的定制扩展，是非常有难度的。 但 Android Build 系统很好的解决了这些问题，这里面有很多值得我们开发人员学习的地方。对于 Android 平台开发人员来说，本文可以帮助你熟悉你每天接触到的构建环境。对于其他开发人员来说，本文可以作为一个 GNU Make的使用案例，学习这些成功案例，可以提升我们的开发经验。\n### 概述\nBuild 系统中最主要的处理逻辑都在 Make 文件中，而其他的脚本文件只是起到一些辅助作用，由于篇幅所限，本文只探讨 Make 文件中的内容。\n    整个 Build 系统中的 Make 文件可以分为三类：\n    第一类是 Build 系统核心文件\n    此类文件定义了整个 Build 系统的框架，而其他所有 Make 文件都是在这个框架的基础上编写出来的。\n\n图 1 是 Android 源码树的目录结构，Build 系统核心文件全部位于 /build/core（本文所提到的所有路径都是以 Android 源码树作为背景的，“/”指的是源码树的根目录，与文件系统无关）目录下。\n\n![](www.ibm.com/developerworks/cn/opensource/os-cn-android-build/image001.png)\n\n第二类是针对某个产品（一个产品可能是某个型号的手机或者平板电脑）的 Make 文件\n这些文件通常位于 device 目录下，该目录下又以公司名以及产品名分为两级目录，图 2 是 device 目录下子目录的结构。对于一个产品的定义通常需要一组文件，这些文件共同构成了对于这个产品的定义。例如，/device/sony/it26 目录下的文件共同构成了对于 Sony LT26 型号手机的定义\n![](http://www.ibm.com/developerworks/cn/opensource/os-cn-android-build/image002.png)\n第三类是针对某个模块（关于模块后文会详细讨论）的 Make 文件\n 整个系统中，包含了大量的模块，每个模块都有一个专门的 Make 文件，这类文件的名称统一为“Android.mk”，该文件中定义了如何编译当前模块。Build 系统会在整个源码树中扫描名称为“Android.mk”的文件并根据其中的内容执行模块的编译。\n### 编译Android系统\n#### 执行编译\n   Android 系统的编译环境目前只支持 Ubuntu 以及 Mac OS 两种操作系统。关于编译环境的构建方法请参见以下路径：http://source.android.com/source/initializing.html\n在完成编译环境的准备工作以及获取到完整的 Android 源码之后，想要编译出整个 Android 系统非常的容易：\n打开控制台之后转到 Android 源码的根目录，然后执行如清单 1\n\n所示的三条命令即可（\"$\"是命令提示符，不是命令的一部分。）：\n\n完整的编译时间依赖于编译主机的配置，在笔者的 Macbook Pro（OS X 10.8.2, i7 2G CPU，8G RAM, 120G SSD）上使用 8 个 Job 同时编译共需要一个半小时左右的时间。\n清单一：编译Android系统\n```\n $ source build/envsetup.sh \n $ lunch full-eng \n $ make -j8 \n```\n这三行命令的说明如下：\n\n第一行命令“source build/envsetup.sh”引入了 build/envsetup.sh脚本。该脚本的作用是初始化编译环境，并引入一些辅助的 Shell 函数，这其中就包括第二步使用 lunch 函数。\n\n除此之外，该文件中还定义了其他一些常用的函数，它们如表 1 所示：\n表一：build/envsetup.sh中定义的常用函数\n| 名称        | 说明         | \n| ------------- |-------------| \n|croot |\t切换到源码树的根目录|\n|m| \t在源码树的根目录执行 make|\n|mm \t|Build 当前目录下的模块|\n|mmm |\tBuild 指定目录下的模块|\n|cgrep |\t在所有 C/C++ 文件上执行 grep|\n|jgrep |\t在所有 Java 文件上执行 grep|\n|resgrep |\t在所有 res/*.xml 文件上执行 grep|\n|godir \t|转到包含某个文件的目录路径|\n|printconfig| \t显示当前 Build 的配置信息|\n|add_lunch_combo |\t在 lunch 函数的菜单中添加一个条目|\n\n第二行命令“lunch full-eng”是调用 lunch 函数，并指定参数为“full-eng”。lunch 函数的参数用来指定此次编译的目标设备以及编译类型。在这里，这两个值分别是“full”和“eng”。“full”是 Android 源码中已经定义好的一种产品，是为模拟器而设置的。而编译类型会影响最终系统中包含的模块，关于编译类型将在表 7 中详细讲解。\n\n如果调用 lunch 函数的时候没有指定参数，那么该函数将输出列表以供选择，该列表类似图 3 中的内容（列表的内容会根据当前 Build 系统中包含的产品配置而不同，具体参见后文“添加新的产品”），此时可以通过输入编号或者名称进行选择。\n图三，lunch函数的输出\n![](http://www.ibm.com/developerworks/cn/opensource/os-cn-android-build/image003.png)\n图 3. lunch 函数的输出\n    第三行命令“make -j8”才真正开始执行编译。make 的参数“-j”指定了同时编译的 Job 数量，这是个整数，该值通常是编译主机 CPU 支持的并发线程总数的 1 倍或 2 倍（例如：在一个 4 核，每个核支持两个线程的 CPU 上，可以使用 make -j8 或 make -j16）。在调用 make 命令时，如果没有指定任何目标，则将使用默认的名称为“droid”目标，该目标会编译出完整的 Android 系统镜像。\n\n### Build结果的目录结构\n\n所有的编译产物都将位于 /out 目录下，该目录下主要有以下几个子目录：\n    /out/host/：该目录下包含了针对主机的 Android 开发工具的产物。即 SDK 中的各种工具，例如：emulator，adb，aapt 等。\n    /out/target/common/：该目录下包含了针对设备的共通的编译产物，主要是 Java 应用代码和 Java 库。\n    /out/target/product/<product_name>/：包含了针对特定设备的编译结果以及平台相关的 C/C++ 库和二进制文件。其中，<product_name>是具体目标设备的名称。\n    /out/dist/：包含了为多种分发而准备的包，通过“make disttarget”将文件拷贝到该目录，默认的编译目标不会产生该目录。\n\nBuild生成的镜像文件：\n\nBuild 的产物中最重要的是三个镜像文件，它们都位于 /out/target/product/<product_name>/ 目录下。\n\n这三个文件是：\n    system.img：包含了 Android OS 的系统文件，库，可执行文件以及预置的应用程序，将被挂载为根分区。\n    ramdisk.img：在启动时将被 Linux 内核挂载为只读分区，它包含了 /init 文件和一些配置文件。它用来挂载其他系统镜像并启动 init 进程。\n    userdata.img：将被挂载为 /data，包含了应用程序相关的数据以及和用户相关的数据。\n    \n原文较长，这里只转载了一部分。\n原文地址：http://blog.csdn.net/huangyabin001/article/details/36383031\n\n\n\n\n\n","slug":"转-Android编译系统的理解","published":1,"updated":"2016-08-31T07:05:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisimytyg000laojxohflue37","content":"<p>Android编译系统庞大，想要理解还是要花点功夫的，今天看到篇不错的帖子，特此转载。</p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Android Build 系统是用来编译 Android 系统，Android SDK 以及相关文档的一套框架。众所周知，Android 是一个开源的操作系统。Android 的源码中包含了许许多多的模块。 不同产商的不同设备对于 Android 系统的定制都是不一样的。如何将这些模块统一管理起来，如何能够在不同的操作系统上进行编译，如何在编译时能够支持面向不同的硬件设备，不同的编译类型，且还要提供面向各个产商的定制扩展，是非常有难度的。 但 Android Build 系统很好的解决了这些问题，这里面有很多值得我们开发人员学习的地方。对于 Android 平台开发人员来说，本文可以帮助你熟悉你每天接触到的构建环境。对于其他开发人员来说，本文可以作为一个 GNU Make的使用案例，学习这些成功案例，可以提升我们的开发经验。</p>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Build 系统中最主要的处理逻辑都在 Make 文件中，而其他的脚本文件只是起到一些辅助作用，由于篇幅所限，本文只探讨 Make 文件中的内容。<br>    整个 Build 系统中的 Make 文件可以分为三类：<br>    第一类是 Build 系统核心文件<br>    此类文件定义了整个 Build 系统的框架，而其他所有 Make 文件都是在这个框架的基础上编写出来的。</p>\n<p>图 1 是 Android 源码树的目录结构，Build 系统核心文件全部位于 /build/core（本文所提到的所有路径都是以 Android 源码树作为背景的，“/”指的是源码树的根目录，与文件系统无关）目录下。</p>\n<p><img src=\"www.ibm.com/developerworks/cn/opensource/os-cn-android-build/image001.png\" alt=\"\"></p>\n<p>第二类是针对某个产品（一个产品可能是某个型号的手机或者平板电脑）的 Make 文件<br>这些文件通常位于 device 目录下，该目录下又以公司名以及产品名分为两级目录，图 2 是 device 目录下子目录的结构。对于一个产品的定义通常需要一组文件，这些文件共同构成了对于这个产品的定义。例如，/device/sony/it26 目录下的文件共同构成了对于 Sony LT26 型号手机的定义<br><img src=\"http://www.ibm.com/developerworks/cn/opensource/os-cn-android-build/image002.png\" alt=\"\"><br>第三类是针对某个模块（关于模块后文会详细讨论）的 Make 文件<br> 整个系统中，包含了大量的模块，每个模块都有一个专门的 Make 文件，这类文件的名称统一为“Android.mk”，该文件中定义了如何编译当前模块。Build 系统会在整个源码树中扫描名称为“Android.mk”的文件并根据其中的内容执行模块的编译。</p>\n<h3 id=\"编译Android系统\"><a href=\"#编译Android系统\" class=\"headerlink\" title=\"编译Android系统\"></a>编译Android系统</h3><h4 id=\"执行编译\"><a href=\"#执行编译\" class=\"headerlink\" title=\"执行编译\"></a>执行编译</h4><p>   Android 系统的编译环境目前只支持 Ubuntu 以及 Mac OS 两种操作系统。关于编译环境的构建方法请参见以下路径：<a href=\"http://source.android.com/source/initializing.html\" target=\"_blank\" rel=\"external\">http://source.android.com/source/initializing.html</a><br>在完成编译环境的准备工作以及获取到完整的 Android 源码之后，想要编译出整个 Android 系统非常的容易：<br>打开控制台之后转到 Android 源码的根目录，然后执行如清单 1</p>\n<p>所示的三条命令即可（”$”是命令提示符，不是命令的一部分。）：</p>\n<p>完整的编译时间依赖于编译主机的配置，在笔者的 Macbook Pro（OS X 10.8.2, i7 2G CPU，8G RAM, 120G SSD）上使用 8 个 Job 同时编译共需要一个半小时左右的时间。<br>清单一：编译Android系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ source build/envsetup.sh </div><div class=\"line\">$ lunch full-eng </div><div class=\"line\">$ make -j8</div></pre></td></tr></table></figure></p>\n<p>这三行命令的说明如下：</p>\n<p>第一行命令“source build/envsetup.sh”引入了 build/envsetup.sh脚本。该脚本的作用是初始化编译环境，并引入一些辅助的 Shell 函数，这其中就包括第二步使用 lunch 函数。</p>\n<p>除此之外，该文件中还定义了其他一些常用的函数，它们如表 1 所示：<br>表一：build/envsetup.sh中定义的常用函数<br>| 名称        | 说明         |<br>| ————- |————-|<br>|croot |    切换到源码树的根目录|<br>|m|     在源码树的根目录执行 make|<br>|mm     |Build 当前目录下的模块|<br>|mmm |    Build 指定目录下的模块|<br>|cgrep |    在所有 C/C++ 文件上执行 grep|<br>|jgrep |    在所有 Java 文件上执行 grep|<br>|resgrep |    在所有 res/*.xml 文件上执行 grep|<br>|godir     |转到包含某个文件的目录路径|<br>|printconfig|     显示当前 Build 的配置信息|<br>|add_lunch_combo |    在 lunch 函数的菜单中添加一个条目|</p>\n<p>第二行命令“lunch full-eng”是调用 lunch 函数，并指定参数为“full-eng”。lunch 函数的参数用来指定此次编译的目标设备以及编译类型。在这里，这两个值分别是“full”和“eng”。“full”是 Android 源码中已经定义好的一种产品，是为模拟器而设置的。而编译类型会影响最终系统中包含的模块，关于编译类型将在表 7 中详细讲解。</p>\n<p>如果调用 lunch 函数的时候没有指定参数，那么该函数将输出列表以供选择，该列表类似图 3 中的内容（列表的内容会根据当前 Build 系统中包含的产品配置而不同，具体参见后文“添加新的产品”），此时可以通过输入编号或者名称进行选择。<br>图三，lunch函数的输出<br><img src=\"http://www.ibm.com/developerworks/cn/opensource/os-cn-android-build/image003.png\" alt=\"\"><br>图 3. lunch 函数的输出<br>    第三行命令“make -j8”才真正开始执行编译。make 的参数“-j”指定了同时编译的 Job 数量，这是个整数，该值通常是编译主机 CPU 支持的并发线程总数的 1 倍或 2 倍（例如：在一个 4 核，每个核支持两个线程的 CPU 上，可以使用 make -j8 或 make -j16）。在调用 make 命令时，如果没有指定任何目标，则将使用默认的名称为“droid”目标，该目标会编译出完整的 Android 系统镜像。</p>\n<h3 id=\"Build结果的目录结构\"><a href=\"#Build结果的目录结构\" class=\"headerlink\" title=\"Build结果的目录结构\"></a>Build结果的目录结构</h3><p>所有的编译产物都将位于 /out 目录下，该目录下主要有以下几个子目录：<br>    /out/host/：该目录下包含了针对主机的 Android 开发工具的产物。即 SDK 中的各种工具，例如：emulator，adb，aapt 等。<br>    /out/target/common/：该目录下包含了针对设备的共通的编译产物，主要是 Java 应用代码和 Java 库。<br>    /out/target/product/<product_name>/：包含了针对特定设备的编译结果以及平台相关的 C/C++ 库和二进制文件。其中，<product_name>是具体目标设备的名称。<br>    /out/dist/：包含了为多种分发而准备的包，通过“make disttarget”将文件拷贝到该目录，默认的编译目标不会产生该目录。</product_name></product_name></p>\n<p>Build生成的镜像文件：</p>\n<p>Build 的产物中最重要的是三个镜像文件，它们都位于 /out/target/product/<product_name>/ 目录下。</product_name></p>\n<p>这三个文件是：<br>    system.img：包含了 Android OS 的系统文件，库，可执行文件以及预置的应用程序，将被挂载为根分区。<br>    ramdisk.img：在启动时将被 Linux 内核挂载为只读分区，它包含了 /init 文件和一些配置文件。它用来挂载其他系统镜像并启动 init 进程。<br>    userdata.img：将被挂载为 /data，包含了应用程序相关的数据以及和用户相关的数据。</p>\n<p>原文较长，这里只转载了一部分。<br>原文地址：<a href=\"http://blog.csdn.net/huangyabin001/article/details/36383031\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/huangyabin001/article/details/36383031</a></p>\n","excerpt":"","more":"<p>Android编译系统庞大，想要理解还是要花点功夫的，今天看到篇不错的帖子，特此转载。</p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Android Build 系统是用来编译 Android 系统，Android SDK 以及相关文档的一套框架。众所周知，Android 是一个开源的操作系统。Android 的源码中包含了许许多多的模块。 不同产商的不同设备对于 Android 系统的定制都是不一样的。如何将这些模块统一管理起来，如何能够在不同的操作系统上进行编译，如何在编译时能够支持面向不同的硬件设备，不同的编译类型，且还要提供面向各个产商的定制扩展，是非常有难度的。 但 Android Build 系统很好的解决了这些问题，这里面有很多值得我们开发人员学习的地方。对于 Android 平台开发人员来说，本文可以帮助你熟悉你每天接触到的构建环境。对于其他开发人员来说，本文可以作为一个 GNU Make的使用案例，学习这些成功案例，可以提升我们的开发经验。</p>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Build 系统中最主要的处理逻辑都在 Make 文件中，而其他的脚本文件只是起到一些辅助作用，由于篇幅所限，本文只探讨 Make 文件中的内容。<br>    整个 Build 系统中的 Make 文件可以分为三类：<br>    第一类是 Build 系统核心文件<br>    此类文件定义了整个 Build 系统的框架，而其他所有 Make 文件都是在这个框架的基础上编写出来的。</p>\n<p>图 1 是 Android 源码树的目录结构，Build 系统核心文件全部位于 /build/core（本文所提到的所有路径都是以 Android 源码树作为背景的，“/”指的是源码树的根目录，与文件系统无关）目录下。</p>\n<p><img src=\"www.ibm.com/developerworks/cn/opensource/os-cn-android-build/image001.png\" alt=\"\"></p>\n<p>第二类是针对某个产品（一个产品可能是某个型号的手机或者平板电脑）的 Make 文件<br>这些文件通常位于 device 目录下，该目录下又以公司名以及产品名分为两级目录，图 2 是 device 目录下子目录的结构。对于一个产品的定义通常需要一组文件，这些文件共同构成了对于这个产品的定义。例如，/device/sony/it26 目录下的文件共同构成了对于 Sony LT26 型号手机的定义<br><img src=\"http://www.ibm.com/developerworks/cn/opensource/os-cn-android-build/image002.png\" alt=\"\"><br>第三类是针对某个模块（关于模块后文会详细讨论）的 Make 文件<br> 整个系统中，包含了大量的模块，每个模块都有一个专门的 Make 文件，这类文件的名称统一为“Android.mk”，该文件中定义了如何编译当前模块。Build 系统会在整个源码树中扫描名称为“Android.mk”的文件并根据其中的内容执行模块的编译。</p>\n<h3 id=\"编译Android系统\"><a href=\"#编译Android系统\" class=\"headerlink\" title=\"编译Android系统\"></a>编译Android系统</h3><h4 id=\"执行编译\"><a href=\"#执行编译\" class=\"headerlink\" title=\"执行编译\"></a>执行编译</h4><p>   Android 系统的编译环境目前只支持 Ubuntu 以及 Mac OS 两种操作系统。关于编译环境的构建方法请参见以下路径：<a href=\"http://source.android.com/source/initializing.html\">http://source.android.com/source/initializing.html</a><br>在完成编译环境的准备工作以及获取到完整的 Android 源码之后，想要编译出整个 Android 系统非常的容易：<br>打开控制台之后转到 Android 源码的根目录，然后执行如清单 1</p>\n<p>所示的三条命令即可（”$”是命令提示符，不是命令的一部分。）：</p>\n<p>完整的编译时间依赖于编译主机的配置，在笔者的 Macbook Pro（OS X 10.8.2, i7 2G CPU，8G RAM, 120G SSD）上使用 8 个 Job 同时编译共需要一个半小时左右的时间。<br>清单一：编译Android系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ source build/envsetup.sh </div><div class=\"line\">$ lunch full-eng </div><div class=\"line\">$ make -j8</div></pre></td></tr></table></figure></p>\n<p>这三行命令的说明如下：</p>\n<p>第一行命令“source build/envsetup.sh”引入了 build/envsetup.sh脚本。该脚本的作用是初始化编译环境，并引入一些辅助的 Shell 函数，这其中就包括第二步使用 lunch 函数。</p>\n<p>除此之外，该文件中还定义了其他一些常用的函数，它们如表 1 所示：<br>表一：build/envsetup.sh中定义的常用函数<br>| 名称        | 说明         |<br>| ————- |————-|<br>|croot |    切换到源码树的根目录|<br>|m|     在源码树的根目录执行 make|<br>|mm     |Build 当前目录下的模块|<br>|mmm |    Build 指定目录下的模块|<br>|cgrep |    在所有 C/C++ 文件上执行 grep|<br>|jgrep |    在所有 Java 文件上执行 grep|<br>|resgrep |    在所有 res/*.xml 文件上执行 grep|<br>|godir     |转到包含某个文件的目录路径|<br>|printconfig|     显示当前 Build 的配置信息|<br>|add_lunch_combo |    在 lunch 函数的菜单中添加一个条目|</p>\n<p>第二行命令“lunch full-eng”是调用 lunch 函数，并指定参数为“full-eng”。lunch 函数的参数用来指定此次编译的目标设备以及编译类型。在这里，这两个值分别是“full”和“eng”。“full”是 Android 源码中已经定义好的一种产品，是为模拟器而设置的。而编译类型会影响最终系统中包含的模块，关于编译类型将在表 7 中详细讲解。</p>\n<p>如果调用 lunch 函数的时候没有指定参数，那么该函数将输出列表以供选择，该列表类似图 3 中的内容（列表的内容会根据当前 Build 系统中包含的产品配置而不同，具体参见后文“添加新的产品”），此时可以通过输入编号或者名称进行选择。<br>图三，lunch函数的输出<br><img src=\"http://www.ibm.com/developerworks/cn/opensource/os-cn-android-build/image003.png\" alt=\"\"><br>图 3. lunch 函数的输出<br>    第三行命令“make -j8”才真正开始执行编译。make 的参数“-j”指定了同时编译的 Job 数量，这是个整数，该值通常是编译主机 CPU 支持的并发线程总数的 1 倍或 2 倍（例如：在一个 4 核，每个核支持两个线程的 CPU 上，可以使用 make -j8 或 make -j16）。在调用 make 命令时，如果没有指定任何目标，则将使用默认的名称为“droid”目标，该目标会编译出完整的 Android 系统镜像。</p>\n<h3 id=\"Build结果的目录结构\"><a href=\"#Build结果的目录结构\" class=\"headerlink\" title=\"Build结果的目录结构\"></a>Build结果的目录结构</h3><p>所有的编译产物都将位于 /out 目录下，该目录下主要有以下几个子目录：<br>    /out/host/：该目录下包含了针对主机的 Android 开发工具的产物。即 SDK 中的各种工具，例如：emulator，adb，aapt 等。<br>    /out/target/common/：该目录下包含了针对设备的共通的编译产物，主要是 Java 应用代码和 Java 库。<br>    /out/target/product/<product_name>/：包含了针对特定设备的编译结果以及平台相关的 C/C++ 库和二进制文件。其中，<product_name>是具体目标设备的名称。<br>    /out/dist/：包含了为多种分发而准备的包，通过“make disttarget”将文件拷贝到该目录，默认的编译目标不会产生该目录。</p>\n<p>Build生成的镜像文件：</p>\n<p>Build 的产物中最重要的是三个镜像文件，它们都位于 /out/target/product/<product_name>/ 目录下。</p>\n<p>这三个文件是：<br>    system.img：包含了 Android OS 的系统文件，库，可执行文件以及预置的应用程序，将被挂载为根分区。<br>    ramdisk.img：在启动时将被 Linux 内核挂载为只读分区，它包含了 /init 文件和一些配置文件。它用来挂载其他系统镜像并启动 init 进程。<br>    userdata.img：将被挂载为 /data，包含了应用程序相关的数据以及和用户相关的数据。</p>\n<p>原文较长，这里只转载了一部分。<br>原文地址：<a href=\"http://blog.csdn.net/huangyabin001/article/details/36383031\">http://blog.csdn.net/huangyabin001/article/details/36383031</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cisimytxz0000aojx64r75puc","tag_id":"cisimyty20001aojxwn63zemx","_id":"cisimyty30002aojxeaqhbk80"},{"post_id":"cisimyty40003aojx9l8523rk","tag_id":"cisimyty50004aojxjuoa0wvi","_id":"cisimyty50005aojxni3s7vmb"},{"post_id":"cisimyty60006aojxl36b9d8z","tag_id":"cisimyty20001aojxwn63zemx","_id":"cisimyty60007aojx2hlx7psj"},{"post_id":"cisimyty70008aojxylbl9krm","tag_id":"cisimyty80009aojx2212y0vn","_id":"cisimyty9000baojxinvwpsot"},{"post_id":"cisimyty70008aojxylbl9krm","tag_id":"cisimyty9000aaojxn0rnamp5","_id":"cisimyty9000caojxxmb61ul1"},{"post_id":"cisimyty9000daojxy0r518vt","tag_id":"cisimytyb000eaojxkdwt2x3q","_id":"cisimytyb000faojx4pi9tl4l"},{"post_id":"cisimytyc000gaojxqlyn8h4d","tag_id":"cisimytyd000haojx9u20typo","_id":"cisimytyd000iaojxucgdklpt"},{"post_id":"cisimytye000jaojxjaa7rr5x","tag_id":"cisimyty50004aojxjuoa0wvi","_id":"cisimytyf000kaojxzy803b7w"},{"post_id":"cisimytyg000laojxohflue37","tag_id":"cisimyty50004aojxjuoa0wvi","_id":"cisimytyi000maojxo78irg9t"}],"Tag":[{"name":"java","_id":"cisimyty20001aojxwn63zemx"},{"name":"Android","_id":"cisimyty50004aojxjuoa0wvi"},{"name":"Shell","_id":"cisimyty80009aojx2212y0vn"},{"name":"Tool","_id":"cisimyty9000aaojxn0rnamp5"},{"name":"hexo","_id":"cisimytyb000eaojxkdwt2x3q"},{"name":"操作系统","_id":"cisimytyd000haojx9u20typo"}]}}